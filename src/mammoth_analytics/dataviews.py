"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import Nullable, OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class Dataviews(BaseSDK):
    def list(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        fields: Optional[str] = "__standard",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListDataviewsResponse:
        r"""Get list of dataviews present in a dataset

        Get list of dataviews present in a dataset

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param limit: Limit for how many dataviews to list
        :param offset: Offset for the dataviews list
        :param sort: Sort is a list of tuples in string format. Tuples are of the form (field, sort_order), separated by comma, where sort_order can be 'asc' or 'desc'. Allowed fields are ['id', 'name', 'ds_id', 'status', 'created_at']
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListDataviewsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            fields=fields,
            limit=limit,
            offset=offset,
            sort=sort,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ListDataviews",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewInfo, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobsGetResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsBadRequestUnion, http_res
            )
            raise errors.ListDataviewsBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsUnauthorizedErrorData, http_res
            )
            raise errors.ListDataviewsUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsNotFoundErrorData, http_res
            )
            raise errors.ListDataviewsNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def list_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        fields: Optional[str] = "__standard",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListDataviewsResponse:
        r"""Get list of dataviews present in a dataset

        Get list of dataviews present in a dataset

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param limit: Limit for how many dataviews to list
        :param offset: Offset for the dataviews list
        :param sort: Sort is a list of tuples in string format. Tuples are of the form (field, sort_order), separated by comma, where sort_order can be 'asc' or 'desc'. Allowed fields are ['id', 'name', 'ds_id', 'status', 'created_at']
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListDataviewsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            fields=fields,
            limit=limit,
            offset=offset,
            sort=sort,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ListDataviews",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewInfo, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobsGetResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsBadRequestUnion, http_res
            )
            raise errors.ListDataviewsBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsUnauthorizedErrorData, http_res
            )
            raise errors.ListDataviewsUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.ListDataviewsNotFoundErrorData, http_res
            )
            raise errors.ListDataviewsNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def add(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: Optional[int] = 4,
        name: OptionalNullable[str] = "View",
        clone_config_from: OptionalNullable[int] = UNSET,
        dataview_config: OptionalNullable[
            Union[models.DataviewConfig, models.DataviewConfigTypedDict]
        ] = UNSET,
        extra_condition: OptionalNullable[
            Union[models.ExtraCondition, models.ExtraConditionTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddDataviewResponse:
        r"""Create or duplicate dataview

        Create or duplicate dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param name: Dataview Name
        :param clone_config_from: Clone config from
        :param dataview_config: Dataview Config
        :param extra_condition: Extra Condition
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddDataviewRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            create_dataview=models.CreateDataview(
                name=name,
                clone_config_from=clone_config_from,
                dataview_config=utils.get_pydantic_model(
                    dataview_config, OptionalNullable[models.DataviewConfig]
                ),
                extra_condition=utils.get_pydantic_model(
                    extra_condition, OptionalNullable[models.ExtraCondition]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_dataview,
                True,
                False,
                "json",
                Nullable[models.CreateDataview],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AddDataview",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CreateDataview, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewBadRequestUnion, http_res
            )
            raise errors.AddDataviewBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewUnauthorizedErrorData, http_res
            )
            raise errors.AddDataviewUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewNotFoundErrorData, http_res
            )
            raise errors.AddDataviewNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def add_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: Optional[int] = 4,
        name: OptionalNullable[str] = "View",
        clone_config_from: OptionalNullable[int] = UNSET,
        dataview_config: OptionalNullable[
            Union[models.DataviewConfig, models.DataviewConfigTypedDict]
        ] = UNSET,
        extra_condition: OptionalNullable[
            Union[models.ExtraCondition, models.ExtraConditionTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddDataviewResponse:
        r"""Create or duplicate dataview

        Create or duplicate dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param name: Dataview Name
        :param clone_config_from: Clone config from
        :param dataview_config: Dataview Config
        :param extra_condition: Extra Condition
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddDataviewRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            create_dataview=models.CreateDataview(
                name=name,
                clone_config_from=clone_config_from,
                dataview_config=utils.get_pydantic_model(
                    dataview_config, OptionalNullable[models.DataviewConfig]
                ),
                extra_condition=utils.get_pydantic_model(
                    extra_condition, OptionalNullable[models.ExtraCondition]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_dataview,
                True,
                False,
                "json",
                Nullable[models.CreateDataview],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AddDataview",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CreateDataview, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewBadRequestUnion, http_res
            )
            raise errors.AddDataviewBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewUnauthorizedErrorData, http_res
            )
            raise errors.AddDataviewUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddDataviewNotFoundErrorData, http_res
            )
            raise errors.AddDataviewNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def delete_multiple(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        ids: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DataviewBulkDelete:
        r"""Delete multiple dataviews

        Delete multiple dataviews

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param ids: Comma separated integers for the dataviews ids within the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteMultipleDataviewsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            ids=ids,
        )

        req = self._build_request(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteMultipleDataviews",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.DataviewBulkDelete, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsBadRequestUnion, http_res
            )
            raise errors.DeleteMultipleDataviewsBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsUnauthorizedErrorData, http_res
            )
            raise errors.DeleteMultipleDataviewsUnauthorizedError(
                response_data, http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsNotFoundErrorData, http_res
            )
            raise errors.DeleteMultipleDataviewsNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def delete_multiple_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        ids: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DataviewBulkDelete:
        r"""Delete multiple dataviews

        Delete multiple dataviews

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param ids: Comma separated integers for the dataviews ids within the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteMultipleDataviewsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            ids=ids,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteMultipleDataviews",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.DataviewBulkDelete, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsBadRequestUnion, http_res
            )
            raise errors.DeleteMultipleDataviewsBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsUnauthorizedErrorData, http_res
            )
            raise errors.DeleteMultipleDataviewsUnauthorizedError(
                response_data, http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteMultipleDataviewsNotFoundErrorData, http_res
            )
            raise errors.DeleteMultipleDataviewsNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get_information(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        fields: Optional[str] = "__standard",
        sequence: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDataviewInformationIndividualResponse:
        r"""Get dataview information

        Get dataview information like id, row_count, column_count, metadata, taskwise info, status, etc

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param sequence: Sequence number of the dataview task
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewInformationIndividualRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            fields=fields,
            sequence=sequence,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewInformationIndividual",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewInfo, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualBadRequestUnion, http_res
            )
            raise errors.GetDataviewInformationIndividualBadRequest(
                response_data, http_res
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewInformationIndividualUnauthorizedError(
                response_data, http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualNotFoundErrorData, http_res
            )
            raise errors.GetDataviewInformationIndividualNotFoundError(
                response_data, http_res
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_information_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        fields: Optional[str] = "__standard",
        sequence: Optional[int] = 0,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDataviewInformationIndividualResponse:
        r"""Get dataview information

        Get dataview information like id, row_count, column_count, metadata, taskwise info, status, etc

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param sequence: Sequence number of the dataview task
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewInformationIndividualRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            fields=fields,
            sequence=sequence,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewInformationIndividual",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewInfo, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualBadRequestUnion, http_res
            )
            raise errors.GetDataviewInformationIndividualBadRequest(
                response_data, http_res
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewInformationIndividualUnauthorizedError(
                response_data, http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewInformationIndividualNotFoundErrorData, http_res
            )
            raise errors.GetDataviewInformationIndividualNotFoundError(
                response_data, http_res
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def delete(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DataviewBulkDelete:
        r"""Delete dataview safely

        Delete dataview safely

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteDataviewRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteDataview",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.DataviewBulkDelete, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewBadRequestUnion, http_res
            )
            raise errors.DeleteDataviewBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewUnauthorizedErrorData, http_res
            )
            raise errors.DeleteDataviewUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewNotFoundErrorData, http_res
            )
            raise errors.DeleteDataviewNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def delete_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DataviewBulkDelete:
        r"""Delete dataview safely

        Delete dataview safely

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteDataviewRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteDataview",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.DataviewBulkDelete, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewBadRequestUnion, http_res
            )
            raise errors.DeleteDataviewBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewUnauthorizedErrorData, http_res
            )
            raise errors.DeleteDataviewUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteDataviewNotFoundErrorData, http_res
            )
            raise errors.DeleteDataviewNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def patch(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        patch: Union[
            List[models.DataviewPatchOp], List[models.DataviewPatchOpTypedDict]
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Patch dataview

        Update dataview properties like rename a dataview, reset a dataview, or apply display properties

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param patch: List of patch operations
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PatchRequestRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            dataview_patch=models.DataviewPatch(
                patch=utils.get_pydantic_model(patch, List[models.DataviewPatchOp]),
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.dataview_patch, False, False, "json", models.DataviewPatch
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="Patch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchBadRequestUnion, http_res
            )
            raise errors.PatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchUnauthorizedErrorData, http_res
            )
            raise errors.PatchUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchNotFoundErrorData, http_res
            )
            raise errors.PatchNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def patch_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        patch: Union[
            List[models.DataviewPatchOp], List[models.DataviewPatchOpTypedDict]
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Patch dataview

        Update dataview properties like rename a dataview, reset a dataview, or apply display properties

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param patch: List of patch operations
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PatchRequestRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            dataview_patch=models.DataviewPatch(
                patch=utils.get_pydantic_model(patch, List[models.DataviewPatchOp]),
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.dataview_patch, False, False, "json", models.DataviewPatch
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="Patch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchBadRequestUnion, http_res
            )
            raise errors.PatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchUnauthorizedErrorData, http_res
            )
            raise errors.PatchUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.PatchNotFoundErrorData, http_res
            )
            raise errors.PatchNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get_active_users(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetActiveUsersResponse:
        r"""Get list of active users on this dataview

        Get list of active users on this dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetActiveUsersRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/activities",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetActiveUsers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewActiveUsers, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersBadRequestUnion, http_res
            )
            raise errors.GetActiveUsersBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersUnauthorizedErrorData, http_res
            )
            raise errors.GetActiveUsersUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersNotFoundErrorData, http_res
            )
            raise errors.GetActiveUsersNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_active_users_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetActiveUsersResponse:
        r"""Get list of active users on this dataview

        Get list of active users on this dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetActiveUsersRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/activities",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetActiveUsers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewActiveUsers, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersBadRequestUnion, http_res
            )
            raise errors.GetActiveUsersBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersUnauthorizedErrorData, http_res
            )
            raise errors.GetActiveUsersUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetActiveUsersNotFoundErrorData, http_res
            )
            raise errors.GetActiveUsersNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def mark_active_user(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.MarkActiveUserResponse:
        r"""Mark active user on this dataview

        Mark active user on this dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.MarkActiveUserRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/activities",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="MarkActiveUser",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewActiveUsers, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserBadRequestUnion, http_res
            )
            raise errors.MarkActiveUserBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserUnauthorizedErrorData, http_res
            )
            raise errors.MarkActiveUserUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserNotFoundErrorData, http_res
            )
            raise errors.MarkActiveUserNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def mark_active_user_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.MarkActiveUserResponse:
        r"""Mark active user on this dataview

        Mark active user on this dataview

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.MarkActiveUserRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/activities",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="MarkActiveUser",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DataviewActiveUsers, http_res)
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserBadRequestUnion, http_res
            )
            raise errors.MarkActiveUserBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserUnauthorizedErrorData, http_res
            )
            raise errors.MarkActiveUserUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.MarkActiveUserNotFoundErrorData, http_res
            )
            raise errors.MarkActiveUserNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get_data(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        sequence: Optional[int] = 0,
        offset: Optional[int] = 1,
        limit: Optional[int] = 400,
        columns: OptionalNullable[List[str]] = UNSET,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Get dataview data

        Get dataview data

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param sequence: Sequence number of the dataview task
        :param offset: Offset is the starting position of rows at which we want to fetch data
        :param limit: Limit is the number of rows we want to fetch
        :param columns: Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched.
        :param sort: Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewDataRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            sequence=sequence,
            offset=offset,
            limit=limit,
            columns=columns,
            sort=sort,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewData",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataBadRequestUnion, http_res
            )
            raise errors.GetDataviewDataBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewDataUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataNotFoundErrorData, http_res
            )
            raise errors.GetDataviewDataNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_data_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        sequence: Optional[int] = 0,
        offset: Optional[int] = 1,
        limit: Optional[int] = 400,
        columns: OptionalNullable[List[str]] = UNSET,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Get dataview data

        Get dataview data

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param sequence: Sequence number of the dataview task
        :param offset: Offset is the starting position of rows at which we want to fetch data
        :param limit: Limit is the number of rows we want to fetch
        :param columns: Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched.
        :param sort: Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewDataRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            sequence=sequence,
            offset=offset,
            limit=limit,
            columns=columns,
            sort=sort,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewData",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataBadRequestUnion, http_res
            )
            raise errors.GetDataviewDataBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewDataUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataNotFoundErrorData, http_res
            )
            raise errors.GetDataviewDataNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def retrievedata(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        sequence: Optional[int] = 0,
        offset: Optional[int] = 1,
        limit: Optional[int] = 400,
        columns: OptionalNullable[List[str]] = UNSET,
        condition: OptionalNullable[
            Union[models.DataviewDataCondition, models.DataviewDataConditionTypedDict]
        ] = UNSET,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Get dataview data

        Get dataview data

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param sequence: Sequence Number is the step in pipeline at which we want to fetch data
        :param offset: Offset is the one-indexed starting position of rows to fetch data
        :param limit: Limit is the number of rows we want to fetch
        :param columns: Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets
        :param condition: Condition is a JSON representation of the condition we want to use while fetching the rows
        :param sort: Sort is a list tuples in string format. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewDataPostRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            dataview_data=models.DataviewData(
                sequence=sequence,
                offset=offset,
                limit=limit,
                columns=columns,
                condition=utils.get_pydantic_model(
                    condition, OptionalNullable[models.DataviewDataCondition]
                ),
                sort=sort,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.dataview_data, False, False, "json", models.DataviewData
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewDataPost",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostBadRequestUnion, http_res
            )
            raise errors.GetDataviewDataPostBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewDataPostUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostNotFoundErrorData, http_res
            )
            raise errors.GetDataviewDataPostNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def retrievedata_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        sequence: Optional[int] = 0,
        offset: Optional[int] = 1,
        limit: Optional[int] = 400,
        columns: OptionalNullable[List[str]] = UNSET,
        condition: OptionalNullable[
            Union[models.DataviewDataCondition, models.DataviewDataConditionTypedDict]
        ] = UNSET,
        sort: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Get dataview data

        Get dataview data

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param sequence: Sequence Number is the step in pipeline at which we want to fetch data
        :param offset: Offset is the one-indexed starting position of rows to fetch data
        :param limit: Limit is the number of rows we want to fetch
        :param columns: Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets
        :param condition: Condition is a JSON representation of the condition we want to use while fetching the rows
        :param sort: Sort is a list tuples in string format. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetDataviewDataPostRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            dataview_data=models.DataviewData(
                sequence=sequence,
                offset=offset,
                limit=limit,
                columns=columns,
                condition=utils.get_pydantic_model(
                    condition, OptionalNullable[models.DataviewDataCondition]
                ),
                sort=sort,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.dataview_data, False, False, "json", models.DataviewData
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetDataviewDataPost",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostBadRequestUnion, http_res
            )
            raise errors.GetDataviewDataPostBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostUnauthorizedErrorData, http_res
            )
            raise errors.GetDataviewDataPostUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetDataviewDataPostNotFoundErrorData, http_res
            )
            raise errors.GetDataviewDataPostNotFoundError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def ai_suggestions(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        suggestion_type: models.SuggestionType,
        params: Union[models.Params, models.ParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AiSuggestionsResponse:
        r"""Generate AI-based Suggestions for Dataview

        Given the prompt, generate AI data againt a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param suggestion_type: Type of operation (extraction or conditional filtering)
        :param params: Encapsulated parameters for the operation
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AiSuggestionsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            unified_prompt_spec=models.UnifiedPromptSpec(
                suggestion_type=suggestion_type,
                params=utils.get_pydantic_model(params, models.Params),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.unified_prompt_spec,
                False,
                False,
                "json",
                models.UnifiedPromptSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AiSuggestions",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody2, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody1, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AiSuggestionsBadRequestUnion, http_res
            )
            raise errors.AiSuggestionsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def ai_suggestions_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        suggestion_type: models.SuggestionType,
        params: Union[models.Params, models.ParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AiSuggestionsResponse:
        r"""Generate AI-based Suggestions for Dataview

        Given the prompt, generate AI data againt a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param suggestion_type: Type of operation (extraction or conditional filtering)
        :param params: Encapsulated parameters for the operation
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AiSuggestionsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            unified_prompt_spec=models.UnifiedPromptSpec(
                suggestion_type=suggestion_type,
                params=utils.get_pydantic_model(params, models.Params),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.unified_prompt_spec,
                False,
                False,
                "json",
                models.UnifiedPromptSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AiSuggestions",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody2, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody1, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AiSuggestionsBadRequestUnion, http_res
            )
            raise errors.AiSuggestionsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def generate_sql(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        params: Union[models.SQLGenerationParams, models.SQLGenerationParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GenerateSQLResponse:
        r"""Generate SQL query based on intent

        Given the intent, generate SQL query for a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param params: Encapsulated SQL generation parameters
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GenerateSQLRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            sql_generation_spec=models.SQLGenerationSpec(
                params=utils.get_pydantic_model(params, models.SQLGenerationParams),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/sql_generation",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.sql_generation_spec,
                False,
                False,
                "json",
                models.SQLGenerationSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GenerateSql",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.GenerateSQLResponseBody, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(
                models.GenerateSQLResponseBodyUnion, http_res
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateSQLUnauthorizedErrorData, http_res
            )
            raise errors.GenerateSQLUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def generate_sql_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        params: Union[models.SQLGenerationParams, models.SQLGenerationParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GenerateSQLResponse:
        r"""Generate SQL query based on intent

        Given the intent, generate SQL query for a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param params: Encapsulated SQL generation parameters
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GenerateSQLRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            sql_generation_spec=models.SQLGenerationSpec(
                params=utils.get_pydantic_model(params, models.SQLGenerationParams),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/sql_generation",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.sql_generation_spec,
                False,
                False,
                "json",
                models.SQLGenerationSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GenerateSql",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.GenerateSQLResponseBody, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(
                models.GenerateSQLResponseBodyUnion, http_res
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateSQLUnauthorizedErrorData, http_res
            )
            raise errors.GenerateSQLUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def generate_profile(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        params: Union[
            models.ProfileGenerationParams, models.ProfileGenerationParamsTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Generate or Update Dataset Profile

        Triggers AI-based profiling for a given dataview.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param params: Encapsulated profile generation parameters
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GenerateProfileRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            profile_generation_spec=models.ProfileGenerationSpec(
                params=utils.get_pydantic_model(params, models.ProfileGenerationParams),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/profile_generation",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.profile_generation_spec,
                False,
                False,
                "json",
                models.ProfileGenerationSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GenerateProfile",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, ["201", "202"], "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateProfileBadRequestUnion, http_res
            )
            raise errors.GenerateProfileBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateProfileUnauthorizedErrorData, http_res
            )
            raise errors.GenerateProfileUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def generate_profile_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        params: Union[
            models.ProfileGenerationParams, models.ProfileGenerationParamsTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.JobResponse:
        r"""Generate or Update Dataset Profile

        Triggers AI-based profiling for a given dataview.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param params: Encapsulated profile generation parameters
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GenerateProfileRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            profile_generation_spec=models.ProfileGenerationSpec(
                params=utils.get_pydantic_model(params, models.ProfileGenerationParams),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/profile_generation",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.profile_generation_spec,
                False,
                False,
                "json",
                models.ProfileGenerationSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GenerateProfile",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, ["201", "202"], "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateProfileBadRequestUnion, http_res
            )
            raise errors.GenerateProfileBadRequest(response_data, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(
                errors.GenerateProfileUnauthorizedErrorData, http_res
            )
            raise errors.GenerateProfileUnauthorizedError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
