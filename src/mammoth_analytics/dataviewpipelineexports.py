"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class DataviewPipelineExports(BaseSDK):
    def list(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        fields: Optional[str] = "__standard",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: Optional[str] = "(id:asc)",
        sequence: OptionalNullable[int] = UNSET,
        status: OptionalNullable[models.GetPipelineExportsFilterByStatus] = UNSET,
        reorderd: OptionalNullable[bool] = UNSET,
        handler_type: OptionalNullable[
            models.FilterByTheGivenValueOfHandlerType
        ] = UNSET,
        end_of_pipeline: OptionalNullable[bool] = UNSET,
        runnable: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PipelineExportsPaginated:
        r"""Get dataview pipeline exports information


        This endpoint fetches exports information of exports in a dataview pipeline.


        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param limit: Max number of result to return
        :param offset: Distance from the beginning of the list of results
        :param sort: Returned results are sorted by the combination of the given fields.
        :param sequence: Returns all exports where sequence matches the given value
        :param status: Returns all exports where status matches the given value
        :param reorderd: Returns all exports where reordered status matches the given value
        :param handler_type: Returns all exports where handler type matches the given value
        :param end_of_pipeline: Returns all exports where end of pipeline boolean matches the given value
        :param runnable: Returns all exports where runnable status matches the given value
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPipelineExportsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            fields=fields,
            limit=limit,
            offset=offset,
            sort=sort,
            sequence=sequence,
            status=status,
            reorderd=reorderd,
            handler_type=handler_type,
            end_of_pipeline=end_of_pipeline,
            runnable=runnable,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPipelineExports",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PipelineExportsPaginated, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportsBadRequestUnion, http_res
            )
            raise errors.GetPipelineExportsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def list_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        fields: Optional[str] = "__standard",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: Optional[str] = "(id:asc)",
        sequence: OptionalNullable[int] = UNSET,
        status: OptionalNullable[models.GetPipelineExportsFilterByStatus] = UNSET,
        reorderd: OptionalNullable[bool] = UNSET,
        handler_type: OptionalNullable[
            models.FilterByTheGivenValueOfHandlerType
        ] = UNSET,
        end_of_pipeline: OptionalNullable[bool] = UNSET,
        runnable: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PipelineExportsPaginated:
        r"""Get dataview pipeline exports information


        This endpoint fetches exports information of exports in a dataview pipeline.


        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param limit: Max number of result to return
        :param offset: Distance from the beginning of the list of results
        :param sort: Returned results are sorted by the combination of the given fields.
        :param sequence: Returns all exports where sequence matches the given value
        :param status: Returns all exports where status matches the given value
        :param reorderd: Returns all exports where reordered status matches the given value
        :param handler_type: Returns all exports where handler type matches the given value
        :param end_of_pipeline: Returns all exports where end of pipeline boolean matches the given value
        :param runnable: Returns all exports where runnable status matches the given value
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPipelineExportsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            fields=fields,
            limit=limit,
            offset=offset,
            sort=sort,
            sequence=sequence,
            status=status,
            reorderd=reorderd,
            handler_type=handler_type,
            end_of_pipeline=end_of_pipeline,
            runnable=runnable,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPipelineExports",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PipelineExportsPaginated, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportsBadRequestUnion, http_res
            )
            raise errors.GetPipelineExportsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def add(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id_param: int = 4,
        dataview_id: int,
        handler_type: models.AddExportSpecHandlerType,
        trigger_type: models.AddExportSpecTriggerType,
        run_immediately: bool,
        sequence: OptionalNullable[int] = UNSET,
        trigger_id: OptionalNullable[int] = UNSET,
        end_of_pipeline: Optional[bool] = True,
        target_properties: Optional[
            Union[
                models.AddExportSpecTargetProperties,
                models.AddExportSpecTargetPropertiesTypedDict,
            ]
        ] = None,
        additional_properties: Optional[
            Union[
                models.AddExportSpecAdditionalProperties,
                models.AddExportSpecAdditionalPropertiesTypedDict,
            ]
        ] = None,
        condition: Optional[
            Union[models.AddExportSpecCondition, models.AddExportSpecConditionTypedDict]
        ] = None,
        validate_only: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddExportResponse:
        r"""Add a export in the pipeline

        add a new transformation to the dataview. This transformation gets added as a export in the dataview pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id_param: Dataview ID of the dataset
        :param dataview_id:
        :param handler_type:
        :param trigger_type:
        :param run_immediately:
        :param sequence:
        :param trigger_id:
        :param end_of_pipeline:
        :param target_properties:
        :param additional_properties:
        :param condition:
        :param validate_only:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id_param=dataview_id_param,
            add_export_spec=models.AddExportSpec(
                dataview_id=dataview_id,
                sequence=sequence,
                trigger_id=trigger_id,
                end_of_pipeline=end_of_pipeline,
                handler_type=handler_type,
                trigger_type=trigger_type,
                target_properties=utils.get_pydantic_model(
                    target_properties, Optional[models.AddExportSpecTargetProperties]
                ),
                additional_properties=utils.get_pydantic_model(
                    additional_properties,
                    Optional[models.AddExportSpecAdditionalProperties],
                ),
                condition=utils.get_pydantic_model(
                    condition, Optional[models.AddExportSpecCondition]
                ),
                run_immediately=run_immediately,
                validate_only=validate_only,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_export_spec, False, False, "json", models.AddExportSpec
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AddExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(
                models.PipelineExortsModificationResp, http_res
            )
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddExportBadRequestUnion, http_res
            )
            raise errors.AddExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def add_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id_param: int = 4,
        dataview_id: int,
        handler_type: models.AddExportSpecHandlerType,
        trigger_type: models.AddExportSpecTriggerType,
        run_immediately: bool,
        sequence: OptionalNullable[int] = UNSET,
        trigger_id: OptionalNullable[int] = UNSET,
        end_of_pipeline: Optional[bool] = True,
        target_properties: Optional[
            Union[
                models.AddExportSpecTargetProperties,
                models.AddExportSpecTargetPropertiesTypedDict,
            ]
        ] = None,
        additional_properties: Optional[
            Union[
                models.AddExportSpecAdditionalProperties,
                models.AddExportSpecAdditionalPropertiesTypedDict,
            ]
        ] = None,
        condition: Optional[
            Union[models.AddExportSpecCondition, models.AddExportSpecConditionTypedDict]
        ] = None,
        validate_only: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddExportResponse:
        r"""Add a export in the pipeline

        add a new transformation to the dataview. This transformation gets added as a export in the dataview pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id_param: Dataview ID of the dataset
        :param dataview_id:
        :param handler_type:
        :param trigger_type:
        :param run_immediately:
        :param sequence:
        :param trigger_id:
        :param end_of_pipeline:
        :param target_properties:
        :param additional_properties:
        :param condition:
        :param validate_only:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id_param=dataview_id_param,
            add_export_spec=models.AddExportSpec(
                dataview_id=dataview_id,
                sequence=sequence,
                trigger_id=trigger_id,
                end_of_pipeline=end_of_pipeline,
                handler_type=handler_type,
                trigger_type=trigger_type,
                target_properties=utils.get_pydantic_model(
                    target_properties, Optional[models.AddExportSpecTargetProperties]
                ),
                additional_properties=utils.get_pydantic_model(
                    additional_properties,
                    Optional[models.AddExportSpecAdditionalProperties],
                ),
                condition=utils.get_pydantic_model(
                    condition, Optional[models.AddExportSpecCondition]
                ),
                run_immediately=run_immediately,
                validate_only=validate_only,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_export_spec, False, False, "json", models.AddExportSpec
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AddExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(
                models.PipelineExortsModificationResp, http_res
            )
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AddExportBadRequestUnion, http_res
            )
            raise errors.AddExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        export_id: int,
        fields: Optional[str] = "__standard",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ItemExportInfo:
        r"""Get dataview pipeline export information


        This endpoint fetches information of a export in a dataview pipeline.


        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param export_id: Id of a pipeline export
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPipelineExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            export_id=export_id,
            fields=fields,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports/{export_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPipelineExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ItemExportInfo, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportBadRequestUnion, http_res
            )
            raise errors.GetPipelineExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportNotFoundErrorData, http_res
            )
            raise errors.GetPipelineExportNotFoundError(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        export_id: int,
        fields: Optional[str] = "__standard",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ItemExportInfo:
        r"""Get dataview pipeline export information


        This endpoint fetches information of a export in a dataview pipeline.


        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param export_id: Id of a pipeline export
        :param fields: Fields to be returned in a comma-separated format. Check full mode for all fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPipelineExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            export_id=export_id,
            fields=fields,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports/{export_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPipelineExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ItemExportInfo, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportBadRequestUnion, http_res
            )
            raise errors.GetPipelineExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPipelineExportNotFoundErrorData, http_res
            )
            raise errors.GetPipelineExportNotFoundError(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def edit(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        export_id: int,
        patches: Union[
            List[models.ItemExportPatch], List[models.ItemExportPatchTypedDict]
        ],
        skip_validation: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EditExportResponse:
        r"""Edit a dataview pipeline export

        Modify a export, e.g. the params, the display_info(e.g. note), status(e.g. suspend a export)

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param export_id: Id of a pipeline export
        :param patches:
        :param skip_validation:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.EditExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            export_id=export_id,
            skip_validation=skip_validation,
            export_patch=models.ExportPatch(
                patches=utils.get_pydantic_model(patches, List[models.ItemExportPatch]),
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports/{export_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.export_patch, False, False, "json", models.ExportPatch
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="EditExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.PipelineExortsModificationResp, http_res
            )
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.EditExportBadRequestUnion, http_res
            )
            raise errors.EditExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.EditExportNotFoundErrorData, http_res
            )
            raise errors.EditExportNotFoundError(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def edit_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        dataview_id: int = 4,
        export_id: int,
        patches: Union[
            List[models.ItemExportPatch], List[models.ItemExportPatchTypedDict]
        ],
        skip_validation: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EditExportResponse:
        r"""Edit a dataview pipeline export

        Modify a export, e.g. the params, the display_info(e.g. note), status(e.g. suspend a export)

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param dataview_id: Dataview ID of the dataset
        :param export_id: Id of a pipeline export
        :param patches:
        :param skip_validation:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.EditExportRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            export_id=export_id,
            skip_validation=skip_validation,
            export_patch=models.ExportPatch(
                patches=utils.get_pydantic_model(patches, List[models.ItemExportPatch]),
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports/{export_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.export_patch, False, False, "json", models.ExportPatch
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="EditExport",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.PipelineExortsModificationResp, http_res
            )
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.JobResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.EditExportBadRequestUnion, http_res
            )
            raise errors.EditExportBadRequest(response_data, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(
                errors.EditExportNotFoundErrorData, http_res
            )
            raise errors.EditExportNotFoundError(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
