"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class Batches(BaseSDK):
    def list(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        fields: OptionalNullable[
            str
        ] = "id,name,state,created_at,description,row_count,column_count,source",
        id: Optional[str] = "",
        created_at: OptionalNullable[str] = "",
        status: OptionalNullable[str] = "",
        row_count: Optional[str] = "",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: OptionalNullable[str] = "(id:asc)",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BatchesList:
        r"""List batches

        List batches and their details.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param fields: Fields to be returned in a comma-separated format may include id, name, status, created_at.
        :param id: Track multiple batch ids, comma separated
        :param created_at: Track multiple batches, which falls under created_at date range
        :param status: Track multiple batch state, comma separated
        :param row_count: Track multiple batch row counts, comma separated
        :param limit: Max number of result to return
        :param offset: Distance from the beginning of the list of results
        :param sort: Sort the batches based on the fields
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            fields=fields,
            id=id,
            created_at=created_at,
            status=status,
            row_count=row_count,
            limit=limit,
            offset=offset,
            sort=sort,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BatchesList, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetBatchesBadRequestErrorData, http_res
            )
            raise errors.GetBatchesBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def list_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        fields: OptionalNullable[
            str
        ] = "id,name,state,created_at,description,row_count,column_count,source",
        id: Optional[str] = "",
        created_at: OptionalNullable[str] = "",
        status: OptionalNullable[str] = "",
        row_count: Optional[str] = "",
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        sort: OptionalNullable[str] = "(id:asc)",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BatchesList:
        r"""List batches

        List batches and their details.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param fields: Fields to be returned in a comma-separated format may include id, name, status, created_at.
        :param id: Track multiple batch ids, comma separated
        :param created_at: Track multiple batches, which falls under created_at date range
        :param status: Track multiple batch state, comma separated
        :param row_count: Track multiple batch row counts, comma separated
        :param limit: Max number of result to return
        :param offset: Distance from the beginning of the list of results
        :param sort: Sort the batches based on the fields
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            fields=fields,
            id=id,
            created_at=created_at,
            status=status,
            row_count=row_count,
            limit=limit,
            offset=offset,
            sort=sort,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BatchesList, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetBatchesBadRequestErrorData, http_res
            )
            raise errors.GetBatchesBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def create(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        source_id: int,
        mapping: Union[models.Mapping, models.MappingTypedDict],
        validate_only: bool,
        delete_source_ds: bool,
        new_ds_details: OptionalNullable[
            Union[models.NewDsDetails, models.NewDsDetailsTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateBatchResponse:
        r"""Create batch

        Create a new batch through combine another datasets.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param source_id: Source dataset id
        :param mapping:
        :param validate_only: Validation required
        :param delete_source_ds: Delete source dataset
        :param new_ds_details: New dataset details
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batches_post_request=models.BatchesPostRequest(
                source_id=source_id,
                mapping=utils.get_pydantic_model(mapping, models.Mapping),
                validate_only=validate_only,
                delete_source_ds=delete_source_ds,
                new_ds_details=utils.get_pydantic_model(
                    new_ds_details, OptionalNullable[models.NewDsDetails]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.batches_post_request,
                False,
                False,
                "json",
                models.BatchesPostRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreateBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CreateBatchResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.CreateBatchBadRequestUnion, http_res
            )
            raise errors.CreateBatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def create_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        source_id: int,
        mapping: Union[models.Mapping, models.MappingTypedDict],
        validate_only: bool,
        delete_source_ds: bool,
        new_ds_details: OptionalNullable[
            Union[models.NewDsDetails, models.NewDsDetailsTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateBatchResponse:
        r"""Create batch

        Create a new batch through combine another datasets.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param source_id: Source dataset id
        :param mapping:
        :param validate_only: Validation required
        :param delete_source_ds: Delete source dataset
        :param new_ds_details: New dataset details
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batches_post_request=models.BatchesPostRequest(
                source_id=source_id,
                mapping=utils.get_pydantic_model(mapping, models.Mapping),
                validate_only=validate_only,
                delete_source_ds=delete_source_ds,
                new_ds_details=utils.get_pydantic_model(
                    new_ds_details, OptionalNullable[models.NewDsDetails]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.batches_post_request,
                False,
                False,
                "json",
                models.BatchesPostRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreateBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CreateBatchResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.CreateBatchBadRequestUnion, http_res
            )
            raise errors.CreateBatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def remove(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        ids: Optional[str] = "",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Delete multiple batches

        Deletes multiple batches and its associated data.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param ids: Track multiple dataset ids, comma separated
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            ids=ids,
        )

        req = self._build_request(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteBatchesBadRequestUnion, http_res
            )
            raise errors.DeleteBatchesBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def remove_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        ids: Optional[str] = "",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Delete multiple batches

        Deletes multiple batches and its associated data.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param ids: Track multiple dataset ids, comma separated
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            ids=ids,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteBatchesBadRequestUnion, http_res
            )
            raise errors.DeleteBatchesBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def update(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        patch: Union[
            models.BatchesPatchOperation, models.BatchesPatchOperationTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Update batches

        Update batches state.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param patch:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batches_patch_request=models.BatchesPatchRequest(
                patch=utils.get_pydantic_model(patch, models.BatchesPatchOperation),
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.batches_patch_request,
                False,
                False,
                "json",
                models.BatchesPatchRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdateBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdateBatchesBadRequestUnion, http_res
            )
            raise errors.UpdateBatchesBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def update_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        patch: Union[
            models.BatchesPatchOperation, models.BatchesPatchOperationTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Update batches

        Update batches state.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param patch:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateBatchesRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batches_patch_request=models.BatchesPatchRequest(
                patch=utils.get_pydantic_model(patch, models.BatchesPatchOperation),
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.batches_patch_request,
                False,
                False,
                "json",
                models.BatchesPatchRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdateBatches",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdateBatchesBadRequestUnion, http_res
            )
            raise errors.UpdateBatchesBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        batch_id: int,
        fields: OptionalNullable[
            str
        ] = "id,name,state,created_at,description,row_count,column_count,source",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BatchDetails:
        r"""List batches

        List batches and their details.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param batch_id: Id of the batch
        :param fields: Fields to be returned in a comma-separated format may include id, name, status, created_at.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batch_id=batch_id,
            fields=fields,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches/{batch_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BatchDetails, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetBatchBadRequestErrorData, http_res
            )
            raise errors.GetBatchBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        batch_id: int,
        fields: OptionalNullable[
            str
        ] = "id,name,state,created_at,description,row_count,column_count,source",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BatchDetails:
        r"""List batches

        List batches and their details.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param batch_id: Id of the batch
        :param fields: Fields to be returned in a comma-separated format may include id, name, status, created_at.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batch_id=batch_id,
            fields=fields,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches/{batch_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BatchDetails, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetBatchBadRequestErrorData, http_res
            )
            raise errors.GetBatchBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def delete(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        batch_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Delete batch

        Deletes the batch and its associated data.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param batch_id: Id of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batch_id=batch_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches/{batch_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteBatchBadRequestUnion, http_res
            )
            raise errors.DeleteBatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def delete_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        batch_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ObjectJobSchema:
        r"""Delete batch

        Deletes the batch and its associated data.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param batch_id: Id of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteBatchRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            batch_id=batch_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches/{batch_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeleteBatch",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.ObjectJobSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeleteBatchBadRequestUnion, http_res
            )
            raise errors.DeleteBatchBadRequest(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
