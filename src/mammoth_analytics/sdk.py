"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
import importlib
from mammoth_analytics import models
from mammoth_analytics._hooks import SDKHooks
from mammoth_analytics.types import OptionalNullable, UNSET
import sys
from typing import Callable, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from mammoth_analytics.acceptinvite import AcceptInvite
    from mammoth_analytics.appusage import AppUsage
    from mammoth_analytics.automations import Automations
    from mammoth_analytics.batches import Batches
    from mammoth_analytics.browse import Browse
    from mammoth_analytics.chargebeeplan import ChargebeePlan
    from mammoth_analytics.clientapps import ClientApps
    from mammoth_analytics.conditionalformat import ConditionalFormat
    from mammoth_analytics.conditionalformats import ConditionalFormats
    from mammoth_analytics.connections import Connections
    from mammoth_analytics.connectorprofiles import ConnectorProfiles
    from mammoth_analytics.connectors import Connectors
    from mammoth_analytics.datasets import Datasets
    from mammoth_analytics.dataviewpipeline import DataviewPipeline
    from mammoth_analytics.dataviewpipelineexport import DataviewPipelineExport
    from mammoth_analytics.dataviewpipelineexports import DataviewPipelineExports
    from mammoth_analytics.dataviewpipelinetasks import DataviewPipelineTasks
    from mammoth_analytics.dataviews import Dataviews
    from mammoth_analytics.deauthorization import Deauthorization
    from mammoth_analytics.dsconfig_sdk import DsConfigSDK
    from mammoth_analytics.dsconfigs import DsConfigs
    from mammoth_analytics.externalkey_sdk import ExternalKeySDK
    from mammoth_analytics.externalkeys import ExternalKeys
    from mammoth_analytics.featureprofiles import FeatureProfiles
    from mammoth_analytics.features import Features
    from mammoth_analytics.files import Files
    from mammoth_analytics.folders import Folders
    from mammoth_analytics.generate_data_based_on_ai import GenerateDataBasedOnAI
    from mammoth_analytics.generate_profile import GenerateProfile
    from mammoth_analytics.generateaibaseddata import GenerateAiBasedData
    from mammoth_analytics.generateaidata import GenerateAiData
    from mammoth_analytics.jobs import Jobs
    from mammoth_analytics.ownerusercontrolsettings import OwnerUserControlSettings
    from mammoth_analytics.pipelineitems import PipelineItems
    from mammoth_analytics.preferences import Preferences
    from mammoth_analytics.projects import Projects
    from mammoth_analytics.querygen import QueryGen
    from mammoth_analytics.registrationsupport import RegistrationSupport
    from mammoth_analytics.reports import Reports
    from mammoth_analytics.schedules import Schedules
    from mammoth_analytics.self_ import Self
    from mammoth_analytics.selfservesubscriptionplans import SelfServeSubscriptionPlans
    from mammoth_analytics.shopifyprivacywebhooks import ShopifyPrivacyWebhooks
    from mammoth_analytics.splitsegments import SplitSegments
    from mammoth_analytics.sql_generation import SQLGeneration
    from mammoth_analytics.stripesubscriptions import StripeSubscriptions
    from mammoth_analytics.stripewebhooks import StripeWebhooks
    from mammoth_analytics.subscription_sdk import SubscriptionSDK
    from mammoth_analytics.subscriptionaccesscontrol import SubscriptionAccessControl
    from mammoth_analytics.subscriptionplans import SubscriptionPlans
    from mammoth_analytics.subscriptions import Subscriptions
    from mammoth_analytics.subscriptionssupport import SubscriptionsSupport
    from mammoth_analytics.users import Users
    from mammoth_analytics.userssupport import UsersSupport
    from mammoth_analytics.webhooks import Webhooks
    from mammoth_analytics.workspaces_sdk import WorkspacesSDK
    from mammoth_analytics.workspacessupport import WorkspacesSupport


class MammothAnalytics(BaseSDK):
    r"""Mammoth Analytics:
    Mammoth API : helps you do use mammoth app functionalities via API.

    """

    projects: "Projects"
    dataviews: "Dataviews"
    generate_ai_based_data: "GenerateAiBasedData"
    generate_ai_data: "GenerateAiData"
    generate_data_based_on_ai: "GenerateDataBasedOnAI"
    sql_generation: "SQLGeneration"
    generate_profile: "GenerateProfile"
    dataview_pipeline: "DataviewPipeline"
    dataview_pipeline_tasks: "DataviewPipelineTasks"
    dataview_pipeline_exports: "DataviewPipelineExports"
    dataview_pipeline_export: "DataviewPipelineExport"
    pipeline_items: "PipelineItems"
    jobs: "Jobs"
    client_apps: "ClientApps"
    external_keys: "ExternalKeys"
    external_key: "ExternalKeySDK"
    deauthorization: "Deauthorization"
    shopify_privacy_webhooks: "ShopifyPrivacyWebhooks"
    browse: "Browse"
    workspaces_support: "WorkspacesSupport"
    users_support: "UsersSupport"
    subscriptions_support: "SubscriptionsSupport"
    registration_support: "RegistrationSupport"
    subscription: "SubscriptionSDK"
    subscriptions: "Subscriptions"
    subscription_plans: "SubscriptionPlans"
    self_serve_subscription_plans: "SelfServeSubscriptionPlans"
    connectors: "Connectors"
    features: "Features"
    connector_profiles: "ConnectorProfiles"
    feature_profiles: "FeatureProfiles"
    stripe_subscriptions: "StripeSubscriptions"
    subscription_access_control: "SubscriptionAccessControl"
    stripe_webhooks: "StripeWebhooks"
    app_usage: "AppUsage"
    accept_invite: "AcceptInvite"
    datasets: "Datasets"
    batches: "Batches"
    workspaces: "WorkspacesSDK"
    self_: "Self"
    users: "Users"
    schedules: "Schedules"
    ds_config: "DsConfigSDK"
    ds_configs: "DsConfigs"
    connections: "Connections"
    webhooks: "Webhooks"
    chargebee_plan: "ChargebeePlan"
    files: "Files"
    preferences: "Preferences"
    folders: "Folders"
    automations: "Automations"
    query_gen: "QueryGen"
    split_segments: "SplitSegments"
    owner_user_control_settings: "OwnerUserControlSettings"
    conditional_format: "ConditionalFormat"
    conditional_formats: "ConditionalFormats"
    reports: "Reports"
    _sub_sdk_map = {
        "projects": ("mammoth_analytics.projects", "Projects"),
        "dataviews": ("mammoth_analytics.dataviews", "Dataviews"),
        "generate_ai_based_data": (
            "mammoth_analytics.generateaibaseddata",
            "GenerateAiBasedData",
        ),
        "generate_ai_data": ("mammoth_analytics.generateaidata", "GenerateAiData"),
        "generate_data_based_on_ai": (
            "mammoth_analytics.generate_data_based_on_ai",
            "GenerateDataBasedOnAI",
        ),
        "sql_generation": ("mammoth_analytics.sql_generation", "SQLGeneration"),
        "generate_profile": ("mammoth_analytics.generate_profile", "GenerateProfile"),
        "dataview_pipeline": ("mammoth_analytics.dataviewpipeline", "DataviewPipeline"),
        "dataview_pipeline_tasks": (
            "mammoth_analytics.dataviewpipelinetasks",
            "DataviewPipelineTasks",
        ),
        "dataview_pipeline_exports": (
            "mammoth_analytics.dataviewpipelineexports",
            "DataviewPipelineExports",
        ),
        "dataview_pipeline_export": (
            "mammoth_analytics.dataviewpipelineexport",
            "DataviewPipelineExport",
        ),
        "pipeline_items": ("mammoth_analytics.pipelineitems", "PipelineItems"),
        "jobs": ("mammoth_analytics.jobs", "Jobs"),
        "client_apps": ("mammoth_analytics.clientapps", "ClientApps"),
        "external_keys": ("mammoth_analytics.externalkeys", "ExternalKeys"),
        "external_key": ("mammoth_analytics.externalkey_sdk", "ExternalKeySDK"),
        "deauthorization": ("mammoth_analytics.deauthorization", "Deauthorization"),
        "shopify_privacy_webhooks": (
            "mammoth_analytics.shopifyprivacywebhooks",
            "ShopifyPrivacyWebhooks",
        ),
        "browse": ("mammoth_analytics.browse", "Browse"),
        "workspaces_support": (
            "mammoth_analytics.workspacessupport",
            "WorkspacesSupport",
        ),
        "users_support": ("mammoth_analytics.userssupport", "UsersSupport"),
        "subscriptions_support": (
            "mammoth_analytics.subscriptionssupport",
            "SubscriptionsSupport",
        ),
        "registration_support": (
            "mammoth_analytics.registrationsupport",
            "RegistrationSupport",
        ),
        "subscription": ("mammoth_analytics.subscription_sdk", "SubscriptionSDK"),
        "subscriptions": ("mammoth_analytics.subscriptions", "Subscriptions"),
        "subscription_plans": (
            "mammoth_analytics.subscriptionplans",
            "SubscriptionPlans",
        ),
        "self_serve_subscription_plans": (
            "mammoth_analytics.selfservesubscriptionplans",
            "SelfServeSubscriptionPlans",
        ),
        "connectors": ("mammoth_analytics.connectors", "Connectors"),
        "features": ("mammoth_analytics.features", "Features"),
        "connector_profiles": (
            "mammoth_analytics.connectorprofiles",
            "ConnectorProfiles",
        ),
        "feature_profiles": ("mammoth_analytics.featureprofiles", "FeatureProfiles"),
        "stripe_subscriptions": (
            "mammoth_analytics.stripesubscriptions",
            "StripeSubscriptions",
        ),
        "subscription_access_control": (
            "mammoth_analytics.subscriptionaccesscontrol",
            "SubscriptionAccessControl",
        ),
        "stripe_webhooks": ("mammoth_analytics.stripewebhooks", "StripeWebhooks"),
        "app_usage": ("mammoth_analytics.appusage", "AppUsage"),
        "accept_invite": ("mammoth_analytics.acceptinvite", "AcceptInvite"),
        "datasets": ("mammoth_analytics.datasets", "Datasets"),
        "batches": ("mammoth_analytics.batches", "Batches"),
        "workspaces": ("mammoth_analytics.workspaces_sdk", "WorkspacesSDK"),
        "self_": ("mammoth_analytics.self_", "Self"),
        "users": ("mammoth_analytics.users", "Users"),
        "schedules": ("mammoth_analytics.schedules", "Schedules"),
        "ds_config": ("mammoth_analytics.dsconfig_sdk", "DsConfigSDK"),
        "ds_configs": ("mammoth_analytics.dsconfigs", "DsConfigs"),
        "connections": ("mammoth_analytics.connections", "Connections"),
        "webhooks": ("mammoth_analytics.webhooks", "Webhooks"),
        "chargebee_plan": ("mammoth_analytics.chargebeeplan", "ChargebeePlan"),
        "files": ("mammoth_analytics.files", "Files"),
        "preferences": ("mammoth_analytics.preferences", "Preferences"),
        "folders": ("mammoth_analytics.folders", "Folders"),
        "automations": ("mammoth_analytics.automations", "Automations"),
        "query_gen": ("mammoth_analytics.querygen", "QueryGen"),
        "split_segments": ("mammoth_analytics.splitsegments", "SplitSegments"),
        "owner_user_control_settings": (
            "mammoth_analytics.ownerusercontrolsettings",
            "OwnerUserControlSettings",
        ),
        "conditional_format": (
            "mammoth_analytics.conditionalformat",
            "ConditionalFormat",
        ),
        "conditional_formats": (
            "mammoth_analytics.conditionalformats",
            "ConditionalFormats",
        ),
        "reports": ("mammoth_analytics.reports", "Reports"),
    }

    def __init__(
        self,
        server_url: str,
        security: Optional[
            Union[models.Security, Callable[[], models.Security]]
        ] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
            parent_ref=self,
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self.sdk_configuration = hooks.sdk_init(self.sdk_configuration)

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def dynamic_import(self, modname, retries=3):
        for attempt in range(retries):
            try:
                return importlib.import_module(modname)
            except KeyError:
                # Clear any half-initialized module and retry
                sys.modules.pop(modname, None)
                if attempt == retries - 1:
                    break
        raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = self.dynamic_import(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration, parent_ref=self)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
