"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ItemTaskItemType(str, Enum):
    TASK = "task"


class ItemTaskStatus(str, Enum):
    DELETED = "deleted"
    EXECUTED = "executed"
    EXECUTING = "executing"
    EDITED = "edited"
    ADDED = "added"
    SUSPENDED = "suspended"
    SUSPENDING = "suspending"


class ItemTaskReferenceErrorsTypedDict(TypedDict):
    pass


class ItemTaskReferenceErrors(BaseModel):
    pass


class ItemTaskTypedDict(TypedDict):
    item_type: NotRequired[Nullable[ItemTaskItemType]]
    id: NotRequired[Nullable[int]]
    dataview_id: NotRequired[Nullable[int]]
    sequence: NotRequired[Nullable[int]]
    status: NotRequired[Nullable[ItemTaskStatus]]
    reordered: NotRequired[Nullable[bool]]
    reference_errors: NotRequired[Nullable[ItemTaskReferenceErrorsTypedDict]]
    data_pass_through: NotRequired[Nullable[bool]]
    data_size: NotRequired[Nullable[int]]
    row_count: NotRequired[Nullable[int]]
    execution_start_time: NotRequired[Nullable[datetime]]
    execution_end_time: NotRequired[Nullable[datetime]]


class ItemTask(BaseModel):
    item_type: OptionalNullable[ItemTaskItemType] = ItemTaskItemType.TASK

    id: OptionalNullable[int] = UNSET

    dataview_id: OptionalNullable[int] = UNSET

    sequence: OptionalNullable[int] = UNSET

    status: OptionalNullable[ItemTaskStatus] = UNSET

    reordered: OptionalNullable[bool] = UNSET

    reference_errors: OptionalNullable[ItemTaskReferenceErrors] = UNSET

    data_pass_through: OptionalNullable[bool] = UNSET

    data_size: OptionalNullable[int] = UNSET

    row_count: OptionalNullable[int] = UNSET

    execution_start_time: OptionalNullable[datetime] = UNSET

    execution_end_time: OptionalNullable[datetime] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "item_type",
            "id",
            "dataview_id",
            "sequence",
            "status",
            "reordered",
            "reference_errors",
            "data_pass_through",
            "data_size",
            "row_count",
            "execution_start_time",
            "execution_end_time",
        ]
        nullable_fields = [
            "item_type",
            "id",
            "dataview_id",
            "sequence",
            "status",
            "reordered",
            "reference_errors",
            "data_pass_through",
            "data_size",
            "row_count",
            "execution_start_time",
            "execution_end_time",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
