"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class AddExternalKeySpecKeyType(str, Enum):
    r"""Type of the external key e.g. open_ai"""

    OPEN_AI = "open_ai"


class AddExternalKeySpecTypedDict(TypedDict):
    r"""External key specification"""

    key_type: AddExternalKeySpecKeyType
    r"""Type of the external key e.g. open_ai"""
    key_name: str
    r"""A name to be associated with the key"""
    secure_key: str
    r"""The key value which will be used in the intended service"""
    description: NotRequired[Nullable[str]]
    r"""Describe the purpose of the key and any added information related to it"""


class AddExternalKeySpec(BaseModel):
    r"""External key specification"""

    key_type: AddExternalKeySpecKeyType
    r"""Type of the external key e.g. open_ai"""

    key_name: str
    r"""A name to be associated with the key"""

    secure_key: str
    r"""The key value which will be used in the intended service"""

    description: OptionalNullable[str] = UNSET
    r"""Describe the purpose of the key and any added information related to it"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description"]
        nullable_fields = ["description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
