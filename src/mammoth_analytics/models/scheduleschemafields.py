"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .recurrenceschedulefields import (
    RecurrenceScheduleFields,
    RecurrenceScheduleFieldsTypedDict,
)
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, List
from typing_extensions import NotRequired, TypedDict


class ScheduleSchemaFieldsTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""id"""
    created_at: NotRequired[Nullable[datetime]]
    r"""created_at"""
    last_run: NotRequired[Nullable[datetime]]
    r"""last_run"""
    status: NotRequired[Nullable[str]]
    r"""status"""
    task_name: NotRequired[Nullable[str]]
    r"""task_name"""
    attached_resources: NotRequired[Nullable[List[Any]]]
    r"""attached_resources"""
    rrule: NotRequired[Nullable[RecurrenceScheduleFieldsTypedDict]]


class ScheduleSchemaFields(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""id"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""created_at"""

    last_run: OptionalNullable[datetime] = UNSET
    r"""last_run"""

    status: OptionalNullable[str] = UNSET
    r"""status"""

    task_name: OptionalNullable[str] = UNSET
    r"""task_name"""

    attached_resources: OptionalNullable[List[Any]] = UNSET
    r"""attached_resources"""

    rrule: OptionalNullable[RecurrenceScheduleFields] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "created_at",
            "last_run",
            "status",
            "task_name",
            "attached_resources",
            "rrule",
        ]
        nullable_fields = [
            "id",
            "created_at",
            "last_run",
            "status",
            "task_name",
            "attached_resources",
            "rrule",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
