"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, List
from typing_extensions import NotRequired, TypedDict


class SubscriptionTypedDict(TypedDict):
    pass


class Subscription(BaseModel):
    pass


class CurrentPlanTypedDict(TypedDict):
    pass


class CurrentPlan(BaseModel):
    pass


class SubscriptionsFieldSchemaTypedDict(TypedDict):
    subscription: NotRequired[Nullable[SubscriptionTypedDict]]
    r"""Current subscription details"""
    current_plan: NotRequired[Nullable[CurrentPlanTypedDict]]
    available_plans: NotRequired[Nullable[List[Any]]]
    r"""Available Plans of the subscription"""
    available_addons: NotRequired[Nullable[List[Any]]]
    r"""Available Addons of the subscription"""


class SubscriptionsFieldSchema(BaseModel):
    subscription: OptionalNullable[Subscription] = UNSET
    r"""Current subscription details"""

    current_plan: OptionalNullable[CurrentPlan] = UNSET

    available_plans: OptionalNullable[List[Any]] = UNSET
    r"""Available Plans of the subscription"""

    available_addons: OptionalNullable[List[Any]] = UNSET
    r"""Available Addons of the subscription"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "subscription",
            "current_plan",
            "available_plans",
            "available_addons",
        ]
        nullable_fields = [
            "subscription",
            "current_plan",
            "available_plans",
            "available_addons",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
