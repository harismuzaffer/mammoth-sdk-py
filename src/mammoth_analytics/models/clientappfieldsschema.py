"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ClientAppFieldsSchemaTypedDict(TypedDict):
    description: NotRequired[Nullable[str]]
    r"""Description of client app or api tokens"""
    workspace_id: NotRequired[Nullable[int]]
    r"""Workspace ID of client app or api tokens"""
    user_id: NotRequired[Nullable[int]]
    r"""User ID of client app or api tokens"""
    last_usage: NotRequired[Nullable[datetime]]
    r"""Last usage of client app or api tokens"""
    id: NotRequired[Nullable[int]]
    r"""ID of client app or api tokens"""
    app_name: NotRequired[Nullable[str]]
    r"""Name of client app or api tokens"""
    app_key: NotRequired[Nullable[str]]
    r"""App key of client app or api tokens"""


class ClientAppFieldsSchema(BaseModel):
    description: OptionalNullable[str] = UNSET
    r"""Description of client app or api tokens"""

    workspace_id: OptionalNullable[int] = UNSET
    r"""Workspace ID of client app or api tokens"""

    user_id: OptionalNullable[int] = UNSET
    r"""User ID of client app or api tokens"""

    last_usage: OptionalNullable[datetime] = UNSET
    r"""Last usage of client app or api tokens"""

    id: OptionalNullable[int] = UNSET
    r"""ID of client app or api tokens"""

    app_name: OptionalNullable[str] = UNSET
    r"""Name of client app or api tokens"""

    app_key: OptionalNullable[str] = UNSET
    r"""App key of client app or api tokens"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "workspace_id",
            "user_id",
            "last_usage",
            "id",
            "app_name",
            "app_key",
        ]
        nullable_fields = [
            "description",
            "workspace_id",
            "user_id",
            "last_usage",
            "id",
            "app_name",
            "app_key",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
