"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .unifiedpromptspec import UnifiedPromptSpec, UnifiedPromptSpecTypedDict
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AiSuggestionsRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    unified_prompt_spec: UnifiedPromptSpecTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: NotRequired[int]
    r"""Dataview ID of the dataset"""


class AiSuggestionsRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Id of the dataset"""

    unified_prompt_spec: Annotated[
        UnifiedPromptSpec,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 4
    r"""Dataview ID of the dataset"""


AiSuggestionsExtra2TypedDict = TypeAliasType(
    "AiSuggestionsExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


AiSuggestionsExtra2 = TypeAliasType(
    "AiSuggestionsExtra2", Union[Dict[str, Any], List[Any]]
)


AiSuggestionsExtra1TypedDict = TypeAliasType(
    "AiSuggestionsExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


AiSuggestionsExtra1 = TypeAliasType(
    "AiSuggestionsExtra1", Union[Dict[str, Any], List[Any]]
)


class AiSuggestionsResponseBody1TypedDict(TypedDict):
    r"""Regex and example generated successfully"""


class AiSuggestionsResponseBody1(BaseModel):
    r"""Regex and example generated successfully"""


class AiSuggestionsResponseBody2TypedDict(TypedDict):
    r"""The request was processed successfully, but a valid regex pattern could not be generated"""


class AiSuggestionsResponseBody2(BaseModel):
    r"""The request was processed successfully, but a valid regex pattern could not be generated"""


AiSuggestionsResponseTypedDict = TypeAliasType(
    "AiSuggestionsResponseTypedDict",
    Union[AiSuggestionsResponseBody1TypedDict, AiSuggestionsResponseBody2TypedDict],
)


AiSuggestionsResponse = TypeAliasType(
    "AiSuggestionsResponse",
    Union[AiSuggestionsResponseBody1, AiSuggestionsResponseBody2],
)
