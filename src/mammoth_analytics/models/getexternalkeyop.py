"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetExternalKeyRequestTypedDict(TypedDict):
    key_id: int
    r"""Id of an external key"""
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    fields: NotRequired[str]
    r"""Fields to be returned in a comma-separated format. Check full mode for all fields."""
    validate_: NotRequired[Nullable[bool]]
    r"""When True, Validates the key"""


class GetExternalKeyRequest(BaseModel):
    key_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of an external key"""

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "__standard"
    r"""Fields to be returned in a comma-separated format. Check full mode for all fields."""

    validate_: Annotated[
        OptionalNullable[bool],
        pydantic.Field(alias="validate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""When True, Validates the key"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["fields", "validate"]
        nullable_fields = ["validate"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


GetExternalKeyNotFoundExtraTypedDict = TypeAliasType(
    "GetExternalKeyNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


GetExternalKeyNotFoundExtra = TypeAliasType(
    "GetExternalKeyNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


GetExternalKeyBadRequestExtra2TypedDict = TypeAliasType(
    "GetExternalKeyBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


GetExternalKeyBadRequestExtra2 = TypeAliasType(
    "GetExternalKeyBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


GetExternalKeyBadRequestExtra1TypedDict = TypeAliasType(
    "GetExternalKeyBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


GetExternalKeyBadRequestExtra1 = TypeAliasType(
    "GetExternalKeyBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)
