"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ItemExportInfoHandlerType(str, Enum):
    POSTGRES = "postgres"
    CSV_FILE = "csv_file"
    S3 = "s3"
    MYSQL = "mysql"
    MSSQL = "mssql"
    FTP = "ftp"
    SFTP = "sftp"
    EMAIL = "email"
    ELASTICSEARCH = "elasticsearch"
    POWERBI = "powerbi"
    REDSHIFT = "redshift"
    BIGQUERY = "bigquery"
    INTERNAL_DATASET = "internal_dataset"
    PUBLISHDB = "publishdb"


class ItemExportInfoTriggerType(str, Enum):
    NONE = "none"
    PIPELINE = "pipeline"
    SCHEDULE = "schedule"


class ItemExportInfoStatus(str, Enum):
    DELETED = "deleted"
    EXECUTED = "executed"
    EXECUTING = "executing"
    EDITED = "edited"
    ADDED = "added"
    SUSPENDED = "suspended"
    SUSPENDING = "suspending"


class ItemExportInfoTargetPropertiesTypedDict(TypedDict):
    pass


class ItemExportInfoTargetProperties(BaseModel):
    pass


class ItemExportInfoAdditionalPropertiesTypedDict(TypedDict):
    pass


class ItemExportInfoAdditionalProperties(BaseModel):
    pass


class ItemExportInfoConditionTypedDict(TypedDict):
    pass


class ItemExportInfoCondition(BaseModel):
    pass


class ItemExportInfoLastRunResultTypedDict(TypedDict):
    pass


class ItemExportInfoLastRunResult(BaseModel):
    pass


class ItemExportInfoErrorInfoTypedDict(TypedDict):
    pass


class ItemExportInfoErrorInfo(BaseModel):
    pass


class ItemExportInfoTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    dataview_id: NotRequired[Nullable[int]]
    sequence: NotRequired[Nullable[int]]
    sub_sequence: NotRequired[Nullable[int]]
    handler_type: NotRequired[Nullable[ItemExportInfoHandlerType]]
    trigger_type: NotRequired[Nullable[ItemExportInfoTriggerType]]
    end_of_pipeline: NotRequired[Nullable[bool]]
    status: NotRequired[Nullable[ItemExportInfoStatus]]
    target_properties: NotRequired[Nullable[ItemExportInfoTargetPropertiesTypedDict]]
    runnable: NotRequired[Nullable[bool]]
    reordered: NotRequired[Nullable[bool]]
    data_pass_through: NotRequired[Nullable[bool]]
    additional_properties: NotRequired[
        Nullable[ItemExportInfoAdditionalPropertiesTypedDict]
    ]
    condition: NotRequired[Nullable[ItemExportInfoConditionTypedDict]]
    last_modified_time: NotRequired[Nullable[datetime]]
    execution_start_time: NotRequired[Nullable[datetime]]
    execution_end_time: NotRequired[Nullable[datetime]]
    last_run_result: NotRequired[Nullable[ItemExportInfoLastRunResultTypedDict]]
    error_info: NotRequired[Nullable[ItemExportInfoErrorInfoTypedDict]]


class ItemExportInfo(BaseModel):
    id: OptionalNullable[int] = UNSET

    dataview_id: OptionalNullable[int] = UNSET

    sequence: OptionalNullable[int] = UNSET

    sub_sequence: OptionalNullable[int] = UNSET

    handler_type: OptionalNullable[ItemExportInfoHandlerType] = UNSET

    trigger_type: OptionalNullable[ItemExportInfoTriggerType] = UNSET

    end_of_pipeline: OptionalNullable[bool] = UNSET

    status: OptionalNullable[ItemExportInfoStatus] = UNSET

    target_properties: OptionalNullable[ItemExportInfoTargetProperties] = UNSET

    runnable: OptionalNullable[bool] = UNSET

    reordered: OptionalNullable[bool] = UNSET

    data_pass_through: OptionalNullable[bool] = UNSET

    additional_properties: OptionalNullable[ItemExportInfoAdditionalProperties] = UNSET

    condition: OptionalNullable[ItemExportInfoCondition] = UNSET

    last_modified_time: OptionalNullable[datetime] = UNSET

    execution_start_time: OptionalNullable[datetime] = UNSET

    execution_end_time: OptionalNullable[datetime] = UNSET

    last_run_result: OptionalNullable[ItemExportInfoLastRunResult] = UNSET

    error_info: OptionalNullable[ItemExportInfoErrorInfo] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "dataview_id",
            "sequence",
            "sub_sequence",
            "handler_type",
            "trigger_type",
            "end_of_pipeline",
            "status",
            "target_properties",
            "runnable",
            "reordered",
            "data_pass_through",
            "additional_properties",
            "condition",
            "last_modified_time",
            "execution_start_time",
            "execution_end_time",
            "last_run_result",
            "error_info",
        ]
        nullable_fields = [
            "id",
            "dataview_id",
            "sequence",
            "sub_sequence",
            "handler_type",
            "trigger_type",
            "end_of_pipeline",
            "status",
            "target_properties",
            "runnable",
            "reordered",
            "data_pass_through",
            "additional_properties",
            "condition",
            "last_modified_time",
            "execution_start_time",
            "execution_end_time",
            "last_run_result",
            "error_info",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
