"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .datecolumnformat import DateColumnFormat, DateColumnFormatTypedDict
from .numcolumnformat import NumColumnFormat, NumColumnFormatTypedDict
from .postgresdatecolumnformat import (
    PostgresDateColumnFormat,
    PostgresDateColumnFormatTypedDict,
)
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


FormatTypedDict = TypeAliasType(
    "FormatTypedDict",
    Union[
        PostgresDateColumnFormatTypedDict,
        DateColumnFormatTypedDict,
        NumColumnFormatTypedDict,
    ],
)


Format = TypeAliasType(
    "Format", Union[PostgresDateColumnFormat, DateColumnFormat, NumColumnFormat]
)


class DisplayInfoTypedDict(TypedDict):
    format_: NotRequired[Nullable[Dict[str, Nullable[FormatTypedDict]]]]
    r"""Column Formats"""
    sort: NotRequired[Nullable[List[List[str]]]]
    r"""Column Sort"""


class DisplayInfo(BaseModel):
    format_: Annotated[
        OptionalNullable[Dict[str, Nullable[Format]]], pydantic.Field(alias="format")
    ] = UNSET
    r"""Column Formats"""

    sort: OptionalNullable[List[List[str]]] = UNSET
    r"""Column Sort"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["format", "sort"]
        nullable_fields = ["format", "sort"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
