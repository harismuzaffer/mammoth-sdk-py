"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class RefreshAction(str, Enum):
    r"""on refresh action"""

    REPLACE = "replace"
    COMBINE = "combine"


class SequenceColumn(str, Enum):
    r"""Unique sequence column"""

    NUMERIC = "numeric"
    DATE = "date"


class CloudDsConfigSchemaTypedDict(TypedDict):
    query: str
    r"""Query to fetch data from cloud"""
    on_refresh_action: RefreshAction
    r"""on refresh action"""
    config_key: str
    r"""Config key of the source"""
    ds_name: str
    r"""Name of the dataset"""
    table: str
    r"""Selected table name"""
    data_start_date: datetime
    r"""Start date of the data"""
    profile: NotRequired[Nullable[str]]
    r"""Profile"""
    unique_sequence_column: NotRequired[Nullable[SequenceColumn]]
    r"""Unique sequence column"""


class CloudDsConfigSchema(BaseModel):
    query: str
    r"""Query to fetch data from cloud"""

    on_refresh_action: RefreshAction
    r"""on refresh action"""

    config_key: str
    r"""Config key of the source"""

    ds_name: str
    r"""Name of the dataset"""

    table: str
    r"""Selected table name"""

    data_start_date: datetime
    r"""Start date of the data"""

    profile: OptionalNullable[str] = UNSET
    r"""Profile"""

    unique_sequence_column: OptionalNullable[SequenceColumn] = UNSET
    r"""Unique sequence column"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["profile", "unique_sequence_column"]
        nullable_fields = ["profile", "unique_sequence_column"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
