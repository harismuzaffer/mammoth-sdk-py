"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetUsersInWorkspaceRequestTypedDict(TypedDict):
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    fields: NotRequired[str]
    r"""Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."""
    sort: NotRequired[str]
    r"""Sort users by id, first_name or email"""
    first_name: NotRequired[str]
    r"""Fetch all users which matches given name (case sensitive)"""
    last_name: NotRequired[str]
    r"""Fetch all users which matches given name (case sensitive)"""
    email: NotRequired[str]
    r"""Fetch user which matches given email"""
    ids: NotRequired[str]
    r"""Filter users by ids, provided as comma separated integer values"""
    offset: NotRequired[int]
    r"""Offset from the beginning of the users list"""
    limit: NotRequired[int]
    r"""Max number of users to return"""
    invited: NotRequired[bool]
    r"""Include invited users"""
    project_id: NotRequired[Nullable[int]]
    r"""Project ID of the workspace"""


class GetUsersInWorkspaceRequest(BaseModel):
    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link"
    r"""Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."""

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "(email:asc)"
    r"""Sort users by id, first_name or email"""

    first_name: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Fetch all users which matches given name (case sensitive)"""

    last_name: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Fetch all users which matches given name (case sensitive)"""

    email: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Fetch user which matches given email"""

    ids: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Filter users by ids, provided as comma separated integer values"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Offset from the beginning of the users list"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Max number of users to return"""

    invited: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Include invited users"""

    project_id: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Project ID of the workspace"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "fields",
            "sort",
            "first_name",
            "last_name",
            "email",
            "ids",
            "offset",
            "limit",
            "invited",
            "project_id",
        ]
        nullable_fields = ["project_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
