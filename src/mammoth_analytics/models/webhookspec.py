"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class WebhookSpecMode(str, Enum):
    r"""Mode of the webhook"""

    REPLACE = "replace"
    COMBINE = "combine"


class WebhookSpecTypedDict(TypedDict):
    r"""create webhook"""

    folder_resource_id: NotRequired[Nullable[str]]
    r"""Folder resource id"""
    name: NotRequired[str]
    r"""Name of the webhook"""
    mode: NotRequired[WebhookSpecMode]
    r"""Mode of the webhook"""
    origins: NotRequired[str]
    r"""Origins"""
    is_secure: NotRequired[bool]
    r"""Is secure"""


class WebhookSpec(BaseModel):
    r"""create webhook"""

    folder_resource_id: OptionalNullable[str] = UNSET
    r"""Folder resource id"""

    name: Optional[str] = "Generic Webhook"
    r"""Name of the webhook"""

    mode: Optional[WebhookSpecMode] = WebhookSpecMode.REPLACE
    r"""Mode of the webhook"""

    origins: Optional[str] = "*"
    r"""Origins"""

    is_secure: Optional[bool] = False
    r"""Is secure"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["folder_resource_id", "name", "mode", "origins", "is_secure"]
        nullable_fields = ["folder_resource_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
