"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class TypeOfModificationDoneInThePipeline(str, Enum):
    SOURCE_DATA_CHANGE = "source_data_change"
    ADD_RULE = "add_rule"
    ADD_ACTION = "add_action"
    EDIT_RULE = "edit_rule"
    EDIT_ACTION = "edit_action"
    DISCARD_RULE = "discard_rule"
    SUSPEND_RULE = "suspend_rule"
    REORDER_PIPELINE = "reorder_pipeline"
    RESET_DATAVIEW = "reset_dataview"
    RESET_PIPELINE = "reset_pipeline"
    DISCARD_PIPELINE_CHANGES = "discard_pipeline_changes"
    DRAFT_PIPELINE_SUBMISSION = "draft_pipeline_submission"
    EDIT_DERIVATIVE = "edit_derivative"
    DEPENDENCY_UPDATE = "dependency_update"
    MANUAL_RUN = "manual_run"
    RUN_PENDING_UPDATES = "run_pending_updates"
    TRIGGER_PENDING_CHAINED_UPDATES = "trigger_pending_chained_updates"


class PipelineModificationStatus(str, Enum):
    PROCESSING = "processing"
    DONE = "done"
    ERROR = "error"


class PipelineModificationRespErrorInfoTypedDict(TypedDict):
    pass


class PipelineModificationRespErrorInfo(BaseModel):
    pass


class ParamTypedDict(TypedDict):
    pass


class Param(BaseModel):
    pass


class PipelineModificationRespTypedDict(TypedDict):
    type_of_modification: TypeOfModificationDoneInThePipeline
    status: PipelineModificationStatus
    has_error: NotRequired[Nullable[bool]]
    error_code: NotRequired[Nullable[int]]
    error_info: NotRequired[Nullable[PipelineModificationRespErrorInfoTypedDict]]
    future_id: NotRequired[Nullable[int]]
    param: NotRequired[Nullable[ParamTypedDict]]


class PipelineModificationResp(BaseModel):
    type_of_modification: TypeOfModificationDoneInThePipeline

    status: PipelineModificationStatus

    has_error: OptionalNullable[bool] = UNSET

    error_code: OptionalNullable[int] = UNSET

    error_info: OptionalNullable[PipelineModificationRespErrorInfo] = UNSET

    future_id: OptionalNullable[int] = UNSET

    param: OptionalNullable[Param] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "has_error",
            "error_code",
            "error_info",
            "future_id",
            "param",
        ]
        nullable_fields = [
            "has_error",
            "error_code",
            "error_info",
            "future_id",
            "param",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
