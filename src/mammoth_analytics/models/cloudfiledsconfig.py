"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CloudFileDsConfigOnRefreshAction(str, Enum):
    r"""On refresh action"""

    REPLACE = "replace"
    COMBINE = "combine"


class CloudFileDsConfigTypedDict(TypedDict):
    ds_name: str
    r"""Datasource name"""
    file_path: str
    r"""File path"""
    data_pull_file: str
    r"""Data pull file"""
    on_refresh_action: CloudFileDsConfigOnRefreshAction
    r"""On refresh action"""
    config_key: str
    r"""Config key of the source"""
    name_pattern: NotRequired[Nullable[str]]
    r"""Name pattern"""
    folder_path: NotRequired[Nullable[str]]
    r"""Folder path"""
    last_pulled_file: NotRequired[Nullable[str]]
    r"""Last pulled file"""


class CloudFileDsConfig(BaseModel):
    ds_name: str
    r"""Datasource name"""

    file_path: str
    r"""File path"""

    data_pull_file: str
    r"""Data pull file"""

    on_refresh_action: CloudFileDsConfigOnRefreshAction
    r"""On refresh action"""

    config_key: str
    r"""Config key of the source"""

    name_pattern: OptionalNullable[str] = UNSET
    r"""Name pattern"""

    folder_path: OptionalNullable[str] = UNSET
    r"""Folder path"""

    last_pulled_file: OptionalNullable[str] = UNSET
    r"""Last pulled file"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name_pattern", "folder_path", "last_pulled_file"]
        nullable_fields = ["name_pattern", "folder_path", "last_pulled_file"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
