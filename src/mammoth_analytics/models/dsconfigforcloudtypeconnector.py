"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class DataPullFile(str, Enum):
    r"""Data Pull File"""

    PULL_SAME_FILE = "Pull same file"
    PULL_NEXT_FILE_BASED_ON_NAME_PATTERN = "Pull next file based on name pattern"


class DsConfigForCloudTypeConnectorTypedDict(TypedDict):
    r"""Query Properties"""

    ds_name: NotRequired[Nullable[str]]
    r"""Dataset's Name"""
    data_start_date: NotRequired[Nullable[datetime]]
    r"""Data Start Date"""
    table_name: NotRequired[Nullable[str]]
    r"""Table Name"""
    query: NotRequired[Nullable[str]]
    r"""Query for the dataset"""
    profile: NotRequired[Nullable[str]]
    r"""Schema/Profile for the selected identity"""
    file_url: NotRequired[Nullable[str]]
    r"""File URL"""
    sheet_name: NotRequired[Nullable[str]]
    r"""Google Sheet Name"""
    column_types_as_text: NotRequired[bool]
    r"""Column Types as Text"""
    file_path: NotRequired[Nullable[str]]
    r"""File Path"""
    data_pull_file: NotRequired[Nullable[DataPullFile]]
    r"""Data Pull File"""
    folder_path: NotRequired[Nullable[str]]
    r"""Folder Path"""
    name_pattern: NotRequired[Nullable[str]]
    r"""Name Pattern"""


class DsConfigForCloudTypeConnector(BaseModel):
    r"""Query Properties"""

    ds_name: OptionalNullable[str] = UNSET
    r"""Dataset's Name"""

    data_start_date: OptionalNullable[datetime] = UNSET
    r"""Data Start Date"""

    table_name: OptionalNullable[str] = UNSET
    r"""Table Name"""

    query: OptionalNullable[str] = UNSET
    r"""Query for the dataset"""

    profile: OptionalNullable[str] = UNSET
    r"""Schema/Profile for the selected identity"""

    file_url: OptionalNullable[str] = UNSET
    r"""File URL"""

    sheet_name: OptionalNullable[str] = UNSET
    r"""Google Sheet Name"""

    column_types_as_text: Optional[bool] = False
    r"""Column Types as Text"""

    file_path: OptionalNullable[str] = UNSET
    r"""File Path"""

    data_pull_file: OptionalNullable[DataPullFile] = UNSET
    r"""Data Pull File"""

    folder_path: OptionalNullable[str] = UNSET
    r"""Folder Path"""

    name_pattern: OptionalNullable[str] = UNSET
    r"""Name Pattern"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "ds_name",
            "data_start_date",
            "table_name",
            "query",
            "profile",
            "file_url",
            "sheet_name",
            "column_types_as_text",
            "file_path",
            "data_pull_file",
            "folder_path",
            "name_pattern",
        ]
        nullable_fields = [
            "ds_name",
            "data_start_date",
            "table_name",
            "query",
            "profile",
            "file_url",
            "sheet_name",
            "file_path",
            "data_pull_file",
            "folder_path",
            "name_pattern",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
