"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class TransferOwnershipRole(str, Enum):
    r"""New role name"""

    WORKSPACE_MEMBER = "workspace_member"
    WORKSPACE_ADMIN = "workspace_admin"
    WORKSPACE_OWNER = "workspace_owner"
    WORKSPACE_GUEST = "workspace_guest"


class TransferOwnershipRemoveRole(str, Enum):
    r"""Remove role name"""

    WORKSPACE_MEMBER = "workspace_member"
    WORKSPACE_ADMIN = "workspace_admin"
    WORKSPACE_OWNER = "workspace_owner"
    WORKSPACE_GUEST = "workspace_guest"


class TransferOwnershipTypedDict(TypedDict):
    r"""Transfer ownership details"""

    workspace_id: int
    r"""Workspace id"""
    user_id: int
    r"""User id"""
    new_role: NotRequired[TransferOwnershipRole]
    r"""New role name"""
    remove_role: NotRequired[Nullable[TransferOwnershipRemoveRole]]
    r"""Remove role name"""


class TransferOwnership(BaseModel):
    r"""Transfer ownership details"""

    workspace_id: int
    r"""Workspace id"""

    user_id: int
    r"""User id"""

    new_role: Optional[TransferOwnershipRole] = TransferOwnershipRole.WORKSPACE_OWNER
    r"""New role name"""

    remove_role: OptionalNullable[TransferOwnershipRemoveRole] = UNSET
    r"""Remove role name"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["new_role", "remove_role"]
        nullable_fields = ["remove_role"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
