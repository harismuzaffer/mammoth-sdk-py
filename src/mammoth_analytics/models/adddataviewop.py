"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createdataview import CreateDataview, CreateDataviewTypedDict
from .jobresponse import JobResponse, JobResponseTypedDict
from mammoth_analytics.types import BaseModel, Nullable, UNSET_SENTINEL
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AddDataviewRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    create_dataview: Nullable[CreateDataviewTypedDict]
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: NotRequired[int]
    r"""Dataview ID of the dataset"""


class AddDataviewRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    create_dataview: Annotated[
        Nullable[CreateDataview],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 4
    r"""Dataview ID of the dataset"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["dataview_id"]
        nullable_fields = ["CreateDataview"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


AddDataviewNotFoundExtraTypedDict = TypeAliasType(
    "AddDataviewNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


AddDataviewNotFoundExtra = TypeAliasType(
    "AddDataviewNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


AddDataviewUnauthorizedExtraTypedDict = TypeAliasType(
    "AddDataviewUnauthorizedExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


AddDataviewUnauthorizedExtra = TypeAliasType(
    "AddDataviewUnauthorizedExtra", Union[Dict[str, Any], List[Any]]
)


AddDataviewBadRequestExtra2TypedDict = TypeAliasType(
    "AddDataviewBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


AddDataviewBadRequestExtra2 = TypeAliasType(
    "AddDataviewBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


AddDataviewBadRequestExtra1TypedDict = TypeAliasType(
    "AddDataviewBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


AddDataviewBadRequestExtra1 = TypeAliasType(
    "AddDataviewBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)


AddDataviewResponseTypedDict = TypeAliasType(
    "AddDataviewResponseTypedDict", Union[JobResponseTypedDict, CreateDataviewTypedDict]
)


AddDataviewResponse = TypeAliasType(
    "AddDataviewResponse", Union[JobResponse, CreateDataview]
)
