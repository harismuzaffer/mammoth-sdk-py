"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class ReportSchemaTypedDict(TypedDict):
    owner_workspace_id: int
    r"""ID of the workspace that owns the report"""
    shared_lock_counter: int
    r"""Counter for shared locks on the report"""
    exclusive_lock_flag: bool
    r"""Flag indicating if the report is exclusively locked"""
    resource_id: int
    r"""Unique identifier for the report resource"""
    ordering: int
    r"""Ordering index for the report"""
    resource_type: str
    r"""Type of the resource, e.g., 'report'"""
    owner_user_id: int
    r"""ID of the user who owns the report"""
    id: int
    r"""Unique identifier for the report"""
    name: str
    r"""Name of the report"""
    sync_type: str
    r"""Synchronization type of the report, e.g., 'MANUAL'"""
    status: str
    r"""Current status of the report, e.g., 'ready'"""
    published_status: bool
    r"""Indicates if the report is published"""
    users_emails: List[str]
    r"""List of emails associated with users who can access this report"""
    last_updated_at: str
    r"""Timestamp of the last update to the report"""
    created_at: str
    r"""Timestamp when the report was created"""
    last_synced_at: str
    r"""Timestamp of the last synchronization of the report"""
    resource_name: NotRequired[Nullable[str]]
    r"""Name of the resource"""
    parent_id: NotRequired[Nullable[int]]
    r"""ID of the parent resource, if applicable"""
    owner_group_id: NotRequired[Nullable[int]]
    r"""ID of the group that owns the report, if applicable"""
    message: NotRequired[Nullable[str]]
    r"""Message to be sent when a report is shared with other users"""
    owner_profile_link: NotRequired[Nullable[str]]
    r"""Link to the profile of the user who created the report"""
    owner_name: NotRequired[str]
    r"""Name of the user who created the report"""


class ReportSchema(BaseModel):
    owner_workspace_id: int
    r"""ID of the workspace that owns the report"""

    shared_lock_counter: int
    r"""Counter for shared locks on the report"""

    exclusive_lock_flag: bool
    r"""Flag indicating if the report is exclusively locked"""

    resource_id: int
    r"""Unique identifier for the report resource"""

    ordering: int
    r"""Ordering index for the report"""

    resource_type: str
    r"""Type of the resource, e.g., 'report'"""

    owner_user_id: int
    r"""ID of the user who owns the report"""

    id: int
    r"""Unique identifier for the report"""

    name: str
    r"""Name of the report"""

    sync_type: str
    r"""Synchronization type of the report, e.g., 'MANUAL'"""

    status: str
    r"""Current status of the report, e.g., 'ready'"""

    published_status: bool
    r"""Indicates if the report is published"""

    users_emails: List[str]
    r"""List of emails associated with users who can access this report"""

    last_updated_at: str
    r"""Timestamp of the last update to the report"""

    created_at: str
    r"""Timestamp when the report was created"""

    last_synced_at: str
    r"""Timestamp of the last synchronization of the report"""

    resource_name: OptionalNullable[str] = UNSET
    r"""Name of the resource"""

    parent_id: OptionalNullable[int] = UNSET
    r"""ID of the parent resource, if applicable"""

    owner_group_id: OptionalNullable[int] = UNSET
    r"""ID of the group that owns the report, if applicable"""

    message: OptionalNullable[str] = UNSET
    r"""Message to be sent when a report is shared with other users"""

    owner_profile_link: OptionalNullable[str] = ""
    r"""Link to the profile of the user who created the report"""

    owner_name: Optional[str] = ""
    r"""Name of the user who created the report"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "resource_name",
            "parent_id",
            "owner_group_id",
            "message",
            "owner_profile_link",
            "owner_name",
        ]
        nullable_fields = [
            "resource_name",
            "parent_id",
            "owner_group_id",
            "message",
            "owner_profile_link",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
