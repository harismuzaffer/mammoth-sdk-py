"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class WorkspacePatchOpPath(str, Enum):
    r"""Path"""

    NAME = "name"
    METADATA = "metadata"
    PLAN_ID = "plan_id"
    BILLING_CYCLE = "billing_cycle"


class WorkspacePatchOpValueTypedDict(TypedDict):
    pass


class WorkspacePatchOpValue(BaseModel):
    pass


WorkspacePatchOpValueUnionTypedDict = TypeAliasType(
    "WorkspacePatchOpValueUnionTypedDict",
    Union[WorkspacePatchOpValueTypedDict, str, int],
)
r"""New Workspace name, metadata, plan_id, or billing_cycle"""


WorkspacePatchOpValueUnion = TypeAliasType(
    "WorkspacePatchOpValueUnion", Union[WorkspacePatchOpValue, str, int]
)
r"""New Workspace name, metadata, plan_id, or billing_cycle"""


class WorkspacePatchOpTypedDict(TypedDict):
    path: WorkspacePatchOpPath
    r"""Path"""
    value: WorkspacePatchOpValueUnionTypedDict
    r"""New Workspace name, metadata, plan_id, or billing_cycle"""
    op: Literal["replace"]
    r"""Operation"""


class WorkspacePatchOp(BaseModel):
    path: WorkspacePatchOpPath
    r"""Path"""

    value: WorkspacePatchOpValueUnion
    r"""New Workspace name, metadata, plan_id, or billing_cycle"""

    OP: Annotated[
        Annotated[Literal["replace"], AfterValidator(validate_const("replace"))],
        pydantic.Field(alias="op"),
    ] = "replace"
    r"""Operation"""
