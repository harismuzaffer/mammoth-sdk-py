"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class NumColumnFormatTypedDict(TypedDict):
    is_percentage: bool
    r"""Is Percentage"""
    scientific: bool
    r"""Scientific"""
    numtype: NotRequired[Nullable[str]]
    r"""Numeric column Type"""
    currency_symbol: NotRequired[Nullable[str]]
    r"""Currency Symbol"""
    decimal_spec: NotRequired[Nullable[int]]
    r"""Decimal Spec"""
    numeric_precision: NotRequired[Nullable[int]]
    r"""Numeric Precision"""


class NumColumnFormat(BaseModel):
    is_percentage: bool
    r"""Is Percentage"""

    scientific: bool
    r"""Scientific"""

    numtype: OptionalNullable[str] = UNSET
    r"""Numeric column Type"""

    currency_symbol: OptionalNullable[str] = UNSET
    r"""Currency Symbol"""

    decimal_spec: OptionalNullable[int] = UNSET
    r"""Decimal Spec"""

    numeric_precision: OptionalNullable[int] = UNSET
    r"""Numeric Precision"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "numtype",
            "currency_symbol",
            "decimal_spec",
            "numeric_precision",
        ]
        nullable_fields = [
            "numtype",
            "currency_symbol",
            "decimal_spec",
            "numeric_precision",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
