"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List
from typing_extensions import Annotated, NotRequired, TypedDict


class FormatInfoTypedDict(TypedDict):
    pass


class FormatInfo(BaseModel):
    pass


class DisplayPropertiesResponseTypedDict(TypedDict):
    r"""Display Properties"""

    sort: List[Any]
    r"""Sort is a list of tuples. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"""
    format_info: NotRequired[Nullable[Dict[str, FormatInfoTypedDict]]]
    r"""Format Info"""
    column_widths: NotRequired[Nullable[Dict[str, int]]]
    r"""Column Widths for each column"""
    hidden_columns: NotRequired[Nullable[List[str]]]
    r"""List of Hidden Columns"""
    column_names: NotRequired[Nullable[Dict[str, str]]]
    r"""Column Names to be displayed"""
    column_order: NotRequired[Nullable[Dict[str, str]]]
    r"""Column Order"""
    revert_column_names: NotRequired[Nullable[List[str]]]
    r"""Remove rename property from given column names"""
    explore_panel: NotRequired[Nullable[Dict[str, Any]]]
    r"""Explore Panel"""


class DisplayPropertiesResponse(BaseModel):
    r"""Display Properties"""

    sort: Annotated[List[Any], pydantic.Field(alias="SORT")]
    r"""Sort is a list of tuples. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"""

    format_info: Annotated[
        OptionalNullable[Dict[str, FormatInfo]], pydantic.Field(alias="FORMAT_INFO")
    ] = UNSET
    r"""Format Info"""

    column_widths: Annotated[
        OptionalNullable[Dict[str, int]], pydantic.Field(alias="COLUMN_WIDTHS")
    ] = UNSET
    r"""Column Widths for each column"""

    hidden_columns: Annotated[
        OptionalNullable[List[str]], pydantic.Field(alias="HIDDEN_COLUMNS")
    ] = UNSET
    r"""List of Hidden Columns"""

    column_names: Annotated[
        OptionalNullable[Dict[str, str]], pydantic.Field(alias="COLUMN_NAMES")
    ] = UNSET
    r"""Column Names to be displayed"""

    column_order: Annotated[
        OptionalNullable[Dict[str, str]], pydantic.Field(alias="COLUMN_ORDER")
    ] = UNSET
    r"""Column Order"""

    revert_column_names: Annotated[
        OptionalNullable[List[str]], pydantic.Field(alias="REVERT_COLUMN_NAMES")
    ] = UNSET
    r"""Remove rename property from given column names"""

    explore_panel: Annotated[
        OptionalNullable[Dict[str, Any]], pydantic.Field(alias="EXPLORE_PANEL")
    ] = UNSET
    r"""Explore Panel"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "FORMAT_INFO",
            "COLUMN_WIDTHS",
            "HIDDEN_COLUMNS",
            "COLUMN_NAMES",
            "COLUMN_ORDER",
            "REVERT_COLUMN_NAMES",
            "EXPLORE_PANEL",
        ]
        nullable_fields = [
            "FORMAT_INFO",
            "COLUMN_WIDTHS",
            "HIDDEN_COLUMNS",
            "COLUMN_NAMES",
            "COLUMN_ORDER",
            "REVERT_COLUMN_NAMES",
            "EXPLORE_PANEL",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
