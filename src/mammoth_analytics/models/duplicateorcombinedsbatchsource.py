"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class DuplicateOrCombineDsBatchSourceTypedDict(TypedDict):
    resource_path: NotRequired[Nullable[str]]
    r"""Resource Path"""
    type: NotRequired[Nullable[str]]
    r"""Type of the source"""
    dataset_id: NotRequired[Nullable[int]]
    r"""Dataset ID"""
    dataset_name: NotRequired[Nullable[str]]
    r"""Dataset Name"""


class DuplicateOrCombineDsBatchSource(BaseModel):
    resource_path: OptionalNullable[str] = UNSET
    r"""Resource Path"""

    type: OptionalNullable[str] = UNSET
    r"""Type of the source"""

    dataset_id: OptionalNullable[int] = UNSET
    r"""Dataset ID"""

    dataset_name: OptionalNullable[str] = UNSET
    r"""Dataset Name"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["resource_path", "type", "dataset_id", "dataset_name"]
        nullable_fields = ["resource_path", "type", "dataset_id", "dataset_name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
