"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addconditionparams import AddConditionParams, AddConditionParamsTypedDict
from .custompromptparams import CustomPromptParams, CustomPromptParamsTypedDict
from enum import Enum
from mammoth_analytics.types import BaseModel
from typing import Union
from typing_extensions import TypeAliasType, TypedDict


class SuggestionType(str, Enum):
    r"""Type of operation (extraction or conditional filtering)"""

    EXTRACT_TEXT = "extract_text"
    ADD_CONDITION = "add_condition"


ParamsTypedDict = TypeAliasType(
    "ParamsTypedDict", Union[AddConditionParamsTypedDict, CustomPromptParamsTypedDict]
)
r"""Encapsulated parameters for the operation"""


Params = TypeAliasType("Params", Union[AddConditionParams, CustomPromptParams])
r"""Encapsulated parameters for the operation"""


class UnifiedPromptSpecTypedDict(TypedDict):
    r"""Parameters required for intent-based extraction or filtering"""

    suggestion_type: SuggestionType
    r"""Type of operation (extraction or conditional filtering)"""
    params: ParamsTypedDict
    r"""Encapsulated parameters for the operation"""


class UnifiedPromptSpec(BaseModel):
    r"""Parameters required for intent-based extraction or filtering"""

    suggestion_type: SuggestionType
    r"""Type of operation (extraction or conditional filtering)"""

    params: Params
    r"""Encapsulated parameters for the operation"""
