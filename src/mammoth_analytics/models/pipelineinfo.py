"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .pipelinestats import PipelineStats, PipelineStatsTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class PipelineInfoState(str, Enum):
    r"""Pipeline State"""

    READY = "ready"
    RUNTIME_ERROR = "runtime_error"
    MODIFYING = "modifying"
    MODIFIED = "modified"
    ANALYSING = "analysing"
    REF_ERROR = "ref_error"
    WAITING_FOR_LOCK = "waiting_for_lock"
    SUBMITTED = "submitted"
    RUNNING = "running"
    EXPORTS_RUNNING = "exports_running"


class PipelineInfoDraftMode(str, Enum):
    r"""Pipeline draft mode"""

    OFF = "off"
    CLEAN = "clean"
    DIRTY = "dirty"


class PipelineInfoTypedDict(TypedDict):
    state: NotRequired[Nullable[PipelineInfoState]]
    r"""Pipeline State"""
    draft_mode: NotRequired[Nullable[PipelineInfoDraftMode]]
    r"""Pipeline draft mode"""
    auto_run: NotRequired[Nullable[bool]]
    r"""Pipeline auto run decision"""
    stats: NotRequired[Nullable[PipelineStatsTypedDict]]
    r"""Statistics is a set of information about pipeline"""


class PipelineInfo(BaseModel):
    state: OptionalNullable[PipelineInfoState] = UNSET
    r"""Pipeline State"""

    draft_mode: OptionalNullable[PipelineInfoDraftMode] = UNSET
    r"""Pipeline draft mode"""

    auto_run: OptionalNullable[bool] = UNSET
    r"""Pipeline auto run decision"""

    stats: OptionalNullable[PipelineStats] = UNSET
    r"""Statistics is a set of information about pipeline"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["state", "draft_mode", "auto_run", "stats"]
        nullable_fields = ["state", "draft_mode", "auto_run", "stats"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
