"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetPipelineTasksFilterByStatus(str, Enum):
    r"""Returns all tasks where status matches the given value"""

    DELETED = "deleted"
    EXECUTED = "executed"
    EXECUTING = "executing"
    EDITED = "edited"
    ADDED = "added"
    SUSPENDED = "suspended"
    SUSPENDING = "suspending"


class GetPipelineTasksRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    fields: NotRequired[str]
    r"""Fields to be returned in a comma-separated format. Check full mode for all fields."""
    limit: NotRequired[int]
    r"""Max number of result to return"""
    offset: NotRequired[int]
    r"""Distance from the beginning of the list of results"""
    sort: NotRequired[str]
    r"""Returned results are sorted by the combination of the given fields."""
    sequence: NotRequired[Nullable[int]]
    r"""Returns all tasks where sequence matches the given value"""
    status: NotRequired[Nullable[GetPipelineTasksFilterByStatus]]
    r"""Returns all tasks where status matches the given value"""


class GetPipelineTasksRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "__standard"
    r"""Fields to be returned in a comma-separated format. Check full mode for all fields."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Max number of result to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Distance from the beginning of the list of results"""

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "(id:asc)"
    r"""Returned results are sorted by the combination of the given fields."""

    sequence: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Returns all tasks where sequence matches the given value"""

    status: Annotated[
        OptionalNullable[GetPipelineTasksFilterByStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Returns all tasks where status matches the given value"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["fields", "limit", "offset", "sort", "sequence", "status"]
        nullable_fields = ["sequence", "status"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


GetPipelineTasksExtra2TypedDict = TypeAliasType(
    "GetPipelineTasksExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


GetPipelineTasksExtra2 = TypeAliasType(
    "GetPipelineTasksExtra2", Union[Dict[str, Any], List[Any]]
)


GetPipelineTasksExtra1TypedDict = TypeAliasType(
    "GetPipelineTasksExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


GetPipelineTasksExtra1 = TypeAliasType(
    "GetPipelineTasksExtra1", Union[Dict[str, Any], List[Any]]
)
