"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class SelfPatchDataOperation(str, Enum):
    r"""Operation to be performed on the user"""

    REPLACE = "replace"
    ADD = "add"
    REMOVE = "remove"


class SelfPatchDataPath(str, Enum):
    r"""Path of the patch request"""

    FIRST_NAME = "first_name"
    LAST_NAME = "last_name"
    PASSWORD = "password"
    MFA = "mfa"


class SelfPatchDataValueTypedDict(TypedDict):
    pass


class SelfPatchDataValue(BaseModel):
    pass


SelfPatchDataValueUnionTypedDict = TypeAliasType(
    "SelfPatchDataValueUnionTypedDict", Union[SelfPatchDataValueTypedDict, str]
)
r"""Value of the patch request"""


SelfPatchDataValueUnion = TypeAliasType(
    "SelfPatchDataValueUnion", Union[SelfPatchDataValue, str]
)
r"""Value of the patch request"""


class SelfPatchDataTypedDict(TypedDict):
    op: SelfPatchDataOperation
    r"""Operation to be performed on the user"""
    path: SelfPatchDataPath
    r"""Path of the patch request"""
    value: NotRequired[Nullable[SelfPatchDataValueUnionTypedDict]]
    r"""Value of the patch request"""


class SelfPatchData(BaseModel):
    op: SelfPatchDataOperation
    r"""Operation to be performed on the user"""

    path: SelfPatchDataPath
    r"""Path of the patch request"""

    value: OptionalNullable[SelfPatchDataValueUnion] = UNSET
    r"""Value of the patch request"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
