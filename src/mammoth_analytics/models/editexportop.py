"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .exportpatch import ExportPatch, ExportPatchTypedDict
from .jobresponse import JobResponse, JobResponseTypedDict
from .pipelineexortsmodificationresp import (
    PipelineExortsModificationResp,
    PipelineExortsModificationRespTypedDict,
)
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class EditExportRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    export_id: int
    r"""Id of a pipeline export"""
    export_patch: ExportPatchTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    skip_validation: NotRequired[bool]


class EditExportRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    export_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of a pipeline export"""

    export_patch: Annotated[
        ExportPatch,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    skip_validation: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False


EditExportNotFoundExtraTypedDict = TypeAliasType(
    "EditExportNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


EditExportNotFoundExtra = TypeAliasType(
    "EditExportNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


EditExportBadRequestExtra2TypedDict = TypeAliasType(
    "EditExportBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


EditExportBadRequestExtra2 = TypeAliasType(
    "EditExportBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


EditExportBadRequestExtra1TypedDict = TypeAliasType(
    "EditExportBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


EditExportBadRequestExtra1 = TypeAliasType(
    "EditExportBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)


EditExportResponseTypedDict = TypeAliasType(
    "EditExportResponseTypedDict",
    Union[JobResponseTypedDict, PipelineExortsModificationRespTypedDict],
)


EditExportResponse = TypeAliasType(
    "EditExportResponse", Union[JobResponse, PipelineExortsModificationResp]
)
