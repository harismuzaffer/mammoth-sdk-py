"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .inviteprojectrolepatch import (
    InviteProjectRolePatch,
    InviteProjectRolePatchTypedDict,
)
from .userrolespatch import UserRolesPatch, UserRolesPatchTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class UsersToProjectsPatchTypedDict(TypedDict):
    project_id: NotRequired[Nullable[int]]
    r"""Project ID"""
    user_ids: NotRequired[Nullable[List[int]]]
    r"""List of user IDs to add/remove to/from project"""
    invite_ids: NotRequired[Nullable[List[int]]]
    r"""List of invite IDs to add/remove to/from project"""
    user_roles: NotRequired[Nullable[List[UserRolesPatchTypedDict]]]
    r"""List of user to role mapping to assign to the project"""
    invite_roles: NotRequired[Nullable[List[InviteProjectRolePatchTypedDict]]]
    r"""List of invite to role mapping to assign to the project"""


class UsersToProjectsPatch(BaseModel):
    project_id: OptionalNullable[int] = UNSET
    r"""Project ID"""

    user_ids: OptionalNullable[List[int]] = UNSET
    r"""List of user IDs to add/remove to/from project"""

    invite_ids: OptionalNullable[List[int]] = UNSET
    r"""List of invite IDs to add/remove to/from project"""

    user_roles: OptionalNullable[List[UserRolesPatch]] = UNSET
    r"""List of user to role mapping to assign to the project"""

    invite_roles: OptionalNullable[List[InviteProjectRolePatch]] = UNSET
    r"""List of invite to role mapping to assign to the project"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "project_id",
            "user_ids",
            "invite_ids",
            "user_roles",
            "invite_roles",
        ]
        nullable_fields = [
            "project_id",
            "user_ids",
            "invite_ids",
            "user_roles",
            "invite_roles",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
