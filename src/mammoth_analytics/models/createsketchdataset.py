"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .columns import Columns, ColumnsTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class DisplayPropertiesTypedDict(TypedDict):
    pass


class DisplayProperties(BaseModel):
    pass


class CreateSketchDatasetTypedDict(TypedDict):
    name: str
    r"""Dataset Name"""
    dataschema: List[ColumnsTypedDict]
    r"""Dataschema of the table"""
    display_properties: NotRequired[Nullable[DisplayPropertiesTypedDict]]
    r"""Display Properties for the dataset"""
    data_content: NotRequired[Nullable[List[List[str]]]]
    r"""Data that would be inserted into the dataset"""


class CreateSketchDataset(BaseModel):
    name: str
    r"""Dataset Name"""

    dataschema: List[Columns]
    r"""Dataschema of the table"""

    display_properties: OptionalNullable[DisplayProperties] = UNSET
    r"""Display Properties for the dataset"""

    data_content: OptionalNullable[List[List[str]]] = UNSET
    r"""Data that would be inserted into the dataset"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["display_properties", "data_content"]
        nullable_fields = ["display_properties", "data_content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
