"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .numericformat import NumericFormat, NumericFormatTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class ColumnsCType(str, Enum):
    r"""Data Type of the column"""

    TEXT = "text"
    NUMERIC = "numeric"
    DATE = "date"


CFormatTypedDict = TypeAliasType("CFormatTypedDict", Union[NumericFormatTypedDict, str])
r"""Format to be applied to the column. This field can be None for text columns"""


CFormat = TypeAliasType("CFormat", Union[NumericFormat, str])
r"""Format to be applied to the column. This field can be None for text columns"""


class ColumnsTypedDict(TypedDict):
    c_id: str
    r"""Column ID"""
    c_name: str
    r"""Column Name"""
    c_type: ColumnsCType
    r"""Data Type of the column"""
    c_format: NotRequired[Nullable[CFormatTypedDict]]
    r"""Format to be applied to the column. This field can be None for text columns"""


class Columns(BaseModel):
    c_id: str
    r"""Column ID"""

    c_name: str
    r"""Column Name"""

    c_type: ColumnsCType
    r"""Data Type of the column"""

    c_format: OptionalNullable[CFormat] = UNSET
    r"""Format to be applied to the column. This field can be None for text columns"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["c_format"]
        nullable_fields = ["c_format"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
