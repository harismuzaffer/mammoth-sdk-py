"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, List
from typing_extensions import NotRequired, TypedDict


class RecurrenceScheduleFieldsTypedDict(TypedDict):
    start: datetime
    r"""start time of the schedule"""
    frequency: NotRequired[Nullable[str]]
    r"""frequency"""
    interval: NotRequired[Nullable[int]]
    r"""interval"""
    until: NotRequired[Nullable[datetime]]
    r"""until"""
    count: NotRequired[Nullable[int]]
    r"""count"""
    by_week_day: NotRequired[Nullable[List[Any]]]
    r"""By week day"""
    by_month_day: NotRequired[Nullable[List[Any]]]
    r"""By month day"""
    last_checked_occurrence: NotRequired[Nullable[datetime]]
    r"""Last checked occurrence"""
    next_occurrence: NotRequired[Nullable[datetime]]
    r"""Next occurrence"""


class RecurrenceScheduleFields(BaseModel):
    start: datetime
    r"""start time of the schedule"""

    frequency: OptionalNullable[str] = UNSET
    r"""frequency"""

    interval: OptionalNullable[int] = UNSET
    r"""interval"""

    until: OptionalNullable[datetime] = UNSET
    r"""until"""

    count: OptionalNullable[int] = UNSET
    r"""count"""

    by_week_day: OptionalNullable[List[Any]] = UNSET
    r"""By week day"""

    by_month_day: OptionalNullable[List[Any]] = UNSET
    r"""By month day"""

    last_checked_occurrence: OptionalNullable[datetime] = UNSET
    r"""Last checked occurrence"""

    next_occurrence: OptionalNullable[datetime] = UNSET
    r"""Next occurrence"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "frequency",
            "interval",
            "until",
            "count",
            "by_week_day",
            "by_month_day",
            "last_checked_occurrence",
            "next_occurrence",
        ]
        nullable_fields = [
            "frequency",
            "interval",
            "until",
            "count",
            "by_week_day",
            "by_month_day",
            "last_checked_occurrence",
            "next_occurrence",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
