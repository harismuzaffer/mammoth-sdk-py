"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .sheetinfo import SheetInfo, SheetInfoTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class AdditionalInfoTypedDict(TypedDict):
    r"""Additional Info of the file"""

    append_to_ds_id: NotRequired[Nullable[int]]
    r"""File Id"""
    parent_id: NotRequired[Nullable[str]]
    r"""Parent Id"""
    delete_existing_after_append: NotRequired[bool]
    r"""Delete Existing After Append"""
    password_protected: NotRequired[bool]
    r"""Password Protected"""
    sheets_info: NotRequired[Nullable[List[SheetInfoTypedDict]]]
    r"""Sheet Info"""
    final_ds_id: NotRequired[Nullable[int]]
    r"""Final Dataset Id"""
    url: NotRequired[Nullable[str]]
    r"""Final Dataset Id"""


class AdditionalInfo(BaseModel):
    r"""Additional Info of the file"""

    append_to_ds_id: OptionalNullable[int] = UNSET
    r"""File Id"""

    parent_id: OptionalNullable[str] = UNSET
    r"""Parent Id"""

    delete_existing_after_append: Optional[bool] = False
    r"""Delete Existing After Append"""

    password_protected: Optional[bool] = False
    r"""Password Protected"""

    sheets_info: OptionalNullable[List[SheetInfo]] = UNSET
    r"""Sheet Info"""

    final_ds_id: OptionalNullable[int] = UNSET
    r"""Final Dataset Id"""

    url: OptionalNullable[str] = UNSET
    r"""Final Dataset Id"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "append_to_ds_id",
            "parent_id",
            "delete_existing_after_append",
            "password_protected",
            "sheets_info",
            "final_ds_id",
            "url",
        ]
        nullable_fields = [
            "append_to_ds_id",
            "parent_id",
            "sheets_info",
            "final_ds_id",
            "url",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
