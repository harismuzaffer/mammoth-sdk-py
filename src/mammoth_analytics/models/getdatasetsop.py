"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetDatasetsRequestTypedDict(TypedDict):
    project_id: int
    r"""Project ID of the workspace"""
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    fields: NotRequired[Nullable[str]]
    r"""Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."""
    id: NotRequired[str]
    r"""Track multiple dataset ids, comma separated"""
    name: NotRequired[Nullable[str]]
    r"""Track multiple dataset names, comma separated"""
    created_at: NotRequired[Nullable[str]]
    r"""Track multiple dataset, which falls under created_at date range"""
    updated_at: NotRequired[Nullable[str]]
    r"""Track multiple dataset, which falls under updated_at date range"""
    created_by: NotRequired[Nullable[str]]
    r"""Track multiple dataset created by, comma separated"""
    source_type: NotRequired[Nullable[str]]
    r"""Track multiple dataset source type, comma separated"""
    status: NotRequired[Nullable[str]]
    r"""Track multiple dataset status, comma separated"""
    limit: NotRequired[int]
    r"""Max number of result to return"""
    offset: NotRequired[int]
    r"""Distance from the beginning of the list of results"""
    sort: NotRequired[Nullable[str]]
    r"""Sort the datasets based on the fields"""


class GetDatasetsRequest(BaseModel):
    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    fields: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
    r"""Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."""

    id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset ids, comma separated"""

    name: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset names, comma separated"""

    created_at: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset, which falls under created_at date range"""

    updated_at: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset, which falls under updated_at date range"""

    created_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset created by, comma separated"""

    source_type: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset source type, comma separated"""

    status: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Track multiple dataset status, comma separated"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Max number of result to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Distance from the beginning of the list of results"""

    sort: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "(id:asc)"
    r"""Sort the datasets based on the fields"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "fields",
            "id",
            "name",
            "created_at",
            "updated_at",
            "created_by",
            "source_type",
            "status",
            "limit",
            "offset",
            "sort",
        ]
        nullable_fields = [
            "fields",
            "name",
            "created_at",
            "updated_at",
            "created_by",
            "source_type",
            "status",
            "sort",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
