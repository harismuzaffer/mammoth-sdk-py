"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .rruleinfo import RruleInfo, RruleInfoTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ScheduleDetailsStatus(str, Enum):
    r"""Status"""

    IDLE = "idle"
    QUEUED = "queued"
    RUNNING = "running"
    FAILED = "failed"
    PAUSED = "paused"
    UNKNOWN = "unknown"


class ScheduleDetailsJobStatus(str, Enum):
    r"""Job Status"""

    SUCCESS = "success"
    WARNING = "warning"
    ERROR = "error"


class RefreshSchedule(str, Enum):
    r"""Refresh Schedule"""

    MANUAL = "manual"
    AUTO = "auto"


class ScheduleDetailsTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""Schedule ID"""
    rrule: NotRequired[Nullable[RruleInfoTypedDict]]
    r"""Rrule"""
    job: NotRequired[Nullable[str]]
    r"""Job"""
    status: NotRequired[Nullable[ScheduleDetailsStatus]]
    r"""Status"""
    job_status: NotRequired[Nullable[ScheduleDetailsJobStatus]]
    r"""Job Status"""
    refresh_schedule: NotRequired[Nullable[RefreshSchedule]]
    r"""Refresh Schedule"""
    next_data_pull: NotRequired[Nullable[str]]
    r"""Next Data Pull"""
    last_datapull: NotRequired[Nullable[str]]
    r"""Last Datapull"""
    warning_reason: NotRequired[Nullable[str]]
    r"""Warning Reason"""


class ScheduleDetails(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""Schedule ID"""

    rrule: OptionalNullable[RruleInfo] = UNSET
    r"""Rrule"""

    job: OptionalNullable[str] = UNSET
    r"""Job"""

    status: OptionalNullable[ScheduleDetailsStatus] = UNSET
    r"""Status"""

    job_status: OptionalNullable[ScheduleDetailsJobStatus] = UNSET
    r"""Job Status"""

    refresh_schedule: OptionalNullable[RefreshSchedule] = UNSET
    r"""Refresh Schedule"""

    next_data_pull: OptionalNullable[str] = UNSET
    r"""Next Data Pull"""

    last_datapull: OptionalNullable[str] = UNSET
    r"""Last Datapull"""

    warning_reason: OptionalNullable[str] = UNSET
    r"""Warning Reason"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "rrule",
            "job",
            "status",
            "job_status",
            "refresh_schedule",
            "next_data_pull",
            "last_datapull",
            "warning_reason",
        ]
        nullable_fields = [
            "id",
            "rrule",
            "job",
            "status",
            "job_status",
            "refresh_schedule",
            "next_data_pull",
            "last_datapull",
            "warning_reason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
