"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dsconfigpatchrequest import DsConfigPatchRequest, DsConfigPatchRequestTypedDict
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from typing import Any, Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class UpdateDsConfigsRequestTypedDict(TypedDict):
    connector_key: str
    r"""Encoded key of the connector"""
    connection_key: str
    r"""Encoded key of the connection"""
    ds_config_key: str
    r"""Key for the ds_config"""
    ds_config_patch_request: DsConfigPatchRequestTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""


class UpdateDsConfigsRequest(BaseModel):
    connector_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Encoded key of the connector"""

    connection_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Encoded key of the connection"""

    ds_config_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Key for the ds_config"""

    ds_config_patch_request: Annotated[
        DsConfigPatchRequest,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""


UpdateDsConfigsExtra2TypedDict = TypeAliasType(
    "UpdateDsConfigsExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


UpdateDsConfigsExtra2 = TypeAliasType(
    "UpdateDsConfigsExtra2", Union[Dict[str, Any], List[Any]]
)


UpdateDsConfigsExtra1TypedDict = TypeAliasType(
    "UpdateDsConfigsExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


UpdateDsConfigsExtra1 = TypeAliasType(
    "UpdateDsConfigsExtra1", Union[Dict[str, Any], List[Any]]
)
