"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jobresponse import JobResponse, JobResponseTypedDict
from .pipelinemodificationresp import (
    PipelineModificationResp,
    PipelineModificationRespTypedDict,
)
from .taskpatch import TaskPatch, TaskPatchTypedDict
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class EditTaskRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    task_id: int
    r"""Id of a pipeline task"""
    task_patch: TaskPatchTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    skip_validation: NotRequired[bool]


class EditTaskRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    task_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of a pipeline task"""

    task_patch: Annotated[
        TaskPatch, FieldMetadata(request=RequestMetadata(media_type="application/json"))
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    skip_validation: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False


EditTaskNotFoundExtraTypedDict = TypeAliasType(
    "EditTaskNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


EditTaskNotFoundExtra = TypeAliasType(
    "EditTaskNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


EditTaskBadRequestExtra2TypedDict = TypeAliasType(
    "EditTaskBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


EditTaskBadRequestExtra2 = TypeAliasType(
    "EditTaskBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


EditTaskBadRequestExtra1TypedDict = TypeAliasType(
    "EditTaskBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


EditTaskBadRequestExtra1 = TypeAliasType(
    "EditTaskBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)


EditTaskResponseTypedDict = TypeAliasType(
    "EditTaskResponseTypedDict",
    Union[JobResponseTypedDict, PipelineModificationRespTypedDict],
)


EditTaskResponse = TypeAliasType(
    "EditTaskResponse", Union[JobResponse, PipelineModificationResp]
)
