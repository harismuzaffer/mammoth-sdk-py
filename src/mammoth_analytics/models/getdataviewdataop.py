"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetDataviewDataRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    sequence: NotRequired[int]
    r"""Sequence number of the dataview task"""
    offset: NotRequired[int]
    r"""Offset is the starting position of rows at which we want to fetch data"""
    limit: NotRequired[int]
    r"""Limit is the number of rows we want to fetch"""
    columns: NotRequired[Nullable[List[str]]]
    r"""Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched."""
    sort: NotRequired[Nullable[str]]
    r"""Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three"""


class GetDataviewDataRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    sequence: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Sequence number of the dataview task"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Offset is the starting position of rows at which we want to fetch data"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 400
    r"""Limit is the number of rows we want to fetch"""

    columns: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched."""

    sort: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["sequence", "offset", "limit", "columns", "sort"]
        nullable_fields = ["columns", "sort"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


GetDataviewDataNotFoundExtraTypedDict = TypeAliasType(
    "GetDataviewDataNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataNotFoundExtra = TypeAliasType(
    "GetDataviewDataNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataUnauthorizedExtraTypedDict = TypeAliasType(
    "GetDataviewDataUnauthorizedExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataUnauthorizedExtra = TypeAliasType(
    "GetDataviewDataUnauthorizedExtra", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataBadRequestExtra2TypedDict = TypeAliasType(
    "GetDataviewDataBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataBadRequestExtra2 = TypeAliasType(
    "GetDataviewDataBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataBadRequestExtra1TypedDict = TypeAliasType(
    "GetDataviewDataBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


GetDataviewDataBadRequestExtra1 = TypeAliasType(
    "GetDataviewDataBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)
