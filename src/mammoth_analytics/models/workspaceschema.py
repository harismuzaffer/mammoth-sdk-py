"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class WorkspaceStatus(str, Enum):
    r"""Status of the workspace"""

    DELETED = "DELETED"
    ACTIVE = "ACTIVE"
    SUSPENDED = "SUSPENDED"
    INITED = "INITED"


class WorkspaceSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    name: NotRequired[Nullable[str]]
    r"""Name of the workspace"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Time when workspace was created"""
    updated_at: NotRequired[Nullable[datetime]]
    r"""Time when workspace was last updated"""
    status: NotRequired[Nullable[WorkspaceStatus]]
    r"""Status of the workspace"""
    acc_image: NotRequired[Nullable[str]]
    r"""Workspace image URL"""
    date_format: NotRequired[Nullable[str]]
    r"""Workspace date region"""
    total_users: NotRequired[Nullable[int]]
    r"""Total number of users in the workspace"""
    path: NotRequired[Nullable[str]]
    r"""Workspace path"""
    url: NotRequired[Nullable[str]]
    r"""Workspace url"""
    last_accessed: NotRequired[Nullable[datetime]]
    r"""Time when workspace was last accessed"""


class WorkspaceSchema(BaseModel):
    id: OptionalNullable[int] = UNSET

    name: OptionalNullable[str] = UNSET
    r"""Name of the workspace"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Time when workspace was created"""

    updated_at: OptionalNullable[datetime] = UNSET
    r"""Time when workspace was last updated"""

    status: OptionalNullable[WorkspaceStatus] = UNSET
    r"""Status of the workspace"""

    acc_image: OptionalNullable[str] = UNSET
    r"""Workspace image URL"""

    date_format: OptionalNullable[str] = UNSET
    r"""Workspace date region"""

    total_users: OptionalNullable[int] = UNSET
    r"""Total number of users in the workspace"""

    path: OptionalNullable[str] = UNSET
    r"""Workspace path"""

    url: OptionalNullable[str] = UNSET
    r"""Workspace url"""

    last_accessed: OptionalNullable[datetime] = UNSET
    r"""Time when workspace was last accessed"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "name",
            "created_at",
            "updated_at",
            "status",
            "acc_image",
            "date_format",
            "total_users",
            "path",
            "url",
            "last_accessed",
        ]
        nullable_fields = [
            "id",
            "name",
            "created_at",
            "updated_at",
            "status",
            "acc_image",
            "date_format",
            "total_users",
            "path",
            "url",
            "last_accessed",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
