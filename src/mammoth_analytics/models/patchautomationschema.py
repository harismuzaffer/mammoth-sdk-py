"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .automationconditionschema import (
    AutomationConditionSchema,
    AutomationConditionSchemaTypedDict,
)
from .patchautomationtaskschema import (
    PatchAutomationTaskSchema,
    PatchAutomationTaskSchemaTypedDict,
)
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class PatchAutomationSchemaStatus(str, Enum):
    r"""Status"""

    ACTIVE = "active"
    SUSPENDED = "suspended"
    FAILED = "failed"


class PatchAutomationSchemaConditionType(str, Enum):
    r"""Condition Type"""

    AND = "and"
    OR = "or"


class PatchAutomationSchemaTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""Name"""
    description: NotRequired[Nullable[str]]
    r"""Description"""
    status: NotRequired[Nullable[PatchAutomationSchemaStatus]]
    r"""Status"""
    tasks: NotRequired[Nullable[List[PatchAutomationTaskSchemaTypedDict]]]
    r"""Tasks"""
    conditions: NotRequired[Nullable[List[AutomationConditionSchemaTypedDict]]]
    r"""Conditions"""
    condition_mode: NotRequired[Nullable[PatchAutomationSchemaConditionType]]
    r"""Condition Type"""


class PatchAutomationSchema(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""Name"""

    description: OptionalNullable[str] = UNSET
    r"""Description"""

    status: OptionalNullable[PatchAutomationSchemaStatus] = UNSET
    r"""Status"""

    tasks: OptionalNullable[List[PatchAutomationTaskSchema]] = UNSET
    r"""Tasks"""

    conditions: OptionalNullable[List[AutomationConditionSchema]] = UNSET
    r"""Conditions"""

    condition_mode: OptionalNullable[PatchAutomationSchemaConditionType] = UNSET
    r"""Condition Type"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "description",
            "status",
            "tasks",
            "conditions",
            "condition_mode",
        ]
        nullable_fields = [
            "name",
            "description",
            "status",
            "tasks",
            "conditions",
            "condition_mode",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
