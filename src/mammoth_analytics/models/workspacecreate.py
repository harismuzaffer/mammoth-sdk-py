"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class WorkspaceCreateTypedDict(TypedDict):
    r"""Create workspace schema details"""

    name: str
    r"""Name of the workspace to be created"""
    user_email: str
    r"""Email of the customer"""
    payment_frequency: str
    r"""Payment frequency of the workspace"""
    plan_id: NotRequired[Nullable[int]]
    r"""Plan ID"""
    is_verified: NotRequired[bool]
    r"""Is verified"""
    is_registration: NotRequired[bool]
    r"""Is registration"""


class WorkspaceCreate(BaseModel):
    r"""Create workspace schema details"""

    name: str
    r"""Name of the workspace to be created"""

    user_email: str
    r"""Email of the customer"""

    payment_frequency: str
    r"""Payment frequency of the workspace"""

    plan_id: OptionalNullable[int] = UNSET
    r"""Plan ID"""

    is_verified: Optional[bool] = True
    r"""Is verified"""

    is_registration: Optional[bool] = False
    r"""Is registration"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["plan_id", "is_verified", "is_registration"]
        nullable_fields = ["plan_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
