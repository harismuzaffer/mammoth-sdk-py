"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .queryconfig import QueryConfig, QueryConfigTypedDict
from .scheduledetails import ScheduleDetails, ScheduleDetailsTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


IDTypedDict = TypeAliasType("IDTypedDict", Union[str, int])
r"""Datasource Config Key"""


ID = TypeAliasType("ID", Union[str, int])
r"""Datasource Config Key"""


class BatchMode(str, Enum):
    r"""Batch Mode"""

    REPLACE = "replace"
    COMBINE = "combine"


class ThirdPartySourceTypedDict(TypedDict):
    r"""Details of the cloud ds source"""

    connector_key: NotRequired[Nullable[str]]
    r"""Connector Key"""
    identity_key: NotRequired[Nullable[str]]
    r"""Identity Key"""
    id: NotRequired[Nullable[IDTypedDict]]
    r"""Datasource Config Key"""
    batch_mode: NotRequired[Nullable[BatchMode]]
    r"""Batch Mode"""
    schedules: NotRequired[Nullable[List[ScheduleDetailsTypedDict]]]
    r"""Schedules"""
    query_config: NotRequired[Nullable[QueryConfigTypedDict]]
    r"""Query Config"""
    batch_ids: NotRequired[Nullable[List[int]]]
    r"""Batch IDs"""


class ThirdPartySource(BaseModel):
    r"""Details of the cloud ds source"""

    connector_key: OptionalNullable[str] = UNSET
    r"""Connector Key"""

    identity_key: OptionalNullable[str] = UNSET
    r"""Identity Key"""

    id: OptionalNullable[ID] = UNSET
    r"""Datasource Config Key"""

    batch_mode: OptionalNullable[BatchMode] = UNSET
    r"""Batch Mode"""

    schedules: OptionalNullable[List[ScheduleDetails]] = UNSET
    r"""Schedules"""

    query_config: OptionalNullable[QueryConfig] = UNSET
    r"""Query Config"""

    batch_ids: OptionalNullable[List[int]] = UNSET
    r"""Batch IDs"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "connector_key",
            "identity_key",
            "id",
            "batch_mode",
            "schedules",
            "query_config",
            "batch_ids",
        ]
        nullable_fields = [
            "connector_key",
            "identity_key",
            "id",
            "batch_mode",
            "schedules",
            "query_config",
            "batch_ids",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
