"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ExternalKeyKeyType(str, Enum):
    r"""Type of the external key e.g. open_ai"""

    OPEN_AI = "open_ai"


class ExternalKeyTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""ID of the external key as saved in the DB"""
    key_type: NotRequired[Nullable[ExternalKeyKeyType]]
    r"""Type of the external key e.g. open_ai"""
    key_name: NotRequired[Nullable[str]]
    r"""A name to be associated with the key"""
    description: NotRequired[Nullable[str]]
    r"""Describe the purpose of the key and any added information related to it"""
    secure_key: NotRequired[Nullable[str]]
    r"""The key value which will be used in the intended service"""
    is_in_use: NotRequired[Nullable[bool]]
    r"""Is the key currently in use?"""
    created_by_user_id: NotRequired[Nullable[int]]
    r"""ID of the user that created this key"""
    last_used_at: NotRequired[Nullable[datetime]]
    r"""When was the key last used at?"""
    last_used_by_used_id: NotRequired[Nullable[int]]
    r"""ID of the user who the key in the recent most usage?"""


class ExternalKey(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""ID of the external key as saved in the DB"""

    key_type: OptionalNullable[ExternalKeyKeyType] = UNSET
    r"""Type of the external key e.g. open_ai"""

    key_name: OptionalNullable[str] = UNSET
    r"""A name to be associated with the key"""

    description: OptionalNullable[str] = UNSET
    r"""Describe the purpose of the key and any added information related to it"""

    secure_key: OptionalNullable[str] = UNSET
    r"""The key value which will be used in the intended service"""

    is_in_use: OptionalNullable[bool] = UNSET
    r"""Is the key currently in use?"""

    created_by_user_id: OptionalNullable[int] = UNSET
    r"""ID of the user that created this key"""

    last_used_at: OptionalNullable[datetime] = UNSET
    r"""When was the key last used at?"""

    last_used_by_used_id: OptionalNullable[int] = UNSET
    r"""ID of the user who the key in the recent most usage?"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "key_type",
            "key_name",
            "description",
            "secure_key",
            "is_in_use",
            "created_by_user_id",
            "last_used_at",
            "last_used_by_used_id",
        ]
        nullable_fields = [
            "id",
            "key_type",
            "key_name",
            "description",
            "secure_key",
            "is_in_use",
            "created_by_user_id",
            "last_used_at",
            "last_used_by_used_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
