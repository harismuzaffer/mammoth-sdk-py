"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .apiv2_conditional_formatting_schema_columnschema import (
    Apiv2ConditionalFormattingSchemaColumnSchema,
    Apiv2ConditionalFormattingSchemaColumnSchemaTypedDict,
)
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from typing import Any, Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class CreateConditionalFormatRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    request_body: Dict[str, Apiv2ConditionalFormattingSchemaColumnSchemaTypedDict]
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""


class CreateConditionalFormatRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    request_body: Annotated[
        Dict[str, Apiv2ConditionalFormattingSchemaColumnSchema],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""


CreateConditionalFormatExtraTypedDict = TypeAliasType(
    "CreateConditionalFormatExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


CreateConditionalFormatExtra = TypeAliasType(
    "CreateConditionalFormatExtra", Union[Dict[str, Any], List[Any]]
)
