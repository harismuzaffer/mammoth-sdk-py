"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AddExportSpecHandlerType(str, Enum):
    POSTGRES = "postgres"
    CSV_FILE = "csv_file"
    S3 = "s3"
    MYSQL = "mysql"
    MSSQL = "mssql"
    FTP = "ftp"
    SFTP = "sftp"
    EMAIL = "email"
    ELASTICSEARCH = "elasticsearch"
    POWERBI = "powerbi"
    REDSHIFT = "redshift"
    BIGQUERY = "bigquery"
    INTERNAL_DATASET = "internal_dataset"
    PUBLISHDB = "publishdb"


class AddExportSpecTriggerType(str, Enum):
    NONE = "none"
    PIPELINE = "pipeline"
    SCHEDULE = "schedule"


class AddExportSpecTargetPropertiesTypedDict(TypedDict):
    pass


class AddExportSpecTargetProperties(BaseModel):
    pass


class AddExportSpecAdditionalPropertiesTypedDict(TypedDict):
    pass


class AddExportSpecAdditionalProperties(BaseModel):
    pass


class AddExportSpecConditionTypedDict(TypedDict):
    pass


class AddExportSpecCondition(BaseModel):
    pass


class AddExportSpecTypedDict(TypedDict):
    r"""A export specification"""

    dataview_id: int
    handler_type: AddExportSpecHandlerType
    trigger_type: AddExportSpecTriggerType
    run_immediately: bool
    sequence: NotRequired[Nullable[int]]
    trigger_id: NotRequired[Nullable[int]]
    end_of_pipeline: NotRequired[bool]
    target_properties: NotRequired[AddExportSpecTargetPropertiesTypedDict]
    additional_properties: NotRequired[AddExportSpecAdditionalPropertiesTypedDict]
    condition: NotRequired[AddExportSpecConditionTypedDict]
    validate_only: NotRequired[bool]


class AddExportSpec(BaseModel):
    r"""A export specification"""

    dataview_id: Annotated[int, pydantic.Field(alias="DATAVIEW_ID")]

    handler_type: AddExportSpecHandlerType

    trigger_type: AddExportSpecTriggerType

    run_immediately: bool

    sequence: OptionalNullable[int] = UNSET

    trigger_id: Annotated[OptionalNullable[int], pydantic.Field(alias="TRIGGER_ID")] = (
        UNSET
    )

    end_of_pipeline: Optional[bool] = True

    target_properties: Optional[AddExportSpecTargetProperties] = None

    additional_properties: Optional[AddExportSpecAdditionalProperties] = None

    condition: Optional[AddExportSpecCondition] = None

    validate_only: Optional[bool] = False

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "sequence",
            "TRIGGER_ID",
            "end_of_pipeline",
            "target_properties",
            "additional_properties",
            "condition",
            "validate_only",
        ]
        nullable_fields = ["sequence", "TRIGGER_ID"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
