"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dsconfigforcloudtypeconnector import (
    DsConfigForCloudTypeConnector,
    DsConfigForCloudTypeConnectorTypedDict,
)
from .recurrenceinfo import RecurrenceInfo, RecurrenceInfoTypedDict
from .scheduleproperties import ScheduleProperties, SchedulePropertiesTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CreateThirdPartyDatasetTypedDict(TypedDict):
    connector_key: str
    r"""Third party connector Key"""
    connection_key: str
    r"""Identity Key"""
    query_properties: DsConfigForCloudTypeConnectorTypedDict
    r"""Query Properties"""
    schedule_properties: NotRequired[Nullable[SchedulePropertiesTypedDict]]
    r"""Schedule Properties"""
    recurrence_info: NotRequired[Nullable[RecurrenceInfoTypedDict]]
    r"""Recurrence Properties"""


class CreateThirdPartyDataset(BaseModel):
    connector_key: str
    r"""Third party connector Key"""

    connection_key: str
    r"""Identity Key"""

    query_properties: DsConfigForCloudTypeConnector
    r"""Query Properties"""

    schedule_properties: OptionalNullable[ScheduleProperties] = UNSET
    r"""Schedule Properties"""

    recurrence_info: OptionalNullable[RecurrenceInfo] = UNSET
    r"""Recurrence Properties"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["schedule_properties", "recurrence_info"]
        nullable_fields = ["schedule_properties", "recurrence_info"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
