"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class DataviewConfigTypedDict(TypedDict):
    pass


class DataviewConfig(BaseModel):
    pass


class ExtraConditionTypedDict(TypedDict):
    pass


class ExtraCondition(BaseModel):
    pass


class CreateDataviewTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""Dataview Name"""
    clone_config_from: NotRequired[Nullable[int]]
    r"""Clone config from"""
    dataview_config: NotRequired[Nullable[DataviewConfigTypedDict]]
    r"""Dataview Config"""
    extra_condition: NotRequired[Nullable[ExtraConditionTypedDict]]
    r"""Extra Condition"""


class CreateDataview(BaseModel):
    name: OptionalNullable[str] = "View"
    r"""Dataview Name"""

    clone_config_from: OptionalNullable[int] = UNSET
    r"""Clone config from"""

    dataview_config: OptionalNullable[DataviewConfig] = UNSET
    r"""Dataview Config"""

    extra_condition: OptionalNullable[ExtraCondition] = UNSET
    r"""Extra Condition"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "clone_config_from",
            "dataview_config",
            "extra_condition",
        ]
        nullable_fields = [
            "name",
            "clone_config_from",
            "dataview_config",
            "extra_condition",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
