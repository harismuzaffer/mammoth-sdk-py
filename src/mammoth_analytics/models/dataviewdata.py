"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class DataviewDataConditionTypedDict(TypedDict):
    pass


class DataviewDataCondition(BaseModel):
    pass


class DataviewDataTypedDict(TypedDict):
    sequence: NotRequired[int]
    r"""Sequence Number is the step in pipeline at which we want to fetch data"""
    offset: NotRequired[int]
    r"""Offset is the one-indexed starting position of rows to fetch data"""
    limit: NotRequired[int]
    r"""Limit is the number of rows we want to fetch"""
    columns: NotRequired[Nullable[List[str]]]
    r"""Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets"""
    condition: NotRequired[Nullable[DataviewDataConditionTypedDict]]
    r"""Condition is a JSON representation of the condition we want to use while fetching the rows"""
    sort: NotRequired[Nullable[str]]
    r"""Sort is a list tuples in string format. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"""


class DataviewData(BaseModel):
    sequence: Optional[int] = 0
    r"""Sequence Number is the step in pipeline at which we want to fetch data"""

    offset: Optional[int] = 1
    r"""Offset is the one-indexed starting position of rows to fetch data"""

    limit: Optional[int] = 400
    r"""Limit is the number of rows we want to fetch"""

    columns: OptionalNullable[List[str]] = UNSET
    r"""Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets"""

    condition: OptionalNullable[DataviewDataCondition] = UNSET
    r"""Condition is a JSON representation of the condition we want to use while fetching the rows"""

    sort: OptionalNullable[str] = UNSET
    r"""Sort is a list tuples in string format. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "sequence",
            "offset",
            "limit",
            "columns",
            "condition",
            "sort",
        ]
        nullable_fields = ["columns", "condition", "sort"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
