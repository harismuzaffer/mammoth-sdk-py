"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .specschema import SpecSchema, SpecSchemaTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ConnectorsSchemaTypedDict(TypedDict):
    disp_name: NotRequired[Nullable[str]]
    r"""Name of the connector"""
    name_key: NotRequired[Nullable[str]]
    r"""Key of the connector"""
    api_type: NotRequired[Nullable[str]]
    r"""Type of the API"""
    is_premium: NotRequired[Nullable[bool]]
    r"""Whether the Connector is premium or not"""
    is_added: NotRequired[Nullable[bool]]
    r"""Whether the Connector is added to the workspace or not"""
    spec: NotRequired[Nullable[SpecSchemaTypedDict]]
    version_key: NotRequired[Nullable[str]]
    r"""Key of the version"""
    supported_version: NotRequired[Nullable[str]]
    r"""Supported version of the connector"""
    vendor: NotRequired[Nullable[str]]
    r"""Vendor of the connector"""


class ConnectorsSchema(BaseModel):
    disp_name: OptionalNullable[str] = UNSET
    r"""Name of the connector"""

    name_key: OptionalNullable[str] = UNSET
    r"""Key of the connector"""

    api_type: OptionalNullable[str] = UNSET
    r"""Type of the API"""

    is_premium: OptionalNullable[bool] = UNSET
    r"""Whether the Connector is premium or not"""

    is_added: OptionalNullable[bool] = UNSET
    r"""Whether the Connector is added to the workspace or not"""

    spec: OptionalNullable[SpecSchema] = UNSET

    version_key: OptionalNullable[str] = UNSET
    r"""Key of the version"""

    supported_version: OptionalNullable[str] = UNSET
    r"""Supported version of the connector"""

    vendor: OptionalNullable[str] = UNSET
    r"""Vendor of the connector"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "disp_name",
            "name_key",
            "api_type",
            "is_premium",
            "is_added",
            "spec",
            "version_key",
            "supported_version",
            "vendor",
        ]
        nullable_fields = [
            "disp_name",
            "name_key",
            "api_type",
            "is_premium",
            "is_added",
            "spec",
            "version_key",
            "supported_version",
            "vendor",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
