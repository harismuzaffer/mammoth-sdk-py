"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListWorkspaceConnectorsRequestTypedDict(TypedDict):
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    limit: NotRequired[int]
    r"""Max number of result to return"""
    offset: NotRequired[int]
    r"""Distance from the beginning of the list of results"""
    fields: NotRequired[str]
    r"""Fields to be returned in a comma-separated format"""
    sort: NotRequired[str]
    r"""Returned connectors based on this parameter Use the format '(field:asc)' for ascending and  '(field:desc)' for descending order."""
    name_key: NotRequired[str]
    r"""Fetch Connector which matches given name (case sensitive)"""
    is_premium: NotRequired[Nullable[bool]]
    r"""Fetch all Connectors based on premium status"""
    is_added: NotRequired[Nullable[bool]]
    r"""Fetch all Connectors based on added status"""


class ListWorkspaceConnectorsRequest(BaseModel):
    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Max number of result to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Distance from the beginning of the list of results"""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "__standard"
    r"""Fields to be returned in a comma-separated format"""

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "(name_key:asc)"
    r"""Returned connectors based on this parameter Use the format '(field:asc)' for ascending and  '(field:desc)' for descending order."""

    name_key: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Fetch Connector which matches given name (case sensitive)"""

    is_premium: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Fetch all Connectors based on premium status"""

    is_added: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Fetch all Connectors based on added status"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "limit",
            "offset",
            "fields",
            "sort",
            "name_key",
            "is_premium",
            "is_added",
        ]
        nullable_fields = ["is_premium", "is_added"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
