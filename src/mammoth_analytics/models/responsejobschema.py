"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ResponseJobSchemaStatus(str, Enum):
    SUCCESS = "success"
    FAILURE = "failure"
    PROCESSING = "processing"


class ResponseJobSchemaResponseTypedDict(TypedDict):
    pass


class ResponseJobSchemaResponse(BaseModel):
    pass


class ResponseJobSchemaTypedDict(TypedDict):
    id: int
    status: ResponseJobSchemaStatus
    response: ResponseJobSchemaResponseTypedDict
    last_updated_at: datetime
    created_at: NotRequired[Nullable[datetime]]
    path: NotRequired[Nullable[str]]
    operation: NotRequired[Nullable[str]]


class ResponseJobSchema(BaseModel):
    id: int

    status: ResponseJobSchemaStatus

    response: ResponseJobSchemaResponse

    last_updated_at: datetime

    created_at: OptionalNullable[datetime] = UNSET

    path: OptionalNullable[str] = UNSET

    operation: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created_at", "path", "operation"]
        nullable_fields = ["created_at", "path", "operation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
