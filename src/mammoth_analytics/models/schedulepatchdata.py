"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .schedulepatchschema import SchedulePatchSchema, SchedulePatchSchemaTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class SchedulePatchDataOp(str, Enum):
    r"""op"""

    REPLACE = "replace"
    ADD = "add"
    REMOVE = "remove"


class SchedulePatchDataPath(str, Enum):
    r"""path"""

    RRULE = "rrule"
    TASK = "task"
    ARGS = "args"
    STATUS = "status"


class SchedulePatchDataValueEnum(str, Enum):
    PAUSE = "pause"
    RESUME = "resume"


SchedulePatchDataValueUnionTypedDict = TypeAliasType(
    "SchedulePatchDataValueUnionTypedDict",
    Union[SchedulePatchSchemaTypedDict, SchedulePatchDataValueEnum],
)


SchedulePatchDataValueUnion = TypeAliasType(
    "SchedulePatchDataValueUnion",
    Union[SchedulePatchSchema, SchedulePatchDataValueEnum],
)


class SchedulePatchDataTypedDict(TypedDict):
    op: SchedulePatchDataOp
    r"""op"""
    path: SchedulePatchDataPath
    r"""path"""
    value: NotRequired[Nullable[SchedulePatchDataValueUnionTypedDict]]


class SchedulePatchData(BaseModel):
    op: SchedulePatchDataOp
    r"""op"""

    path: SchedulePatchDataPath
    r"""path"""

    value: OptionalNullable[SchedulePatchDataValueUnion] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
