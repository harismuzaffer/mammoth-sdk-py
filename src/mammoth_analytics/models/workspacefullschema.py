"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class WorkspaceFullSchemaTypedDict(TypedDict):
    id: int
    r"""ID of the workspace"""
    name: str
    r"""Name of the workspace to be created"""
    status: str
    r"""Status of the workspace"""
    last_updated_at: datetime
    r"""Last Updated At of the workspace"""
    created_at: datetime
    r"""Created At"""
    total_users: int
    r"""Total Users in the workspace"""
    storage_used_in_bytes: int
    r"""Storage Used In Bytes of the workspace"""
    backend_domain_id: NotRequired[Nullable[int]]
    r"""Backend Domain of the workspace"""
    data_domain_host: NotRequired[Nullable[str]]
    r"""Data Domain Host of the workspace"""
    reports_domain_host: NotRequired[Nullable[str]]
    r"""Reports Domain Host of the workspace"""


class WorkspaceFullSchema(BaseModel):
    id: int
    r"""ID of the workspace"""

    name: str
    r"""Name of the workspace to be created"""

    status: str
    r"""Status of the workspace"""

    last_updated_at: datetime
    r"""Last Updated At of the workspace"""

    created_at: datetime
    r"""Created At"""

    total_users: int
    r"""Total Users in the workspace"""

    storage_used_in_bytes: int
    r"""Storage Used In Bytes of the workspace"""

    backend_domain_id: OptionalNullable[int] = UNSET
    r"""Backend Domain of the workspace"""

    data_domain_host: OptionalNullable[str] = UNSET
    r"""Data Domain Host of the workspace"""

    reports_domain_host: OptionalNullable[str] = UNSET
    r"""Reports Domain Host of the workspace"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "backend_domain_id",
            "data_domain_host",
            "reports_domain_host",
        ]
        nullable_fields = [
            "backend_domain_id",
            "data_domain_host",
            "reports_domain_host",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
