"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, List
from typing_extensions import NotRequired, TypedDict


class CustomerTypedDict(TypedDict):
    pass


class Customer(BaseModel):
    pass


class ItemsTypedDict(TypedDict):
    pass


class Items(BaseModel):
    pass


class StripeSubscriptionSchemaMetadataTypedDict(TypedDict):
    pass


class StripeSubscriptionSchemaMetadata(BaseModel):
    pass


class StripeSubscriptionSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[str]]
    object: NotRequired[Nullable[str]]
    status: NotRequired[Nullable[str]]
    created: NotRequired[Nullable[int]]
    current_period_start: NotRequired[Nullable[int]]
    current_period_end: NotRequired[Nullable[int]]
    cancel_at_period_end: NotRequired[Nullable[bool]]
    trial_start: NotRequired[Nullable[int]]
    trial_end: NotRequired[Nullable[int]]
    ended_at: NotRequired[Nullable[int]]
    canceled_at: NotRequired[Nullable[int]]
    customer: NotRequired[Nullable[CustomerTypedDict]]
    customer_id: NotRequired[Nullable[str]]
    items: NotRequired[Nullable[ItemsTypedDict]]
    metadata: NotRequired[Nullable[StripeSubscriptionSchemaMetadataTypedDict]]
    addons: NotRequired[Nullable[List[Any]]]
    plan_id: NotRequired[Nullable[str]]


class StripeSubscriptionSchema(BaseModel):
    id: OptionalNullable[str] = UNSET

    object: OptionalNullable[str] = UNSET

    status: OptionalNullable[str] = UNSET

    created: OptionalNullable[int] = UNSET

    current_period_start: OptionalNullable[int] = UNSET

    current_period_end: OptionalNullable[int] = UNSET

    cancel_at_period_end: OptionalNullable[bool] = False

    trial_start: OptionalNullable[int] = UNSET

    trial_end: OptionalNullable[int] = UNSET

    ended_at: OptionalNullable[int] = UNSET

    canceled_at: OptionalNullable[int] = UNSET

    customer: OptionalNullable[Customer] = UNSET

    customer_id: OptionalNullable[str] = UNSET

    items: OptionalNullable[Items] = UNSET

    metadata: OptionalNullable[StripeSubscriptionSchemaMetadata] = UNSET

    addons: OptionalNullable[List[Any]] = UNSET

    plan_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "object",
            "status",
            "created",
            "current_period_start",
            "current_period_end",
            "cancel_at_period_end",
            "trial_start",
            "trial_end",
            "ended_at",
            "canceled_at",
            "customer",
            "customer_id",
            "items",
            "metadata",
            "addons",
            "plan_id",
        ]
        nullable_fields = [
            "id",
            "object",
            "status",
            "created",
            "current_period_start",
            "current_period_end",
            "cancel_at_period_end",
            "trial_start",
            "trial_end",
            "ended_at",
            "canceled_at",
            "customer",
            "customer_id",
            "items",
            "metadata",
            "addons",
            "plan_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
