"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class AppUsageFieldSchemaTypedDict(TypedDict):
    storage_used: NotRequired[Nullable[int]]
    r"""Total storage used by the workspace"""
    current_storage_allowed: NotRequired[Nullable[int]]
    r"""Current storage allowed for the workspace"""
    plan_storage_value: NotRequired[Nullable[int]]
    r"""Initial storage offered by the plan"""
    max_storage_allowed: NotRequired[Nullable[int]]
    r"""Maximum storage allowed that can be allowed for the workspace with current plan and addons"""
    row_count_utilized: NotRequired[Nullable[int]]
    r"""Total row count utilized by the workspace"""
    current_row_count_allowed: NotRequired[Nullable[int]]
    r"""Current row count allowed for the workspace"""
    plan_row_count_value: NotRequired[Nullable[int]]
    r"""Initial row count offered by the plan"""
    max_row_count_allowed: NotRequired[Nullable[int]]
    r"""Maximum row count allowed that can be allowed for the workspace with current plan and addons"""


class AppUsageFieldSchema(BaseModel):
    storage_used: OptionalNullable[int] = UNSET
    r"""Total storage used by the workspace"""

    current_storage_allowed: OptionalNullable[int] = UNSET
    r"""Current storage allowed for the workspace"""

    plan_storage_value: OptionalNullable[int] = UNSET
    r"""Initial storage offered by the plan"""

    max_storage_allowed: OptionalNullable[int] = UNSET
    r"""Maximum storage allowed that can be allowed for the workspace with current plan and addons"""

    row_count_utilized: OptionalNullable[int] = UNSET
    r"""Total row count utilized by the workspace"""

    current_row_count_allowed: OptionalNullable[int] = UNSET
    r"""Current row count allowed for the workspace"""

    plan_row_count_value: OptionalNullable[int] = UNSET
    r"""Initial row count offered by the plan"""

    max_row_count_allowed: OptionalNullable[int] = UNSET
    r"""Maximum row count allowed that can be allowed for the workspace with current plan and addons"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "storage_used",
            "current_storage_allowed",
            "plan_storage_value",
            "max_storage_allowed",
            "row_count_utilized",
            "current_row_count_allowed",
            "plan_row_count_value",
            "max_row_count_allowed",
        ]
        nullable_fields = [
            "storage_used",
            "current_storage_allowed",
            "plan_storage_value",
            "max_storage_allowed",
            "row_count_utilized",
            "current_row_count_allowed",
            "plan_row_count_value",
            "max_row_count_allowed",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
