"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .genaidata import GenAIData, GenAIDataTypedDict
from .genaispec import GenAISpec, GenAISpecTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from pydantic import model_serializer
from typing import Any, Dict, List, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ModelType(str, Enum):
    OPENAI = "openai"
    GROQ = "groq"


class PreviewRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    gen_ai_spec: GenAISpecTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    sequence: NotRequired[Nullable[int]]
    r"""Sequence number of the dataview task"""
    model_type: NotRequired[Nullable[ModelType]]


class PreviewRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    gen_ai_spec: Annotated[
        GenAISpec, FieldMetadata(request=RequestMetadata(media_type="application/json"))
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    sequence: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Sequence number of the dataview task"""

    model_type: Annotated[
        OptionalNullable[ModelType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["sequence", "model_type"]
        nullable_fields = ["sequence", "model_type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PreviewExtra2TypedDict = TypeAliasType(
    "PreviewExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


PreviewExtra2 = TypeAliasType("PreviewExtra2", Union[Dict[str, Any], List[Any]])


PreviewExtra1TypedDict = TypeAliasType(
    "PreviewExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


PreviewExtra1 = TypeAliasType("PreviewExtra1", Union[Dict[str, Any], List[Any]])


class PreviewResponseBodyTypedDict(TypedDict):
    r"""Document created, URL follows"""


class PreviewResponseBody(BaseModel):
    r"""Document created, URL follows"""


PreviewResponseTypedDict = TypeAliasType(
    "PreviewResponseTypedDict", Union[PreviewResponseBodyTypedDict, GenAIDataTypedDict]
)


PreviewResponse = TypeAliasType(
    "PreviewResponse", Union[PreviewResponseBody, GenAIData]
)
