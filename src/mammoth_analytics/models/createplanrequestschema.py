"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .subscription_schemas_storagetierschema import (
    SubscriptionSchemasStorageTierSchema,
    SubscriptionSchemasStorageTierSchemaTypedDict,
)
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class CreatePlanRequestSchemaTypedDict(TypedDict):
    name: str
    r"""Plan name"""
    monthly_price: float
    r"""Monthly price in USD"""
    is_self_serve: bool
    r"""Whether users can self-subscribe"""
    description: NotRequired[Nullable[str]]
    r"""Plan description"""
    annual_price: NotRequired[Nullable[float]]
    r"""Annual price in USD"""
    annual_only: NotRequired[bool]
    r"""Whether plan is annual only"""
    trial_days: NotRequired[Nullable[int]]
    r"""Trial period in days"""
    storage_amount: NotRequired[int]
    r"""Included storage in GB"""
    max_storage: NotRequired[Nullable[int]]
    r"""Maximum storage in GB"""
    max_users: NotRequired[Nullable[int]]
    r"""Maximum number of users"""
    no_of_users: NotRequired[Nullable[int]]
    r"""Number of included users"""
    seat_price: NotRequired[Nullable[float]]
    r"""Price per additional user seat"""
    number_of_tiers: NotRequired[int]
    r"""Number of storage tiers"""
    storage_block_size: NotRequired[Nullable[int]]
    r"""Storage block size in GB"""
    tiers: NotRequired[Nullable[List[SubscriptionSchemasStorageTierSchemaTypedDict]]]
    r"""Storage pricing tiers"""
    connector_profile_id: NotRequired[Nullable[int]]
    r"""Connector profile ID"""
    feature_profile_id: NotRequired[Nullable[int]]
    r"""Feature profile ID"""


class CreatePlanRequestSchema(BaseModel):
    name: str
    r"""Plan name"""

    monthly_price: float
    r"""Monthly price in USD"""

    is_self_serve: bool
    r"""Whether users can self-subscribe"""

    description: OptionalNullable[str] = UNSET
    r"""Plan description"""

    annual_price: OptionalNullable[float] = UNSET
    r"""Annual price in USD"""

    annual_only: Optional[bool] = False
    r"""Whether plan is annual only"""

    trial_days: OptionalNullable[int] = UNSET
    r"""Trial period in days"""

    storage_amount: Optional[int] = 0
    r"""Included storage in GB"""

    max_storage: OptionalNullable[int] = UNSET
    r"""Maximum storage in GB"""

    max_users: OptionalNullable[int] = UNSET
    r"""Maximum number of users"""

    no_of_users: OptionalNullable[int] = UNSET
    r"""Number of included users"""

    seat_price: OptionalNullable[float] = UNSET
    r"""Price per additional user seat"""

    number_of_tiers: Optional[int] = 1
    r"""Number of storage tiers"""

    storage_block_size: OptionalNullable[int] = UNSET
    r"""Storage block size in GB"""

    tiers: OptionalNullable[List[SubscriptionSchemasStorageTierSchema]] = UNSET
    r"""Storage pricing tiers"""

    connector_profile_id: OptionalNullable[int] = UNSET
    r"""Connector profile ID"""

    feature_profile_id: OptionalNullable[int] = UNSET
    r"""Feature profile ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "annual_price",
            "annual_only",
            "trial_days",
            "storage_amount",
            "max_storage",
            "max_users",
            "no_of_users",
            "seat_price",
            "number_of_tiers",
            "storage_block_size",
            "tiers",
            "connector_profile_id",
            "feature_profile_id",
        ]
        nullable_fields = [
            "description",
            "annual_price",
            "trial_days",
            "max_storage",
            "max_users",
            "no_of_users",
            "seat_price",
            "storage_block_size",
            "tiers",
            "connector_profile_id",
            "feature_profile_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
