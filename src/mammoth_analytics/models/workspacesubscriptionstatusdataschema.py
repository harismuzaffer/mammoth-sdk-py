"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CheckoutInfoTypedDict(TypedDict):
    pass


class CheckoutInfo(BaseModel):
    pass


class WorkspaceSubscriptionStatusDataSchemaTypedDict(TypedDict):
    workspace_id: int
    has_active_subscription: bool
    needs_checkout: bool
    checkout_in_progress: bool
    subscription_status: NotRequired[Nullable[str]]
    stripe_subscription_id: NotRequired[Nullable[str]]
    stripe_customer_id: NotRequired[Nullable[str]]
    plan_id: NotRequired[Nullable[int]]
    billing_cycle: NotRequired[Nullable[str]]
    checkout_info: NotRequired[Nullable[CheckoutInfoTypedDict]]


class WorkspaceSubscriptionStatusDataSchema(BaseModel):
    workspace_id: int

    has_active_subscription: bool

    needs_checkout: bool

    checkout_in_progress: bool

    subscription_status: OptionalNullable[str] = UNSET

    stripe_subscription_id: OptionalNullable[str] = UNSET

    stripe_customer_id: OptionalNullable[str] = UNSET

    plan_id: OptionalNullable[int] = UNSET

    billing_cycle: OptionalNullable[str] = UNSET

    checkout_info: OptionalNullable[CheckoutInfo] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "subscription_status",
            "stripe_subscription_id",
            "stripe_customer_id",
            "plan_id",
            "billing_cycle",
            "checkout_info",
        ]
        nullable_fields = [
            "subscription_status",
            "stripe_subscription_id",
            "stripe_customer_id",
            "plan_id",
            "billing_cycle",
            "checkout_info",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
