"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .abstractsource import AbstractSource, AbstractSourceTypedDict
from .api_ds_schema_columnschema import (
    APIDsSchemaColumnSchema,
    APIDsSchemaColumnSchemaTypedDict,
)
from .displayinfo import DisplayInfo, DisplayInfoTypedDict
from .fileinfo import FileInfo, FileInfoTypedDict
from .internaldsinfo import InternalDsInfo, InternalDsInfoTypedDict
from .sketchsource import SketchSource, SketchSourceTypedDict
from .stats import Stats, StatsTypedDict
from .tpsourceinfo import TpSourceInfo, TpSourceInfoTypedDict
from .webhookinfo import WebhookInfo, WebhookInfoTypedDict
from .weburlinfo import WebURLInfo, WebURLInfoTypedDict
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Dict, List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class DsInfoStatus(str, Enum):
    r"""Dataset status"""

    READY = "ready"
    PROCESSING = "processing"
    DELETING = "deleting"
    DELETED = "deleted"
    ERROR = "error"
    NEED_ACTION = "need_action"


SourcesTypedDict = TypeAliasType(
    "SourcesTypedDict",
    Union[
        TpSourceInfoTypedDict,
        WebhookInfoTypedDict,
        InternalDsInfoTypedDict,
        SketchSourceTypedDict,
        WebURLInfoTypedDict,
        FileInfoTypedDict,
        AbstractSourceTypedDict,
    ],
)


Sources = TypeAliasType(
    "Sources",
    Union[
        TpSourceInfo,
        WebhookInfo,
        InternalDsInfo,
        SketchSource,
        WebURLInfo,
        FileInfo,
        AbstractSource,
    ],
)


class DependenciesTypedDict(TypedDict):
    pass


class Dependencies(BaseModel):
    pass


class ConfigurationsTypedDict(TypedDict):
    pass


class Configurations(BaseModel):
    pass


class DsInfoTypedDict(TypedDict):
    resource_path: NotRequired[Nullable[str]]
    r"""Resource Path"""
    id: NotRequired[Nullable[int]]
    r"""Dataset ID"""
    name: NotRequired[Nullable[str]]
    r"""Name of the dataset"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Dataset creation time"""
    created_by: NotRequired[Nullable[str]]
    r"""Dataset created by"""
    updated_at: NotRequired[Nullable[datetime]]
    r"""Dataset last update time"""
    status: NotRequired[Nullable[DsInfoStatus]]
    r"""Dataset status"""
    status_info: NotRequired[Nullable[Dict[str, str]]]
    r"""Additional Status of the dataset"""
    get_url: NotRequired[Nullable[str]]
    r"""Dataset URL"""
    data_schema: NotRequired[Nullable[List[APIDsSchemaColumnSchemaTypedDict]]]
    r"""Data Schema"""
    stats: NotRequired[Nullable[StatsTypedDict]]
    r"""Dataset Stats"""
    sources: NotRequired[Nullable[List[SourcesTypedDict]]]
    r"""Data Sources"""
    display_info: NotRequired[Nullable[DisplayInfoTypedDict]]
    r"""Display Info"""
    data_url: NotRequired[Nullable[str]]
    r"""Data URL"""
    dependencies: NotRequired[Nullable[DependenciesTypedDict]]
    r"""Dataset dependencies"""
    batch_ids: NotRequired[Nullable[List[int]]]
    r"""Batch IDs"""
    configurations: NotRequired[Nullable[ConfigurationsTypedDict]]
    r"""Configurations"""


class DsInfo(BaseModel):
    resource_path: OptionalNullable[str] = UNSET
    r"""Resource Path"""

    id: OptionalNullable[int] = UNSET
    r"""Dataset ID"""

    name: OptionalNullable[str] = UNSET
    r"""Name of the dataset"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Dataset creation time"""

    created_by: OptionalNullable[str] = UNSET
    r"""Dataset created by"""

    updated_at: OptionalNullable[datetime] = UNSET
    r"""Dataset last update time"""

    status: OptionalNullable[DsInfoStatus] = UNSET
    r"""Dataset status"""

    status_info: OptionalNullable[Dict[str, str]] = UNSET
    r"""Additional Status of the dataset"""

    get_url: OptionalNullable[str] = UNSET
    r"""Dataset URL"""

    data_schema: OptionalNullable[List[APIDsSchemaColumnSchema]] = UNSET
    r"""Data Schema"""

    stats: OptionalNullable[Stats] = UNSET
    r"""Dataset Stats"""

    sources: OptionalNullable[List[Sources]] = UNSET
    r"""Data Sources"""

    display_info: OptionalNullable[DisplayInfo] = UNSET
    r"""Display Info"""

    data_url: OptionalNullable[str] = UNSET
    r"""Data URL"""

    dependencies: OptionalNullable[Dependencies] = UNSET
    r"""Dataset dependencies"""

    batch_ids: OptionalNullable[List[int]] = UNSET
    r"""Batch IDs"""

    configurations: OptionalNullable[Configurations] = UNSET
    r"""Configurations"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "resource_path",
            "id",
            "name",
            "created_at",
            "created_by",
            "updated_at",
            "status",
            "status_info",
            "get_url",
            "data_schema",
            "stats",
            "sources",
            "display_info",
            "data_url",
            "dependencies",
            "batch_ids",
            "configurations",
        ]
        nullable_fields = [
            "resource_path",
            "id",
            "name",
            "created_at",
            "created_by",
            "updated_at",
            "status",
            "status_info",
            "get_url",
            "data_schema",
            "stats",
            "sources",
            "display_info",
            "data_url",
            "dependencies",
            "batch_ids",
            "configurations",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
