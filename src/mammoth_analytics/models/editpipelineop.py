"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jobresponse import JobResponse, JobResponseTypedDict
from .pipelineautorunresp import PipelineAutoRunResp, PipelineAutoRunRespTypedDict
from .pipelineexortsmodificationresp import (
    PipelineExortsModificationResp,
    PipelineExortsModificationRespTypedDict,
)
from .pipelinemodificationresp import (
    PipelineModificationResp,
    PipelineModificationRespTypedDict,
)
from .pipelinepatches import PipelinePatches, PipelinePatchesTypedDict
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class EditPipelineRequestTypedDict(TypedDict):
    dataset_id: int
    r"""Id of the dataset"""
    pipeline_patches: PipelinePatchesTypedDict
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    dataview_id: int
    r"""Dataview ID of the dataset"""
    skip_validation: NotRequired[bool]
    force_run: NotRequired[bool]


class EditPipelineRequest(BaseModel):
    dataset_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Id of the dataset"""

    pipeline_patches: Annotated[
        PipelinePatches,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    dataview_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 4
    r"""Dataview ID of the dataset"""

    skip_validation: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False

    force_run: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False


EditPipelineNotFoundExtraTypedDict = TypeAliasType(
    "EditPipelineNotFoundExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


EditPipelineNotFoundExtra = TypeAliasType(
    "EditPipelineNotFoundExtra", Union[Dict[str, Any], List[Any]]
)


EditPipelineBadRequestExtra2TypedDict = TypeAliasType(
    "EditPipelineBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


EditPipelineBadRequestExtra2 = TypeAliasType(
    "EditPipelineBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


EditPipelineBadRequestExtra1TypedDict = TypeAliasType(
    "EditPipelineBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


EditPipelineBadRequestExtra1 = TypeAliasType(
    "EditPipelineBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)


EditPipelineResponseBodyTypedDict = TypeAliasType(
    "EditPipelineResponseBodyTypedDict",
    Union[
        PipelineAutoRunRespTypedDict,
        PipelineModificationRespTypedDict,
        List[PipelineExortsModificationRespTypedDict],
    ],
)
r"""Successful patch"""


EditPipelineResponseBody = TypeAliasType(
    "EditPipelineResponseBody",
    Union[
        PipelineAutoRunResp,
        PipelineModificationResp,
        List[PipelineExortsModificationResp],
    ],
)
r"""Successful patch"""


EditPipelineResponseTypedDict = TypeAliasType(
    "EditPipelineResponseTypedDict",
    Union[JobResponseTypedDict, EditPipelineResponseBodyTypedDict],
)


EditPipelineResponse = TypeAliasType(
    "EditPipelineResponse", Union[JobResponse, EditPipelineResponseBody]
)
