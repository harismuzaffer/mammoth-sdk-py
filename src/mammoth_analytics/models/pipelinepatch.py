"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .patchvaluebulkops import PatchValueBulkOps, PatchValueBulkOpsTypedDict
from .patchvaluereorder import PatchValueReorder, PatchValueReorderTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class PipelinePatchOp(str, Enum):
    r"""Operation e.g. replace, command etc"""

    REPLACE = "replace"
    COMMAND = "command"


class PipelinePatchPath(str, Enum):
    r"""Path to the resource being modified"""

    AUTO_RUN = "auto_run"
    RUN = "run"
    SUBMIT_CHANGES = "submit-changes"
    RESET = "reset"
    DISCARD_CHANGES = "discard-changes"
    SUSPEND = "suspend"
    RESTORE = "restore"
    DISCARD = "discard"
    REORDER = "reorder"


PipelinePatchValueTypedDict = TypeAliasType(
    "PipelinePatchValueTypedDict",
    Union[PatchValueReorderTypedDict, PatchValueBulkOpsTypedDict, bool],
)
r"""Patch value, the path of the resource to modified with"""


PipelinePatchValue = TypeAliasType(
    "PipelinePatchValue", Union[PatchValueReorder, PatchValueBulkOps, bool]
)
r"""Patch value, the path of the resource to modified with"""


class PipelinePatchTypedDict(TypedDict):
    op: PipelinePatchOp
    r"""Operation e.g. replace, command etc"""
    path: PipelinePatchPath
    r"""Path to the resource being modified"""
    value: NotRequired[Nullable[PipelinePatchValueTypedDict]]
    r"""Patch value, the path of the resource to modified with"""


class PipelinePatch(BaseModel):
    op: PipelinePatchOp
    r"""Operation e.g. replace, command etc"""

    path: PipelinePatchPath
    r"""Path to the resource being modified"""

    value: OptionalNullable[PipelinePatchValue] = UNSET
    r"""Patch value, the path of the resource to modified with"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
