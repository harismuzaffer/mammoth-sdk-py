"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ClientAppCreateTypedDict(TypedDict):
    r"""Details of the app to be created"""

    app_name: str
    r"""Name of client app or api tokens"""
    description: str
    r"""Description of client app or api tokens"""
    api_key: str
    r"""App key of client app or api tokens"""
    api_secret: str
    r"""App Secret of client app or api tokens"""
    encrypted_key: str
    r"""Encrypted keyof client app or api tokens"""
    encrypted_secret: str
    r"""Encrypted secret of client app or api tokens"""
    project_id: NotRequired[Nullable[int]]
    r"""Project ID"""


class ClientAppCreate(BaseModel):
    r"""Details of the app to be created"""

    app_name: str
    r"""Name of client app or api tokens"""

    description: str
    r"""Description of client app or api tokens"""

    api_key: str
    r"""App key of client app or api tokens"""

    api_secret: str
    r"""App Secret of client app or api tokens"""

    encrypted_key: str
    r"""Encrypted keyof client app or api tokens"""

    encrypted_secret: str
    r"""Encrypted secret of client app or api tokens"""

    project_id: OptionalNullable[int] = UNSET
    r"""Project ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["project_id"]
        nullable_fields = ["project_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
