"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .api_ds_schema_columnschema import (
    APIDsSchemaColumnSchema,
    APIDsSchemaColumnSchemaTypedDict,
)
from .apipostdsbatchsource import APIPostDsBatchSource, APIPostDsBatchSourceTypedDict
from .batchdescriptioncloud import BatchDescriptionCloud, BatchDescriptionCloudTypedDict
from .batchdescriptionfile import BatchDescriptionFile, BatchDescriptionFileTypedDict
from .branchinbatchsource import BranchInBatchSource, BranchInBatchSourceTypedDict
from .clouddsbatchsource import CloudDsBatchSource, CloudDsBatchSourceTypedDict
from .duplicateorcombinedsbatchsource import (
    DuplicateOrCombineDsBatchSource,
    DuplicateOrCombineDsBatchSourceTypedDict,
)
from .filedsbatchsource import FileDsBatchSource, FileDsBatchSourceTypedDict
from .projectbranchinbatchsource import (
    ProjectBranchInBatchSource,
    ProjectBranchInBatchSourceTypedDict,
)
from .webhookdsbatchsource import WebhookDsBatchSource, WebhookDsBatchSourceTypedDict
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class DescriptionTypedDict(TypedDict):
    pass


class Description(BaseModel):
    pass


DescriptionUnionTypedDict = TypeAliasType(
    "DescriptionUnionTypedDict",
    Union[
        DescriptionTypedDict,
        BatchDescriptionFileTypedDict,
        BatchDescriptionCloudTypedDict,
    ],
)
r"""Batch Description"""


DescriptionUnion = TypeAliasType(
    "DescriptionUnion", Union[Description, BatchDescriptionFile, BatchDescriptionCloud]
)
r"""Batch Description"""


SourceTypedDict = TypeAliasType(
    "SourceTypedDict",
    Union[
        WebhookDsBatchSourceTypedDict,
        APIPostDsBatchSourceTypedDict,
        FileDsBatchSourceTypedDict,
        DuplicateOrCombineDsBatchSourceTypedDict,
        CloudDsBatchSourceTypedDict,
        BranchInBatchSourceTypedDict,
        ProjectBranchInBatchSourceTypedDict,
    ],
)
r"""Batch Source"""


Source = TypeAliasType(
    "Source",
    Union[
        WebhookDsBatchSource,
        APIPostDsBatchSource,
        FileDsBatchSource,
        DuplicateOrCombineDsBatchSource,
        CloudDsBatchSource,
        BranchInBatchSource,
        ProjectBranchInBatchSource,
    ],
)
r"""Batch Source"""


class BatchInfoSchemaState(str, Enum):
    r"""Batch State"""

    ACTIVE = "active"
    SYNC_PENDING = "sync_pending"
    SUSPENDED = "suspended"
    DELETING = "deleting"


class BatchInfoSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""Batch ID"""
    description: NotRequired[Nullable[DescriptionUnionTypedDict]]
    r"""Batch Description"""
    column_count: NotRequired[Nullable[int]]
    r"""Column Count"""
    row_count: NotRequired[Nullable[int]]
    r"""Row Count"""
    source: NotRequired[Nullable[SourceTypedDict]]
    r"""Batch Source"""
    name: NotRequired[Nullable[str]]
    r"""Batch Name"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Batch Creation Time"""
    state: NotRequired[Nullable[BatchInfoSchemaState]]
    r"""Batch State"""
    data_schema: NotRequired[Nullable[List[APIDsSchemaColumnSchemaTypedDict]]]
    r"""Data Schema"""


class BatchInfoSchema(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""Batch ID"""

    description: OptionalNullable[DescriptionUnion] = UNSET
    r"""Batch Description"""

    column_count: OptionalNullable[int] = UNSET
    r"""Column Count"""

    row_count: OptionalNullable[int] = UNSET
    r"""Row Count"""

    source: OptionalNullable[Source] = UNSET
    r"""Batch Source"""

    name: OptionalNullable[str] = UNSET
    r"""Batch Name"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Batch Creation Time"""

    state: OptionalNullable[BatchInfoSchemaState] = UNSET
    r"""Batch State"""

    data_schema: OptionalNullable[List[APIDsSchemaColumnSchema]] = UNSET
    r"""Data Schema"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "description",
            "column_count",
            "row_count",
            "source",
            "name",
            "created_at",
            "state",
            "data_schema",
        ]
        nullable_fields = [
            "id",
            "description",
            "column_count",
            "row_count",
            "source",
            "name",
            "created_at",
            "state",
            "data_schema",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
