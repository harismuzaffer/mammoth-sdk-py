"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .columnidmapping import ColumnIDMapping, ColumnIDMappingTypedDict
from .columnnamemapping import ColumnNameMapping, ColumnNameMappingTypedDict
from .newdsdetails import NewDsDetails, NewDsDetailsTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


MappingTypedDict = TypeAliasType(
    "MappingTypedDict",
    Union[List[ColumnIDMappingTypedDict], List[ColumnNameMappingTypedDict]],
)


Mapping = TypeAliasType(
    "Mapping", Union[List[ColumnIDMapping], List[ColumnNameMapping]]
)


class BatchesPostRequestTypedDict(TypedDict):
    r"""Specs for new batch to be created"""

    source_id: int
    r"""Source dataset id"""
    mapping: MappingTypedDict
    validate_only: bool
    r"""Validation required"""
    delete_source_ds: bool
    r"""Delete source dataset"""
    new_ds_details: NotRequired[Nullable[NewDsDetailsTypedDict]]
    r"""New dataset details"""


class BatchesPostRequest(BaseModel):
    r"""Specs for new batch to be created"""

    source_id: int
    r"""Source dataset id"""

    mapping: Mapping

    validate_only: bool
    r"""Validation required"""

    delete_source_ds: bool
    r"""Delete source dataset"""

    new_ds_details: OptionalNullable[NewDsDetails] = UNSET
    r"""New dataset details"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["new_ds_details"]
        nullable_fields = ["new_ds_details"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
