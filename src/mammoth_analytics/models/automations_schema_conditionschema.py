"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class AutomationsSchemaConditionSchemaFrequency(str, Enum):
    r"""Frequency"""

    MINUTELY = "minutely"
    HOURLY = "hourly"
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    YEARLY = "yearly"


class AutomationsSchemaConditionSchemaByWeekDay(str, Enum):
    MO = "mo"
    TU = "tu"
    WE = "we"
    TH = "th"
    FR = "fr"
    SA = "sa"
    SU = "su"


class AutomationsSchemaConditionSchemaTypedDict(TypedDict):
    r"""Condition Details"""

    file_contains: str
    r"""Name Contains"""
    interval: NotRequired[Nullable[int]]
    r"""Interval"""
    frequency: NotRequired[Nullable[AutomationsSchemaConditionSchemaFrequency]]
    r"""Frequency"""
    start_at: NotRequired[Nullable[datetime]]
    r"""Start At"""
    until: NotRequired[Nullable[datetime]]
    r"""Until"""
    by_month_day: NotRequired[Nullable[List[int]]]
    r"""By Month Day"""
    by_week_day: NotRequired[Nullable[List[AutomationsSchemaConditionSchemaByWeekDay]]]
    r"""By Week Day"""
    start_now: NotRequired[bool]
    r"""start now/later"""


class AutomationsSchemaConditionSchema(BaseModel):
    r"""Condition Details"""

    file_contains: str
    r"""Name Contains"""

    interval: OptionalNullable[int] = UNSET
    r"""Interval"""

    frequency: OptionalNullable[AutomationsSchemaConditionSchemaFrequency] = UNSET
    r"""Frequency"""

    start_at: OptionalNullable[datetime] = UNSET
    r"""Start At"""

    until: OptionalNullable[datetime] = UNSET
    r"""Until"""

    by_month_day: OptionalNullable[List[int]] = UNSET
    r"""By Month Day"""

    by_week_day: OptionalNullable[List[AutomationsSchemaConditionSchemaByWeekDay]] = (
        UNSET
    )
    r"""By Week Day"""

    start_now: Optional[bool] = True
    r"""start now/later"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "interval",
            "frequency",
            "start_at",
            "until",
            "by_month_day",
            "by_week_day",
            "start_now",
        ]
        nullable_fields = [
            "interval",
            "frequency",
            "start_at",
            "until",
            "by_month_day",
            "by_week_day",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
