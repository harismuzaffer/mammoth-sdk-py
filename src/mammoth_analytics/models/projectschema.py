"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class PropertiesTypedDict(TypedDict):
    pass


class Properties(BaseModel):
    pass


class ProjectSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""unique identifier representing project"""
    name: NotRequired[Nullable[str]]
    r"""Name of project"""
    owner_workspace_id: NotRequired[Nullable[int]]
    r"""Parent Workspace id"""
    updated_at: NotRequired[Nullable[datetime]]
    r"""Time when last update to project has happened"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Time when project was created"""
    status: NotRequired[Nullable[str]]
    r"""Status of project"""
    properties: NotRequired[Nullable[PropertiesTypedDict]]
    r"""Properties of project"""


class ProjectSchema(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""unique identifier representing project"""

    name: OptionalNullable[str] = UNSET
    r"""Name of project"""

    owner_workspace_id: OptionalNullable[int] = UNSET
    r"""Parent Workspace id"""

    updated_at: OptionalNullable[datetime] = UNSET
    r"""Time when last update to project has happened"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Time when project was created"""

    status: OptionalNullable[str] = UNSET
    r"""Status of project"""

    properties: OptionalNullable[Properties] = UNSET
    r"""Properties of project"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "name",
            "owner_workspace_id",
            "updated_at",
            "created_at",
            "status",
            "properties",
        ]
        nullable_fields = [
            "id",
            "name",
            "owner_workspace_id",
            "updated_at",
            "created_at",
            "status",
            "properties",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
