"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, Dict, List
from typing_extensions import NotRequired, TypedDict


class SelfFieldSchemaUserRolesTypedDict(TypedDict):
    pass


class SelfFieldSchemaUserRoles(BaseModel):
    pass


class SelfFieldSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""ID of the user"""
    email: NotRequired[Nullable[str]]
    r"""Email of the user"""
    first_name: NotRequired[Nullable[str]]
    r"""First name of the user"""
    updated_at: NotRequired[Nullable[datetime]]
    r"""Last updated at"""
    last_name: NotRequired[Nullable[str]]
    r"""Conner"""
    last_login_date: NotRequired[Nullable[datetime]]
    r"""Last login date"""
    last_app_activity_at: NotRequired[Nullable[datetime]]
    r"""Last app activity at"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Created at"""
    last_login_from_ip: NotRequired[Nullable[str]]
    r"""Last login from IP"""
    profile_link: NotRequired[Nullable[str]]
    r"""Profile link"""
    user_roles: NotRequired[Nullable[Dict[str, SelfFieldSchemaUserRolesTypedDict]]]
    r"""User roles on workspaces and projects"""
    mfa_enabled: NotRequired[Nullable[bool]]
    r"""Is MFA enabled"""
    workspaces: NotRequired[Nullable[List[Any]]]
    r"""Workspaces"""
    projects: NotRequired[Nullable[List[Any]]]
    r"""Projects"""


class SelfFieldSchema(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""ID of the user"""

    email: OptionalNullable[str] = UNSET
    r"""Email of the user"""

    first_name: OptionalNullable[str] = UNSET
    r"""First name of the user"""

    updated_at: OptionalNullable[datetime] = UNSET
    r"""Last updated at"""

    last_name: OptionalNullable[str] = UNSET
    r"""Conner"""

    last_login_date: OptionalNullable[datetime] = UNSET
    r"""Last login date"""

    last_app_activity_at: OptionalNullable[datetime] = UNSET
    r"""Last app activity at"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Created at"""

    last_login_from_ip: OptionalNullable[str] = UNSET
    r"""Last login from IP"""

    profile_link: OptionalNullable[str] = UNSET
    r"""Profile link"""

    user_roles: OptionalNullable[Dict[str, SelfFieldSchemaUserRoles]] = UNSET
    r"""User roles on workspaces and projects"""

    mfa_enabled: OptionalNullable[bool] = UNSET
    r"""Is MFA enabled"""

    workspaces: OptionalNullable[List[Any]] = UNSET
    r"""Workspaces"""

    projects: OptionalNullable[List[Any]] = UNSET
    r"""Projects"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "email",
            "first_name",
            "updated_at",
            "last_name",
            "last_login_date",
            "last_app_activity_at",
            "created_at",
            "last_login_from_ip",
            "profile_link",
            "user_roles",
            "mfa_enabled",
            "workspaces",
            "projects",
        ]
        nullable_fields = [
            "id",
            "email",
            "first_name",
            "updated_at",
            "last_name",
            "last_login_date",
            "last_app_activity_at",
            "created_at",
            "last_login_from_ip",
            "profile_link",
            "user_roles",
            "mfa_enabled",
            "workspaces",
            "projects",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
