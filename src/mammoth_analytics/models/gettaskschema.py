"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class GetTaskSchemaLastRunResultTypedDict(TypedDict):
    pass


class GetTaskSchemaLastRunResult(BaseModel):
    pass


class GetTaskSchemaTypedDict(TypedDict):
    r"""Task Details"""

    id: int
    r"""Automation task ID"""
    status: str
    r"""Status"""
    ds_id: NotRequired[Nullable[int]]
    r"""Dataset ID"""
    recurrence_ids: NotRequired[Nullable[List[int]]]
    r"""Recurrence IDs"""
    destination_dataset_ids: NotRequired[Nullable[List[int]]]
    r"""Destination Dataset IDs"""
    source_folder_resource_id: NotRequired[Nullable[int]]
    r"""Source Folder Resource ID"""
    source_dataset_id: NotRequired[Nullable[int]]
    r"""Source Dataset ID"""
    last_run: NotRequired[Nullable[datetime]]
    r"""Last Run"""
    last_run_result: NotRequired[Nullable[GetTaskSchemaLastRunResultTypedDict]]
    r"""Last Run Result"""


class GetTaskSchema(BaseModel):
    r"""Task Details"""

    id: int
    r"""Automation task ID"""

    status: str
    r"""Status"""

    ds_id: OptionalNullable[int] = UNSET
    r"""Dataset ID"""

    recurrence_ids: OptionalNullable[List[int]] = UNSET
    r"""Recurrence IDs"""

    destination_dataset_ids: OptionalNullable[List[int]] = UNSET
    r"""Destination Dataset IDs"""

    source_folder_resource_id: OptionalNullable[int] = UNSET
    r"""Source Folder Resource ID"""

    source_dataset_id: OptionalNullable[int] = UNSET
    r"""Source Dataset ID"""

    last_run: OptionalNullable[datetime] = UNSET
    r"""Last Run"""

    last_run_result: OptionalNullable[GetTaskSchemaLastRunResult] = UNSET
    r"""Last Run Result"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "ds_id",
            "recurrence_ids",
            "destination_dataset_ids",
            "source_folder_resource_id",
            "source_dataset_id",
            "last_run",
            "last_run_result",
        ]
        nullable_fields = [
            "ds_id",
            "recurrence_ids",
            "destination_dataset_ids",
            "source_folder_resource_id",
            "source_dataset_id",
            "last_run",
            "last_run_result",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
