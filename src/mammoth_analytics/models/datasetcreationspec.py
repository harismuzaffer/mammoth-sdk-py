"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createsketchdataset import CreateSketchDataset, CreateSketchDatasetTypedDict
from .createthirdpartydataset import (
    CreateThirdPartyDataset,
    CreateThirdPartyDatasetTypedDict,
)
from .createweburldataset import CreateWeburlDataset, CreateWeburlDatasetTypedDict
from .duplicatedataset import DuplicateDataset, DuplicateDatasetTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class DsCreationType(str, Enum):
    r"""Dataset Creation Type"""

    CLONE = "clone"
    CLOUD = "cloud"
    SKETCH = "sketch"
    WEBURL = "weburl"


DatasetSpecTypedDict = TypeAliasType(
    "DatasetSpecTypedDict",
    Union[
        CreateWeburlDatasetTypedDict,
        DuplicateDatasetTypedDict,
        CreateSketchDatasetTypedDict,
        CreateThirdPartyDatasetTypedDict,
    ],
)
r"""Dataset Specification"""


DatasetSpec = TypeAliasType(
    "DatasetSpec",
    Union[
        CreateWeburlDataset,
        DuplicateDataset,
        CreateSketchDataset,
        CreateThirdPartyDataset,
    ],
)
r"""Dataset Specification"""


class DatasetCreationSpecTypedDict(TypedDict):
    r"""A task specification"""

    ds_creation_type: DsCreationType
    r"""Dataset Creation Type"""
    dataset_spec: DatasetSpecTypedDict
    r"""Dataset Specification"""
    folder_resource_id: NotRequired[Nullable[str]]
    r"""Folder Resource ID"""


class DatasetCreationSpec(BaseModel):
    r"""A task specification"""

    ds_creation_type: DsCreationType
    r"""Dataset Creation Type"""

    dataset_spec: DatasetSpec
    r"""Dataset Specification"""

    folder_resource_id: OptionalNullable[str] = UNSET
    r"""Folder Resource ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["folder_resource_id"]
        nullable_fields = ["folder_resource_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
