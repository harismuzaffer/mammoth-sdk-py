"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class BatchDescriptionCloudTypedDict(TypedDict):
    space_id: NotRequired[Nullable[int]]
    r"""Space ID"""
    from_date: NotRequired[Nullable[datetime]]
    r"""From Date"""
    to_date: NotRequired[Nullable[datetime]]
    r"""To Date"""
    data_file_path: NotRequired[Nullable[str]]
    r"""Data File Path"""
    on_refresh_action: NotRequired[Nullable[str]]
    r"""On Refresh Action"""


class BatchDescriptionCloud(BaseModel):
    space_id: OptionalNullable[int] = UNSET
    r"""Space ID"""

    from_date: OptionalNullable[datetime] = UNSET
    r"""From Date"""

    to_date: OptionalNullable[datetime] = UNSET
    r"""To Date"""

    data_file_path: OptionalNullable[str] = UNSET
    r"""Data File Path"""

    on_refresh_action: OptionalNullable[str] = UNSET
    r"""On Refresh Action"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "space_id",
            "from_date",
            "to_date",
            "data_file_path",
            "on_refresh_action",
        ]
        nullable_fields = [
            "space_id",
            "from_date",
            "to_date",
            "data_file_path",
            "on_refresh_action",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
