"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .connectorprofileschema import (
    ConnectorProfileSchema,
    ConnectorProfileSchemaTypedDict,
)
from .featureprofileschema import FeatureProfileSchema, FeatureProfileSchemaTypedDict
from .schema_storagetierschema import (
    SchemaStorageTierSchema,
    SchemaStorageTierSchemaTypedDict,
)
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class PlanSchemaTypedDict(TypedDict):
    id: int
    name: str
    currency: str
    storage_amount: int
    is_self_serve: bool
    number_of_tiers: int
    status: str
    subscription_count: int
    description: NotRequired[Nullable[str]]
    monthly_price: NotRequired[Nullable[float]]
    annual_only: NotRequired[bool]
    r"""Indicates if the plan is annual-only."""
    annual_price: NotRequired[Nullable[float]]
    storage_block_size: NotRequired[Nullable[int]]
    r"""Block size for storage increments."""
    trial_days: NotRequired[Nullable[int]]
    max_storage: NotRequired[Nullable[int]]
    max_users: NotRequired[Nullable[int]]
    no_of_users: NotRequired[Nullable[int]]
    seat_price: NotRequired[Nullable[int]]
    tiers: NotRequired[Nullable[List[SchemaStorageTierSchemaTypedDict]]]
    connector_profile_id: NotRequired[Nullable[int]]
    feature_profile_id: NotRequired[Nullable[int]]
    stripe_product_id: NotRequired[Nullable[str]]
    stripe_monthly_price_id: NotRequired[Nullable[str]]
    stripe_annual_price_id: NotRequired[Nullable[str]]
    created_at: NotRequired[Nullable[str]]
    updated_at: NotRequired[Nullable[str]]
    connector_profile: NotRequired[Nullable[ConnectorProfileSchemaTypedDict]]
    feature_profile: NotRequired[Nullable[FeatureProfileSchemaTypedDict]]


class PlanSchema(BaseModel):
    id: int

    name: str

    currency: str

    storage_amount: int

    is_self_serve: bool

    number_of_tiers: int

    status: str

    subscription_count: int

    description: OptionalNullable[str] = UNSET

    monthly_price: OptionalNullable[float] = UNSET

    annual_only: Optional[bool] = False
    r"""Indicates if the plan is annual-only."""

    annual_price: OptionalNullable[float] = UNSET

    storage_block_size: OptionalNullable[int] = UNSET
    r"""Block size for storage increments."""

    trial_days: OptionalNullable[int] = UNSET

    max_storage: OptionalNullable[int] = UNSET

    max_users: OptionalNullable[int] = UNSET

    no_of_users: OptionalNullable[int] = UNSET

    seat_price: OptionalNullable[int] = UNSET

    tiers: OptionalNullable[List[SchemaStorageTierSchema]] = UNSET

    connector_profile_id: OptionalNullable[int] = UNSET

    feature_profile_id: OptionalNullable[int] = UNSET

    stripe_product_id: OptionalNullable[str] = UNSET

    stripe_monthly_price_id: OptionalNullable[str] = UNSET

    stripe_annual_price_id: OptionalNullable[str] = UNSET

    created_at: OptionalNullable[str] = UNSET

    updated_at: OptionalNullable[str] = UNSET

    connector_profile: OptionalNullable[ConnectorProfileSchema] = UNSET

    feature_profile: OptionalNullable[FeatureProfileSchema] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "monthly_price",
            "annual_only",
            "annual_price",
            "storage_block_size",
            "trial_days",
            "max_storage",
            "max_users",
            "no_of_users",
            "seat_price",
            "tiers",
            "connector_profile_id",
            "feature_profile_id",
            "stripe_product_id",
            "stripe_monthly_price_id",
            "stripe_annual_price_id",
            "created_at",
            "updated_at",
            "connector_profile",
            "feature_profile",
        ]
        nullable_fields = [
            "description",
            "monthly_price",
            "annual_price",
            "storage_block_size",
            "trial_days",
            "max_storage",
            "max_users",
            "no_of_users",
            "seat_price",
            "tiers",
            "connector_profile_id",
            "feature_profile_id",
            "stripe_product_id",
            "stripe_monthly_price_id",
            "stripe_annual_price_id",
            "created_at",
            "updated_at",
            "connector_profile",
            "feature_profile",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
