"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .workspacefieldschema import WorkspaceFieldSchema, WorkspaceFieldSchemaTypedDict
from .workspacefullschema import WorkspaceFullSchema, WorkspaceFullSchemaTypedDict
from .workspaceminschema import WorkspaceMinSchema, WorkspaceMinSchemaTypedDict
from .workspacestdschema import WorkspaceStdSchema, WorkspaceStdSchemaTypedDict
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


WorkspacesTypedDict = TypeAliasType(
    "WorkspacesTypedDict",
    Union[
        List[WorkspaceMinSchemaTypedDict],
        List[WorkspaceStdSchemaTypedDict],
        List[WorkspaceFullSchemaTypedDict],
        List[WorkspaceFieldSchemaTypedDict],
    ],
)


Workspaces = TypeAliasType(
    "Workspaces",
    Union[
        List[WorkspaceMinSchema],
        List[WorkspaceStdSchema],
        List[WorkspaceFullSchema],
        List[WorkspaceFieldSchema],
    ],
)


class WorkspaceListTypedDict(TypedDict):
    workspaces: NotRequired[Nullable[WorkspacesTypedDict]]
    offset: NotRequired[Nullable[int]]
    limit: NotRequired[Nullable[int]]
    next: NotRequired[Nullable[str]]
    r"""URI for next page of data"""


class WorkspaceList(BaseModel):
    workspaces: OptionalNullable[Workspaces] = UNSET

    offset: OptionalNullable[int] = 0

    limit: OptionalNullable[int] = 50

    next: OptionalNullable[str] = UNSET
    r"""URI for next page of data"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["workspaces", "offset", "limit", "next"]
        nullable_fields = ["workspaces", "offset", "limit", "next"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
