"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .taskdetailsschema import TaskDetailsSchema, TaskDetailsSchemaTypedDict
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class AutomationTaskSchemaTaskType(str, Enum):
    r"""Task type"""

    RUN_DATA_RETRIEVAL = "run_data_retrieval"
    APPEND_DATA = "append_data"


class AutomationTaskSchemaConditionTypedDict(TypedDict):
    pass


class AutomationTaskSchemaCondition(BaseModel):
    pass


class AutomationTaskSchemaTypedDict(TypedDict):
    task_type: NotRequired[Nullable[AutomationTaskSchemaTaskType]]
    r"""Task type"""
    details: NotRequired[Nullable[TaskDetailsSchemaTypedDict]]
    r"""Task Details"""
    conditions: NotRequired[List[AutomationTaskSchemaConditionTypedDict]]
    r"""Conditions"""


class AutomationTaskSchema(BaseModel):
    task_type: OptionalNullable[AutomationTaskSchemaTaskType] = UNSET
    r"""Task type"""

    details: OptionalNullable[TaskDetailsSchema] = UNSET
    r"""Task Details"""

    conditions: Optional[List[AutomationTaskSchemaCondition]] = None
    r"""Conditions"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["task_type", "details", "conditions"]
        nullable_fields = ["task_type", "details"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
