"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class UserSchemaUserRolesTypedDict(TypedDict):
    pass


class UserSchemaUserRoles(BaseModel):
    pass


class UserSchemaTypedDict(TypedDict):
    id: NotRequired[Nullable[int]]
    r"""ID of the user"""
    email: NotRequired[Nullable[str]]
    r"""Email of the user"""
    first_name: NotRequired[Nullable[str]]
    r"""First name of the user"""
    last_name: NotRequired[Nullable[str]]
    r"""Last name of the user"""
    last_login_date: NotRequired[Nullable[datetime]]
    r"""Last Login of the user"""
    last_active_date: NotRequired[Nullable[datetime]]
    r"""Last Active of the user"""
    user_roles: NotRequired[Nullable[UserSchemaUserRolesTypedDict]]
    r"""User Roles of the user"""
    last_login_from_ip: NotRequired[Nullable[str]]
    r"""Last Login From IP of the user"""
    created_at: NotRequired[Nullable[datetime]]
    r"""Time when user was created"""
    updated_at: NotRequired[Nullable[datetime]]
    r"""Time when users properties were updated"""
    profile_link: NotRequired[Nullable[str]]
    r"""Profile Link of the user"""
    status: NotRequired[Nullable[int]]


class UserSchema(BaseModel):
    id: OptionalNullable[int] = UNSET
    r"""ID of the user"""

    email: OptionalNullable[str] = UNSET
    r"""Email of the user"""

    first_name: OptionalNullable[str] = UNSET
    r"""First name of the user"""

    last_name: OptionalNullable[str] = UNSET
    r"""Last name of the user"""

    last_login_date: OptionalNullable[datetime] = UNSET
    r"""Last Login of the user"""

    last_active_date: OptionalNullable[datetime] = UNSET
    r"""Last Active of the user"""

    user_roles: OptionalNullable[UserSchemaUserRoles] = UNSET
    r"""User Roles of the user"""

    last_login_from_ip: OptionalNullable[str] = UNSET
    r"""Last Login From IP of the user"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""Time when user was created"""

    updated_at: OptionalNullable[datetime] = UNSET
    r"""Time when users properties were updated"""

    profile_link: OptionalNullable[str] = UNSET
    r"""Profile Link of the user"""

    status: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "email",
            "first_name",
            "last_name",
            "last_login_date",
            "last_active_date",
            "user_roles",
            "last_login_from_ip",
            "created_at",
            "updated_at",
            "profile_link",
            "status",
        ]
        nullable_fields = [
            "id",
            "email",
            "first_name",
            "last_name",
            "last_login_date",
            "last_active_date",
            "user_roles",
            "last_login_from_ip",
            "created_at",
            "updated_at",
            "profile_link",
            "status",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
