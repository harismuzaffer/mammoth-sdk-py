"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ValidateAndSampleDataSpecTypedDict(TypedDict):
    r"""Details of the dataset to be created"""

    profile: NotRequired[Nullable[str]]
    r"""Profile of the selected connection"""
    query: NotRequired[Nullable[str]]
    r"""Query to fetch data from cloud"""
    table: NotRequired[Nullable[str]]
    r"""Name of the Table"""
    validate_: NotRequired[bool]
    r"""Validate"""
    data_sample: NotRequired[bool]
    r"""Sample data flag"""
    file_source: NotRequired[Nullable[str]]
    r"""Source path of the file"""


class ValidateAndSampleDataSpec(BaseModel):
    r"""Details of the dataset to be created"""

    profile: OptionalNullable[str] = UNSET
    r"""Profile of the selected connection"""

    query: OptionalNullable[str] = UNSET
    r"""Query to fetch data from cloud"""

    table: OptionalNullable[str] = UNSET
    r"""Name of the Table"""

    validate_: Annotated[Optional[bool], pydantic.Field(alias="validate")] = True
    r"""Validate"""

    data_sample: Optional[bool] = False
    r"""Sample data flag"""

    file_source: OptionalNullable[str] = UNSET
    r"""Source path of the file"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "profile",
            "query",
            "table",
            "validate",
            "data_sample",
            "file_source",
        ]
        nullable_fields = ["profile", "query", "table", "file_source"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
