"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import BaseModel
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class BrowseProjectProjectsRequestTypedDict(TypedDict):
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    fields: NotRequired[str]
    r"""Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."""
    name: NotRequired[str]
    r"""Fetch all resources which matches given name (case sensitive)"""
    browse_type: NotRequired[str]
    r"""Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"""
    created_at: NotRequired[str]
    r"""Filter resources by creation time"""
    updated_at: NotRequired[str]
    r"""Filter resources by updation time"""
    sort: NotRequired[str]
    r"""Sort resources by resource type"""
    offset: NotRequired[int]
    r"""Offset from the beginning of the resources list"""
    limit: NotRequired[int]
    r"""Max number of resources to return"""
    ids: NotRequired[str]
    r"""Filter resources by object ids, provided as comma separated integer values"""
    include_hidden: NotRequired[bool]
    r"""Include hidden resource in response. Hidden resources are file object, ds with status deleted"""
    level: NotRequired[int]
    r"""level=2 includes children of each resources"""
    permissions: NotRequired[bool]
    r"""Include permissions attached to each resources for given user. Permissions are returned as list of strings."""


class BrowseProjectProjectsRequest(BaseModel):
    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "id,type,name,created_at,updated_at,url,additional_info,children"
    r"""Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."""

    name: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Fetch all resources which matches given name (case sensitive)"""

    browse_type: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"""

    created_at: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Filter resources by creation time"""

    updated_at: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Filter resources by updation time"""

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "(id:asc)"
    r"""Sort resources by resource type"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Offset from the beginning of the resources list"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Max number of resources to return"""

    ids: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    r"""Filter resources by object ids, provided as comma separated integer values"""

    include_hidden: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Include hidden resource in response. Hidden resources are file object, ds with status deleted"""

    level: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 2
    r"""level=2 includes children of each resources"""

    permissions: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Include permissions attached to each resources for given user. Permissions are returned as list of strings."""


BrowseProjectProjectsExtraTypedDict = TypeAliasType(
    "BrowseProjectProjectsExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


BrowseProjectProjectsExtra = TypeAliasType(
    "BrowseProjectProjectsExtra", Union[Dict[str, Any], List[Any]]
)


class BrowseProjectProjectsResponseTypedDict(TypedDict):
    r"""Request fulfilled, document follows"""


class BrowseProjectProjectsResponse(BaseModel):
    r"""Request fulfilled, document follows"""
