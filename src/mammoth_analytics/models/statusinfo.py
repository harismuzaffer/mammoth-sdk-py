"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class StatusInfoTypedDict(TypedDict):
    r"""Status Info of the file"""

    extracting: NotRequired[Nullable[str]]
    r"""Status extracting info"""
    extracted: NotRequired[Nullable[str]]
    r"""Status extracted info"""
    action_needed: NotRequired[Nullable[str]]
    r"""Status action needed info"""
    processing: NotRequired[Nullable[str]]
    r"""Status processing info"""
    processed: NotRequired[Nullable[str]]
    r"""Status processed info"""
    error: NotRequired[Nullable[str]]
    r"""Status error info"""
    is_hidden: NotRequired[bool]
    r"""Is Hidden"""
    is_empty: NotRequired[bool]
    r"""Is Empty"""


class StatusInfo(BaseModel):
    r"""Status Info of the file"""

    extracting: OptionalNullable[str] = UNSET
    r"""Status extracting info"""

    extracted: OptionalNullable[str] = UNSET
    r"""Status extracted info"""

    action_needed: OptionalNullable[str] = UNSET
    r"""Status action needed info"""

    processing: OptionalNullable[str] = UNSET
    r"""Status processing info"""

    processed: OptionalNullable[str] = UNSET
    r"""Status processed info"""

    error: OptionalNullable[str] = UNSET
    r"""Status error info"""

    is_hidden: Optional[bool] = False
    r"""Is Hidden"""

    is_empty: Optional[bool] = False
    r"""Is Empty"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "extracting",
            "extracted",
            "action_needed",
            "processing",
            "processed",
            "error",
            "is_hidden",
            "is_empty",
        ]
        nullable_fields = [
            "extracting",
            "extracted",
            "action_needed",
            "processing",
            "processed",
            "error",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
