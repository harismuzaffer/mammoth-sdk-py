"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from mammoth_analytics.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from mammoth_analytics.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ConcernType(str, Enum):
    r"""Concern type"""

    PROFILES = "profiles"
    DS_CONFIG_SPEC = "ds_config_spec"


class GetConnectionRequestTypedDict(TypedDict):
    connector_key: str
    r"""Encoded key of the Connector to work with"""
    connection_key: str
    r"""Encoded key of the connection"""
    workspace_id: int
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""
    project_id: int
    r"""Project ID of the workspace"""
    concern: NotRequired[Nullable[ConcernType]]
    r"""Concern type"""
    profile: NotRequired[Nullable[str]]
    r"""Profile type"""
    is_export: NotRequired[bool]
    r"""Is export type"""


class GetConnectionRequest(BaseModel):
    connector_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Encoded key of the Connector to work with"""

    connection_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Encoded key of the connection"""

    workspace_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 2
    r"""Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."""

    project_id: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ] = 1
    r"""Project ID of the workspace"""

    concern: Annotated[
        OptionalNullable[ConcernType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ConcernType.PROFILES
    r"""Concern type"""

    profile: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Profile type"""

    is_export: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Is export type"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["concern", "profile", "is_export"]
        nullable_fields = ["concern", "profile"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


GetConnectionUnauthorizedExtraTypedDict = TypeAliasType(
    "GetConnectionUnauthorizedExtraTypedDict", Union[Dict[str, Any], List[Any]]
)


GetConnectionUnauthorizedExtra = TypeAliasType(
    "GetConnectionUnauthorizedExtra", Union[Dict[str, Any], List[Any]]
)


GetConnectionBadRequestExtra2TypedDict = TypeAliasType(
    "GetConnectionBadRequestExtra2TypedDict", Union[Dict[str, Any], List[Any]]
)


GetConnectionBadRequestExtra2 = TypeAliasType(
    "GetConnectionBadRequestExtra2", Union[Dict[str, Any], List[Any]]
)


GetConnectionBadRequestExtra1TypedDict = TypeAliasType(
    "GetConnectionBadRequestExtra1TypedDict", Union[Dict[str, Any], List[Any]]
)


GetConnectionBadRequestExtra1 = TypeAliasType(
    "GetConnectionBadRequestExtra1", Union[Dict[str, Any], List[Any]]
)
