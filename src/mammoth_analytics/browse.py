"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional


class Browse(BaseSDK):
    def get(
        self,
        *,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseResourcesResponse:
        r"""Browse and discover resources

        Get all resources as defined by resource hierarchy

        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseResourcesRequest(
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request(
            method="GET",
            path="/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseResources",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BrowseResourcesResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseResourcesBadRequestErrorData, http_res
            )
            raise errors.BrowseResourcesBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_async(
        self,
        *,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseResourcesResponse:
        r"""Browse and discover resources

        Get all resources as defined by resource hierarchy

        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseResourcesRequest(
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request_async(
            method="GET",
            path="/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseResources",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BrowseResourcesResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseResourcesBadRequestErrorData, http_res
            )
            raise errors.BrowseResourcesBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def folders(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        folder_id: int = 4,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseFolderFoldersResponse:
        r"""Browse and discover folder resources

        Lists all resources in a folder e.g. datasets, dataviews, other folders.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param folder_id: Folder ID of the foler
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseFolderFoldersRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            folder_id=folder_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/folders/{folder_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseFolderFolders",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BrowseFolderFoldersResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseFolderFoldersBadRequestErrorData, http_res
            )
            raise errors.BrowseFolderFoldersBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def folders_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        folder_id: int = 4,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseFolderFoldersResponse:
        r"""Browse and discover folder resources

        Lists all resources in a folder e.g. datasets, dataviews, other folders.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param folder_id: Folder ID of the foler
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseFolderFoldersRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            folder_id=folder_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/folders/{folder_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseFolderFolders",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BrowseFolderFoldersResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseFolderFoldersBadRequestErrorData, http_res
            )
            raise errors.BrowseFolderFoldersBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get_project(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseProjectProjectsResponse:
        r"""Browse and discover project resources

        Lists resources in a project e.g. datasets, dataviews.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseProjectProjectsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseProjectProjects",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.BrowseProjectProjectsResponse, http_res
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseProjectProjectsBadRequestErrorData, http_res
            )
            raise errors.BrowseProjectProjectsBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_project_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseProjectProjectsResponse:
        r"""Browse and discover project resources

        Lists resources in a project e.g. datasets, dataviews.

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseProjectProjectsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/projects/{project_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseProjectProjects",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.BrowseProjectProjectsResponse, http_res
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseProjectProjectsBadRequestErrorData, http_res
            )
            raise errors.BrowseProjectProjectsBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def workspace(
        self,
        *,
        workspace_id: int = 2,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseWorkspaceWorkspacesResponse:
        r"""Browse and discover workspace resources

        Lists resources in a workspace e.g. projects

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseWorkspaceWorkspacesRequest(
            workspace_id=workspace_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request(
            method="GET",
            path="/workspaces/{workspace_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseWorkspaceWorkspaces",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.BrowseWorkspaceWorkspacesResponse, http_res
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseWorkspaceWorkspacesBadRequestErrorData, http_res
            )
            raise errors.BrowseWorkspaceWorkspacesBadRequestError(
                response_data, http_res
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def workspace_async(
        self,
        *,
        workspace_id: int = 2,
        fields: Optional[
            str
        ] = "id,type,name,created_at,updated_at,url,additional_info,children",
        name: Optional[str] = "",
        browse_type: Optional[str] = "",
        created_at: Optional[str] = "",
        updated_at: Optional[str] = "",
        sort: Optional[str] = "(id:asc)",
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        ids: Optional[str] = "",
        include_hidden: Optional[bool] = False,
        level: Optional[int] = 2,
        permissions: Optional[bool] = False,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BrowseWorkspaceWorkspacesResponse:
        r"""Browse and discover workspace resources

        Lists resources in a workspace e.g. projects

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param fields: Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at.
        :param name: Fetch all resources which matches given name (case sensitive)
        :param browse_type: Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']
        :param created_at: Filter resources by creation time
        :param updated_at: Filter resources by updation time
        :param sort: Sort resources by resource type
        :param offset: Offset from the beginning of the resources list
        :param limit: Max number of resources to return
        :param ids: Filter resources by object ids, provided as comma separated integer values
        :param include_hidden: Include hidden resource in response. Hidden resources are file object, ds with status deleted
        :param level: level=2 includes children of each resources
        :param permissions: Include permissions attached to each resources for given user. Permissions are returned as list of strings.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.BrowseWorkspaceWorkspacesRequest(
            workspace_id=workspace_id,
            fields=fields,
            name=name,
            browse_type=browse_type,
            created_at=created_at,
            updated_at=updated_at,
            sort=sort,
            offset=offset,
            limit=limit,
            ids=ids,
            include_hidden=include_hidden,
            level=level,
            permissions=permissions,
        )

        req = self._build_request_async(
            method="GET",
            path="/workspaces/{workspace_id}/browse",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BrowseWorkspaceWorkspaces",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.BrowseWorkspaceWorkspacesResponse, http_res
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.BrowseWorkspaceWorkspacesBadRequestErrorData, http_res
            )
            raise errors.BrowseWorkspaceWorkspacesBadRequestError(
                response_data, http_res
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
