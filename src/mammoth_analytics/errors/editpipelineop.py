"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import editpipelineop as models_editpipelineop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class EditPipelineNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editpipelineop.EditPipelineNotFoundExtra] = UNSET


class EditPipelineNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: EditPipelineNotFoundErrorData

    def __init__(
        self,
        data: EditPipelineNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditPipelineResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editpipelineop.EditPipelineBadRequestExtra2] = UNSET


class EditPipelineResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: EditPipelineResponseBodyError2Data

    def __init__(
        self,
        data: EditPipelineResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditPipelineResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editpipelineop.EditPipelineBadRequestExtra1] = UNSET


class EditPipelineResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: EditPipelineResponseBodyError1Data

    def __init__(
        self,
        data: EditPipelineResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


EditPipelineBadRequestUnion = TypeAliasType(
    "EditPipelineBadRequestUnion",
    Union[EditPipelineResponseBodyError1Data, EditPipelineResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class EditPipelineBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: EditPipelineBadRequestUnion

    def __init__(
        self,
        data: EditPipelineBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
