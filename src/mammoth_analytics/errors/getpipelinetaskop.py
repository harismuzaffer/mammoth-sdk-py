"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getpipelinetaskop as models_getpipelinetaskop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetPipelineTaskNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getpipelinetaskop.GetPipelineTaskNotFoundExtra] = (
        UNSET
    )


class GetPipelineTaskNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetPipelineTaskNotFoundErrorData

    def __init__(
        self,
        data: GetPipelineTaskNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineTaskResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelinetaskop.GetPipelineTaskBadRequestExtra2
    ] = UNSET


class GetPipelineTaskResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetPipelineTaskResponseBodyError2Data

    def __init__(
        self,
        data: GetPipelineTaskResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineTaskResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelinetaskop.GetPipelineTaskBadRequestExtra1
    ] = UNSET


class GetPipelineTaskResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetPipelineTaskResponseBodyError1Data

    def __init__(
        self,
        data: GetPipelineTaskResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetPipelineTaskBadRequestUnion = TypeAliasType(
    "GetPipelineTaskBadRequestUnion",
    Union[GetPipelineTaskResponseBodyError1Data, GetPipelineTaskResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class GetPipelineTaskBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetPipelineTaskBadRequestUnion

    def __init__(
        self,
        data: GetPipelineTaskBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
