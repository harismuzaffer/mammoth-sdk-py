"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import deletewebhookop as models_deletewebhookop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class DeleteWebhookResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletewebhookop.DeleteWebhookExtra2] = UNSET


class DeleteWebhookResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: DeleteWebhookResponseBodyError2Data

    def __init__(
        self,
        data: DeleteWebhookResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteWebhookResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletewebhookop.DeleteWebhookExtra1] = UNSET


class DeleteWebhookResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: DeleteWebhookResponseBodyError1Data

    def __init__(
        self,
        data: DeleteWebhookResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


DeleteWebhookBadRequestUnion = TypeAliasType(
    "DeleteWebhookBadRequestUnion",
    Union[DeleteWebhookResponseBodyError1Data, DeleteWebhookResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class DeleteWebhookBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: DeleteWebhookBadRequestUnion

    def __init__(
        self,
        data: DeleteWebhookBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
