"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getconnectionop as models_getconnectionop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetConnectionUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getconnectionop.GetConnectionUnauthorizedExtra] = (
        UNSET
    )


class GetConnectionUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: GetConnectionUnauthorizedErrorData

    def __init__(
        self,
        data: GetConnectionUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetConnectionResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getconnectionop.GetConnectionBadRequestExtra2] = (
        UNSET
    )


class GetConnectionResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetConnectionResponseBodyError2Data

    def __init__(
        self,
        data: GetConnectionResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetConnectionResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getconnectionop.GetConnectionBadRequestExtra1] = (
        UNSET
    )


class GetConnectionResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetConnectionResponseBodyError1Data

    def __init__(
        self,
        data: GetConnectionResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetConnectionBadRequestUnion = TypeAliasType(
    "GetConnectionBadRequestUnion",
    Union[GetConnectionResponseBodyError1Data, GetConnectionResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class GetConnectionBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetConnectionBadRequestUnion

    def __init__(
        self,
        data: GetConnectionBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
