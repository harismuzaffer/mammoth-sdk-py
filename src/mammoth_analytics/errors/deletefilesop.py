"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import deletefilesop as models_deletefilesop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class DeleteFilesResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletefilesop.DeleteFilesExtra2] = UNSET


class DeleteFilesResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: DeleteFilesResponseBodyError2Data

    def __init__(
        self,
        data: DeleteFilesResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteFilesResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletefilesop.DeleteFilesExtra1] = UNSET


class DeleteFilesResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: DeleteFilesResponseBodyError1Data

    def __init__(
        self,
        data: DeleteFilesResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


DeleteFilesBadRequestUnion = TypeAliasType(
    "DeleteFilesBadRequestUnion",
    Union[DeleteFilesResponseBodyError1Data, DeleteFilesResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class DeleteFilesBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: DeleteFilesBadRequestUnion

    def __init__(
        self,
        data: DeleteFilesBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
