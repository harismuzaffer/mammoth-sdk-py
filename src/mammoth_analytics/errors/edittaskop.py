"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import edittaskop as models_edittaskop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class EditTaskNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_edittaskop.EditTaskNotFoundExtra] = UNSET


class EditTaskNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: EditTaskNotFoundErrorData

    def __init__(
        self,
        data: EditTaskNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditTaskResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_edittaskop.EditTaskBadRequestExtra2] = UNSET


class EditTaskResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: EditTaskResponseBodyError2Data

    def __init__(
        self,
        data: EditTaskResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditTaskResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_edittaskop.EditTaskBadRequestExtra1] = UNSET


class EditTaskResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: EditTaskResponseBodyError1Data

    def __init__(
        self,
        data: EditTaskResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


EditTaskBadRequestUnion = TypeAliasType(
    "EditTaskBadRequestUnion",
    Union[EditTaskResponseBodyError1Data, EditTaskResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class EditTaskBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: EditTaskBadRequestUnion

    def __init__(
        self,
        data: EditTaskBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
