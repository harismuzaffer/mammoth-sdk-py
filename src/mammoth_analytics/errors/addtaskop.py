"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import addtaskop as models_addtaskop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class AddTaskResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_addtaskop.AddTaskExtra2] = UNSET


class AddTaskResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: AddTaskResponseBodyError2Data

    def __init__(
        self,
        data: AddTaskResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class AddTaskResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_addtaskop.AddTaskExtra1] = UNSET


class AddTaskResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: AddTaskResponseBodyError1Data

    def __init__(
        self,
        data: AddTaskResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


AddTaskBadRequestUnion = TypeAliasType(
    "AddTaskBadRequestUnion",
    Union[AddTaskResponseBodyError1Data, AddTaskResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class AddTaskBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: AddTaskBadRequestUnion

    def __init__(
        self,
        data: AddTaskBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
