"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import markactiveuserop as models_markactiveuserop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class MarkActiveUserNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_markactiveuserop.MarkActiveUserNotFoundExtra] = UNSET


class MarkActiveUserNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: MarkActiveUserNotFoundErrorData

    def __init__(
        self,
        data: MarkActiveUserNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class MarkActiveUserUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_markactiveuserop.MarkActiveUserUnauthorizedExtra] = (
        UNSET
    )


class MarkActiveUserUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: MarkActiveUserUnauthorizedErrorData

    def __init__(
        self,
        data: MarkActiveUserUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class MarkActiveUserResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_markactiveuserop.MarkActiveUserBadRequestExtra2] = (
        UNSET
    )


class MarkActiveUserResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: MarkActiveUserResponseBodyError2Data

    def __init__(
        self,
        data: MarkActiveUserResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class MarkActiveUserResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_markactiveuserop.MarkActiveUserBadRequestExtra1] = (
        UNSET
    )


class MarkActiveUserResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: MarkActiveUserResponseBodyError1Data

    def __init__(
        self,
        data: MarkActiveUserResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


MarkActiveUserBadRequestUnion = TypeAliasType(
    "MarkActiveUserBadRequestUnion",
    Union[MarkActiveUserResponseBodyError1Data, MarkActiveUserResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class MarkActiveUserBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: MarkActiveUserBadRequestUnion

    def __init__(
        self,
        data: MarkActiveUserBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
