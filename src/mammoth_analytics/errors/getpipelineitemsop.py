"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getpipelineitemsop as models_getpipelineitemsop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetPipelineItemsNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getpipelineitemsop.GetPipelineItemsNotFoundExtra] = (
        UNSET
    )


class GetPipelineItemsNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetPipelineItemsNotFoundErrorData

    def __init__(
        self,
        data: GetPipelineItemsNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineItemsUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineitemsop.GetPipelineItemsUnauthorizedExtra
    ] = UNSET


class GetPipelineItemsUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: GetPipelineItemsUnauthorizedErrorData

    def __init__(
        self,
        data: GetPipelineItemsUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineItemsResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineitemsop.GetPipelineItemsBadRequestExtra2
    ] = UNSET


class GetPipelineItemsResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetPipelineItemsResponseBodyError2Data

    def __init__(
        self,
        data: GetPipelineItemsResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineItemsResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineitemsop.GetPipelineItemsBadRequestExtra1
    ] = UNSET


class GetPipelineItemsResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetPipelineItemsResponseBodyError1Data

    def __init__(
        self,
        data: GetPipelineItemsResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetPipelineItemsBadRequestUnion = TypeAliasType(
    "GetPipelineItemsBadRequestUnion",
    Union[
        GetPipelineItemsResponseBodyError1Data, GetPipelineItemsResponseBodyError2Data
    ],
)
r"""Bad request syntax or unsupported method"""


class GetPipelineItemsBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetPipelineItemsBadRequestUnion

    def __init__(
        self,
        data: GetPipelineItemsBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
