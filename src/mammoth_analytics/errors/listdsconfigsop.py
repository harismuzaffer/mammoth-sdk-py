"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import listdsconfigsop as models_listdsconfigsop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class ListDsConfigsResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_listdsconfigsop.ListDsConfigsExtra2] = UNSET


class ListDsConfigsResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: ListDsConfigsResponseBodyError2Data

    def __init__(
        self,
        data: ListDsConfigsResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class ListDsConfigsResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_listdsconfigsop.ListDsConfigsExtra1] = UNSET


class ListDsConfigsResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: ListDsConfigsResponseBodyError1Data

    def __init__(
        self,
        data: ListDsConfigsResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


ListDsConfigsBadRequestUnion = TypeAliasType(
    "ListDsConfigsBadRequestUnion",
    Union[ListDsConfigsResponseBodyError1Data, ListDsConfigsResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class ListDsConfigsBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: ListDsConfigsBadRequestUnion

    def __init__(
        self,
        data: ListDsConfigsBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
