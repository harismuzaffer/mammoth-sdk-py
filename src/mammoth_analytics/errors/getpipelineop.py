"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getpipelineop as models_getpipelineop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetPipelineNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getpipelineop.GetPipelineNotFoundExtra] = UNSET


class GetPipelineNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetPipelineNotFoundErrorData

    def __init__(
        self,
        data: GetPipelineNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getpipelineop.GetPipelineBadRequestExtra2] = UNSET


class GetPipelineResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetPipelineResponseBodyError2Data

    def __init__(
        self,
        data: GetPipelineResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getpipelineop.GetPipelineBadRequestExtra1] = UNSET


class GetPipelineResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetPipelineResponseBodyError1Data

    def __init__(
        self,
        data: GetPipelineResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetPipelineBadRequestUnion = TypeAliasType(
    "GetPipelineBadRequestUnion",
    Union[GetPipelineResponseBodyError1Data, GetPipelineResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class GetPipelineBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetPipelineBadRequestUnion

    def __init__(
        self,
        data: GetPipelineBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
