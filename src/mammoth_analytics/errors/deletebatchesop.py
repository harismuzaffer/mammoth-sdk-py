"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import deletebatchesop as models_deletebatchesop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class DeleteBatchesResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletebatchesop.DeleteBatchesExtra2] = UNSET


class DeleteBatchesResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: DeleteBatchesResponseBodyError2Data

    def __init__(
        self,
        data: DeleteBatchesResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteBatchesResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletebatchesop.DeleteBatchesExtra1] = UNSET


class DeleteBatchesResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: DeleteBatchesResponseBodyError1Data

    def __init__(
        self,
        data: DeleteBatchesResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


DeleteBatchesBadRequestUnion = TypeAliasType(
    "DeleteBatchesBadRequestUnion",
    Union[DeleteBatchesResponseBodyError1Data, DeleteBatchesResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class DeleteBatchesBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: DeleteBatchesBadRequestUnion

    def __init__(
        self,
        data: DeleteBatchesBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
