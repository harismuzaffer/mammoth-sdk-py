"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getactiveusersop as models_getactiveusersop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetActiveUsersNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getactiveusersop.GetActiveUsersNotFoundExtra] = UNSET


class GetActiveUsersNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetActiveUsersNotFoundErrorData

    def __init__(
        self,
        data: GetActiveUsersNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetActiveUsersUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getactiveusersop.GetActiveUsersUnauthorizedExtra] = (
        UNSET
    )


class GetActiveUsersUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: GetActiveUsersUnauthorizedErrorData

    def __init__(
        self,
        data: GetActiveUsersUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetActiveUsersResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getactiveusersop.GetActiveUsersBadRequestExtra2] = (
        UNSET
    )


class GetActiveUsersResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetActiveUsersResponseBodyError2Data

    def __init__(
        self,
        data: GetActiveUsersResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetActiveUsersResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_getactiveusersop.GetActiveUsersBadRequestExtra1] = (
        UNSET
    )


class GetActiveUsersResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetActiveUsersResponseBodyError1Data

    def __init__(
        self,
        data: GetActiveUsersResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetActiveUsersBadRequestUnion = TypeAliasType(
    "GetActiveUsersBadRequestUnion",
    Union[GetActiveUsersResponseBodyError1Data, GetActiveUsersResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class GetActiveUsersBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetActiveUsersBadRequestUnion

    def __init__(
        self,
        data: GetActiveUsersBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
