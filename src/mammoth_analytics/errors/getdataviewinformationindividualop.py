"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import (
    getdataviewinformationindividualop as models_getdataviewinformationindividualop,
)
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetDataviewInformationIndividualNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getdataviewinformationindividualop.GetDataviewInformationIndividualNotFoundExtra
    ] = UNSET


class GetDataviewInformationIndividualNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetDataviewInformationIndividualNotFoundErrorData

    def __init__(
        self,
        data: GetDataviewInformationIndividualNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetDataviewInformationIndividualUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getdataviewinformationindividualop.GetDataviewInformationIndividualUnauthorizedExtra
    ] = UNSET


class GetDataviewInformationIndividualUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: GetDataviewInformationIndividualUnauthorizedErrorData

    def __init__(
        self,
        data: GetDataviewInformationIndividualUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetDataviewInformationIndividualResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getdataviewinformationindividualop.GetDataviewInformationIndividualBadRequestExtra2
    ] = UNSET


class GetDataviewInformationIndividualResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetDataviewInformationIndividualResponseBodyError2Data

    def __init__(
        self,
        data: GetDataviewInformationIndividualResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetDataviewInformationIndividualResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getdataviewinformationindividualop.GetDataviewInformationIndividualBadRequestExtra1
    ] = UNSET


class GetDataviewInformationIndividualResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetDataviewInformationIndividualResponseBodyError1Data

    def __init__(
        self,
        data: GetDataviewInformationIndividualResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetDataviewInformationIndividualBadRequestUnion = TypeAliasType(
    "GetDataviewInformationIndividualBadRequestUnion",
    Union[
        GetDataviewInformationIndividualResponseBodyError1Data,
        GetDataviewInformationIndividualResponseBodyError2Data,
    ],
)
r"""Bad request syntax or unsupported method"""


class GetDataviewInformationIndividualBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetDataviewInformationIndividualBadRequestUnion

    def __init__(
        self,
        data: GetDataviewInformationIndividualBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
