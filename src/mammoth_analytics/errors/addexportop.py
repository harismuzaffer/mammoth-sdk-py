"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import addexportop as models_addexportop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class AddExportResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_addexportop.AddExportExtra2] = UNSET


class AddExportResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: AddExportResponseBodyError2Data

    def __init__(
        self,
        data: AddExportResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class AddExportResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_addexportop.AddExportExtra1] = UNSET


class AddExportResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: AddExportResponseBodyError1Data

    def __init__(
        self,
        data: AddExportResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


AddExportBadRequestUnion = TypeAliasType(
    "AddExportBadRequestUnion",
    Union[AddExportResponseBodyError1Data, AddExportResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class AddExportBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: AddExportBadRequestUnion

    def __init__(
        self,
        data: AddExportBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
