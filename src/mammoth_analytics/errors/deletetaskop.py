"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import deletetaskop as models_deletetaskop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class DeleteTaskNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletetaskop.DeleteTaskNotFoundExtra] = UNSET


class DeleteTaskNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: DeleteTaskNotFoundErrorData

    def __init__(
        self,
        data: DeleteTaskNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteTaskResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletetaskop.DeleteTaskBadRequestExtra2] = UNSET


class DeleteTaskResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: DeleteTaskResponseBodyError2Data

    def __init__(
        self,
        data: DeleteTaskResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteTaskResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletetaskop.DeleteTaskBadRequestExtra1] = UNSET


class DeleteTaskResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: DeleteTaskResponseBodyError1Data

    def __init__(
        self,
        data: DeleteTaskResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


DeleteTaskBadRequestUnion = TypeAliasType(
    "DeleteTaskBadRequestUnion",
    Union[DeleteTaskResponseBodyError1Data, DeleteTaskResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class DeleteTaskBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: DeleteTaskBadRequestUnion

    def __init__(
        self,
        data: DeleteTaskBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
