"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import getpipelineexportop as models_getpipelineexportop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class GetPipelineExportNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineexportop.GetPipelineExportNotFoundExtra
    ] = UNSET


class GetPipelineExportNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: GetPipelineExportNotFoundErrorData

    def __init__(
        self,
        data: GetPipelineExportNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineExportResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineexportop.GetPipelineExportBadRequestExtra2
    ] = UNSET


class GetPipelineExportResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: GetPipelineExportResponseBodyError2Data

    def __init__(
        self,
        data: GetPipelineExportResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class GetPipelineExportResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[
        models_getpipelineexportop.GetPipelineExportBadRequestExtra1
    ] = UNSET


class GetPipelineExportResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: GetPipelineExportResponseBodyError1Data

    def __init__(
        self,
        data: GetPipelineExportResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


GetPipelineExportBadRequestUnion = TypeAliasType(
    "GetPipelineExportBadRequestUnion",
    Union[
        GetPipelineExportResponseBodyError1Data, GetPipelineExportResponseBodyError2Data
    ],
)
r"""Bad request syntax or unsupported method"""


class GetPipelineExportBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: GetPipelineExportBadRequestUnion

    def __init__(
        self,
        data: GetPipelineExportBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
