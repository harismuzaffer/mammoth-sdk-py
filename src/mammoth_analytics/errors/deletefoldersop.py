"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import deletefoldersop as models_deletefoldersop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class DeleteFoldersResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletefoldersop.DeleteFoldersExtra2] = UNSET


class DeleteFoldersResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: DeleteFoldersResponseBodyError2Data

    def __init__(
        self,
        data: DeleteFoldersResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class DeleteFoldersResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_deletefoldersop.DeleteFoldersExtra1] = UNSET


class DeleteFoldersResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: DeleteFoldersResponseBodyError1Data

    def __init__(
        self,
        data: DeleteFoldersResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


DeleteFoldersBadRequestUnion = TypeAliasType(
    "DeleteFoldersBadRequestUnion",
    Union[DeleteFoldersResponseBodyError1Data, DeleteFoldersResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class DeleteFoldersBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: DeleteFoldersBadRequestUnion

    def __init__(
        self,
        data: DeleteFoldersBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
