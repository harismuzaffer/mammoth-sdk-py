"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import editexportop as models_editexportop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class EditExportNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editexportop.EditExportNotFoundExtra] = UNSET


class EditExportNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: EditExportNotFoundErrorData

    def __init__(
        self,
        data: EditExportNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditExportResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editexportop.EditExportBadRequestExtra2] = UNSET


class EditExportResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: EditExportResponseBodyError2Data

    def __init__(
        self,
        data: EditExportResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class EditExportResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_editexportop.EditExportBadRequestExtra1] = UNSET


class EditExportResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: EditExportResponseBodyError1Data

    def __init__(
        self,
        data: EditExportResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


EditExportBadRequestUnion = TypeAliasType(
    "EditExportBadRequestUnion",
    Union[EditExportResponseBodyError1Data, EditExportResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class EditExportBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: EditExportBadRequestUnion

    def __init__(
        self,
        data: EditExportBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
