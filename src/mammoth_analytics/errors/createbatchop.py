"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import createbatchop as models_createbatchop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class CreateBatchResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_createbatchop.CreateBatchExtra2] = UNSET


class CreateBatchResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: CreateBatchResponseBodyError2Data

    def __init__(
        self,
        data: CreateBatchResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class CreateBatchResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_createbatchop.CreateBatchExtra1] = UNSET


class CreateBatchResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: CreateBatchResponseBodyError1Data

    def __init__(
        self,
        data: CreateBatchResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


CreateBatchBadRequestUnion = TypeAliasType(
    "CreateBatchBadRequestUnion",
    Union[CreateBatchResponseBodyError1Data, CreateBatchResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class CreateBatchBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: CreateBatchBadRequestUnion

    def __init__(
        self,
        data: CreateBatchBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
