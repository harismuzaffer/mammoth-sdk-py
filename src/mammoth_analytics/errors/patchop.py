"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import patchop as models_patchop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class PatchNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_patchop.PatchNotFoundExtra] = UNSET


class PatchNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: PatchNotFoundErrorData

    def __init__(
        self,
        data: PatchNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class PatchUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_patchop.PatchUnauthorizedExtra] = UNSET


class PatchUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: PatchUnauthorizedErrorData

    def __init__(
        self,
        data: PatchUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class PatchResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_patchop.PatchBadRequestExtra2] = UNSET


class PatchResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: PatchResponseBodyError2Data

    def __init__(
        self,
        data: PatchResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class PatchResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_patchop.PatchBadRequestExtra1] = UNSET


class PatchResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: PatchResponseBodyError1Data

    def __init__(
        self,
        data: PatchResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


PatchBadRequestUnion = TypeAliasType(
    "PatchBadRequestUnion",
    Union[PatchResponseBodyError1Data, PatchResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class PatchBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: PatchBadRequestUnion

    def __init__(
        self,
        data: PatchBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
