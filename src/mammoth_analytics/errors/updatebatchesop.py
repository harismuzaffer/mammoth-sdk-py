"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import updatebatchesop as models_updatebatchesop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class UpdateBatchesResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_updatebatchesop.UpdateBatchesExtra2] = UNSET


class UpdateBatchesResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: UpdateBatchesResponseBodyError2Data

    def __init__(
        self,
        data: UpdateBatchesResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class UpdateBatchesResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_updatebatchesop.UpdateBatchesExtra1] = UNSET


class UpdateBatchesResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: UpdateBatchesResponseBodyError1Data

    def __init__(
        self,
        data: UpdateBatchesResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


UpdateBatchesBadRequestUnion = TypeAliasType(
    "UpdateBatchesBadRequestUnion",
    Union[UpdateBatchesResponseBodyError1Data, UpdateBatchesResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class UpdateBatchesBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: UpdateBatchesBadRequestUnion

    def __init__(
        self,
        data: UpdateBatchesBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
