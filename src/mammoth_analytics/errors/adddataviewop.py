"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from mammoth_analytics.errors import MammothAnalyticsError
from mammoth_analytics.models import adddataviewop as models_adddataviewop
from mammoth_analytics.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union
from typing_extensions import TypeAliasType


class AddDataviewNotFoundErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_adddataviewop.AddDataviewNotFoundExtra] = UNSET


class AddDataviewNotFoundError(MammothAnalyticsError):
    r"""Not Found Exception"""

    data: AddDataviewNotFoundErrorData

    def __init__(
        self,
        data: AddDataviewNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class AddDataviewUnauthorizedErrorData(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_adddataviewop.AddDataviewUnauthorizedExtra] = UNSET


class AddDataviewUnauthorizedError(MammothAnalyticsError):
    r"""Authorization Exception"""

    data: AddDataviewUnauthorizedErrorData

    def __init__(
        self,
        data: AddDataviewUnauthorizedErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class AddDataviewResponseBodyError2Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_adddataviewop.AddDataviewBadRequestExtra2] = UNSET


class AddDataviewResponseBodyError2(MammothAnalyticsError):
    r"""Validation Exception"""

    data: AddDataviewResponseBodyError2Data

    def __init__(
        self,
        data: AddDataviewResponseBodyError2Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class AddDataviewResponseBodyError1Data(BaseModel):
    status_code: int

    detail: str

    extra: OptionalNullable[models_adddataviewop.AddDataviewBadRequestExtra1] = UNSET


class AddDataviewResponseBodyError1(MammothAnalyticsError):
    r"""Client Error"""

    data: AddDataviewResponseBodyError1Data

    def __init__(
        self,
        data: AddDataviewResponseBodyError1Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


AddDataviewBadRequestUnion = TypeAliasType(
    "AddDataviewBadRequestUnion",
    Union[AddDataviewResponseBodyError1Data, AddDataviewResponseBodyError2Data],
)
r"""Bad request syntax or unsupported method"""


class AddDataviewBadRequest(MammothAnalyticsError):
    r"""Bad request syntax or unsupported method"""

    data: AddDataviewBadRequestUnion

    def __init__(
        self,
        data: AddDataviewBadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
