"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class GenerateDataBasedOnAI(BaseSDK):
    def ai_suggestions(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        suggestion_type: models.SuggestionType,
        params: Union[models.Params, models.ParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AiSuggestionsResponse:
        r"""Generate AI-based Suggestions for Dataview

        Given the prompt, generate AI data againt a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param suggestion_type: Type of operation (extraction or conditional filtering)
        :param params: Encapsulated parameters for the operation
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AiSuggestionsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            unified_prompt_spec=models.UnifiedPromptSpec(
                suggestion_type=suggestion_type,
                params=utils.get_pydantic_model(params, models.Params),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.unified_prompt_spec,
                False,
                False,
                "json",
                models.UnifiedPromptSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AiSuggestions",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody2, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody1, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AiSuggestionsBadRequestUnion, http_res
            )
            raise errors.AiSuggestionsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def ai_suggestions_async(
        self,
        *,
        workspace_id: int = 2,
        project_id: int = 1,
        dataset_id: int,
        suggestion_type: models.SuggestionType,
        params: Union[models.Params, models.ParamsTypedDict],
        dataview_id: Optional[int] = 4,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AiSuggestionsResponse:
        r"""Generate AI-based Suggestions for Dataview

        Given the prompt, generate AI data againt a sequence number in the pipeline

        :param workspace_id: Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace.
        :param project_id: Project ID of the workspace
        :param dataset_id: Id of the dataset
        :param suggestion_type: Type of operation (extraction or conditional filtering)
        :param params: Encapsulated parameters for the operation
        :param dataview_id: Dataview ID of the dataset
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AiSuggestionsRequest(
            workspace_id=workspace_id,
            project_id=project_id,
            dataset_id=dataset_id,
            dataview_id=dataview_id,
            unified_prompt_spec=models.UnifiedPromptSpec(
                suggestion_type=suggestion_type,
                params=utils.get_pydantic_model(params, models.Params),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/workspaces/{workspace_id}/projects/{project_id}/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.unified_prompt_spec,
                False,
                False,
                "json",
                models.UnifiedPromptSpec,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="AiSuggestions",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody2, http_res)
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AiSuggestionsResponseBody1, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.AiSuggestionsBadRequestUnion, http_res
            )
            raise errors.AiSuggestionsBadRequest(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
