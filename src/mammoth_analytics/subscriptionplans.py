"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from mammoth_analytics import errors, models, utils
from mammoth_analytics._hooks import HookContext
from mammoth_analytics.types import OptionalNullable, UNSET
from mammoth_analytics.utils import get_security_from_env
from mammoth_analytics.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class SubscriptionPlans(BaseSDK):
    def archive(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Archive a subscription plan

        Archive a subscription plan (soft delete)

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ArchivePlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request(
            method="POST",
            path="/subscription/plans/{plan_id}/archive",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ArchivePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ArchivePlanBadRequestErrorData, http_res
            )
            raise errors.ArchivePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def archive_async(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Archive a subscription plan

        Archive a subscription plan (soft delete)

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ArchivePlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/subscription/plans/{plan_id}/archive",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ArchivePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ArchivePlanBadRequestErrorData, http_res
            )
            raise errors.ArchivePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def list(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanListResponseSchema:
        r"""List all subscription plans

        Retrieve all active subscription plans with enhanced error handling

        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request(
            method="GET",
            path="/subscription/plans",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ListSubscriptionPlans",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanListResponseSchema, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def list_async(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanListResponseSchema:
        r"""List all subscription plans

        Retrieve all active subscription plans with enhanced error handling

        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request_async(
            method="GET",
            path="/subscription/plans",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="ListSubscriptionPlans",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanListResponseSchema, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def create(
        self,
        *,
        name: str,
        monthly_price: float,
        is_self_serve: bool,
        description: OptionalNullable[str] = UNSET,
        annual_price: OptionalNullable[float] = UNSET,
        annual_only: Optional[bool] = False,
        trial_days: OptionalNullable[int] = UNSET,
        storage_amount: Optional[int] = 0,
        max_storage: OptionalNullable[int] = UNSET,
        max_users: OptionalNullable[int] = UNSET,
        no_of_users: OptionalNullable[int] = UNSET,
        seat_price: OptionalNullable[float] = UNSET,
        number_of_tiers: Optional[int] = 1,
        storage_block_size: OptionalNullable[int] = UNSET,
        tiers: OptionalNullable[
            Union[
                List[models.SubscriptionSchemasStorageTierSchema],
                List[models.SubscriptionSchemasStorageTierSchemaTypedDict],
            ]
        ] = UNSET,
        connector_profile_id: OptionalNullable[int] = UNSET,
        feature_profile_id: OptionalNullable[int] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Create a new subscription plan

        Create a new subscription plan with comprehensive validation

        :param name: Plan name
        :param monthly_price: Monthly price in USD
        :param is_self_serve: Whether users can self-subscribe
        :param description: Plan description
        :param annual_price: Annual price in USD
        :param annual_only: Whether plan is annual only
        :param trial_days: Trial period in days
        :param storage_amount: Included storage in GB
        :param max_storage: Maximum storage in GB
        :param max_users: Maximum number of users
        :param no_of_users: Number of included users
        :param seat_price: Price per additional user seat
        :param number_of_tiers: Number of storage tiers
        :param storage_block_size: Storage block size in GB
        :param tiers: Storage pricing tiers
        :param connector_profile_id: Connector profile ID
        :param feature_profile_id: Feature profile ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreatePlanRequestSchema(
            name=name,
            monthly_price=monthly_price,
            description=description,
            annual_price=annual_price,
            annual_only=annual_only,
            is_self_serve=is_self_serve,
            trial_days=trial_days,
            storage_amount=storage_amount,
            max_storage=max_storage,
            max_users=max_users,
            no_of_users=no_of_users,
            seat_price=seat_price,
            number_of_tiers=number_of_tiers,
            storage_block_size=storage_block_size,
            tiers=utils.get_pydantic_model(
                tiers,
                OptionalNullable[List[models.SubscriptionSchemasStorageTierSchema]],
            ),
            connector_profile_id=connector_profile_id,
            feature_profile_id=feature_profile_id,
        )

        req = self._build_request(
            method="POST",
            path="/subscription/plans",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreatePlanRequestSchema
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreatePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.CreatePlanBadRequestErrorData, http_res
            )
            raise errors.CreatePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def create_async(
        self,
        *,
        name: str,
        monthly_price: float,
        is_self_serve: bool,
        description: OptionalNullable[str] = UNSET,
        annual_price: OptionalNullable[float] = UNSET,
        annual_only: Optional[bool] = False,
        trial_days: OptionalNullable[int] = UNSET,
        storage_amount: Optional[int] = 0,
        max_storage: OptionalNullable[int] = UNSET,
        max_users: OptionalNullable[int] = UNSET,
        no_of_users: OptionalNullable[int] = UNSET,
        seat_price: OptionalNullable[float] = UNSET,
        number_of_tiers: Optional[int] = 1,
        storage_block_size: OptionalNullable[int] = UNSET,
        tiers: OptionalNullable[
            Union[
                List[models.SubscriptionSchemasStorageTierSchema],
                List[models.SubscriptionSchemasStorageTierSchemaTypedDict],
            ]
        ] = UNSET,
        connector_profile_id: OptionalNullable[int] = UNSET,
        feature_profile_id: OptionalNullable[int] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Create a new subscription plan

        Create a new subscription plan with comprehensive validation

        :param name: Plan name
        :param monthly_price: Monthly price in USD
        :param is_self_serve: Whether users can self-subscribe
        :param description: Plan description
        :param annual_price: Annual price in USD
        :param annual_only: Whether plan is annual only
        :param trial_days: Trial period in days
        :param storage_amount: Included storage in GB
        :param max_storage: Maximum storage in GB
        :param max_users: Maximum number of users
        :param no_of_users: Number of included users
        :param seat_price: Price per additional user seat
        :param number_of_tiers: Number of storage tiers
        :param storage_block_size: Storage block size in GB
        :param tiers: Storage pricing tiers
        :param connector_profile_id: Connector profile ID
        :param feature_profile_id: Feature profile ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreatePlanRequestSchema(
            name=name,
            monthly_price=monthly_price,
            description=description,
            annual_price=annual_price,
            annual_only=annual_only,
            is_self_serve=is_self_serve,
            trial_days=trial_days,
            storage_amount=storage_amount,
            max_storage=max_storage,
            max_users=max_users,
            no_of_users=no_of_users,
            seat_price=seat_price,
            number_of_tiers=number_of_tiers,
            storage_block_size=storage_block_size,
            tiers=utils.get_pydantic_model(
                tiers,
                OptionalNullable[List[models.SubscriptionSchemasStorageTierSchema]],
            ),
            connector_profile_id=connector_profile_id,
            feature_profile_id=feature_profile_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/subscription/plans",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreatePlanRequestSchema
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreatePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.CreatePlanBadRequestErrorData, http_res
            )
            raise errors.CreatePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def get(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Get a specific plan

        Retrieve details of a specific subscription plan

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request(
            method="GET",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPlanBadRequestErrorData, http_res
            )
            raise errors.GetPlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def get_async(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Get a specific plan

        Retrieve details of a specific subscription plan

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetPlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.GetPlanBadRequestErrorData, http_res
            )
            raise errors.GetPlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def update(
        self,
        *,
        plan_id: int,
        name: OptionalNullable[str] = UNSET,
        description: OptionalNullable[str] = UNSET,
        monthly_price: OptionalNullable[float] = UNSET,
        annual_price: OptionalNullable[float] = UNSET,
        annual_only: OptionalNullable[bool] = UNSET,
        is_self_serve: OptionalNullable[bool] = UNSET,
        trial_days: OptionalNullable[int] = UNSET,
        storage_amount: OptionalNullable[int] = UNSET,
        max_storage: OptionalNullable[int] = UNSET,
        max_users: OptionalNullable[int] = UNSET,
        no_of_users: OptionalNullable[int] = UNSET,
        seat_price: OptionalNullable[float] = UNSET,
        number_of_tiers: OptionalNullable[int] = UNSET,
        storage_block_size: OptionalNullable[int] = UNSET,
        tiers: OptionalNullable[
            Union[
                List[models.SubscriptionSchemasStorageTierSchema],
                List[models.SubscriptionSchemasStorageTierSchemaTypedDict],
            ]
        ] = UNSET,
        connector_profile_id: OptionalNullable[int] = UNSET,
        feature_profile_id: OptionalNullable[int] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Update a subscription plan

        Update an existing subscription plan with validation

        :param plan_id:
        :param name: Plan name
        :param description: Plan description
        :param monthly_price: Monthly price in USD
        :param annual_price: Annual price in USD
        :param annual_only: Whether plan is annual only
        :param is_self_serve: Whether users can self-subscribe
        :param trial_days: Trial period in days
        :param storage_amount: Included storage in GB
        :param max_storage: Maximum storage in GB
        :param max_users: Maximum number of users
        :param no_of_users: Number of included users
        :param seat_price: Price per additional user seat
        :param number_of_tiers: Number of storage tiers
        :param storage_block_size: Storage block size in GB
        :param tiers: Storage pricing tiers
        :param connector_profile_id: Connector profile ID
        :param feature_profile_id: Feature profile ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdatePlanRequest(
            plan_id=plan_id,
            update_plan_request_schema=models.UpdatePlanRequestSchema(
                name=name,
                description=description,
                monthly_price=monthly_price,
                annual_price=annual_price,
                annual_only=annual_only,
                is_self_serve=is_self_serve,
                trial_days=trial_days,
                storage_amount=storage_amount,
                max_storage=max_storage,
                max_users=max_users,
                no_of_users=no_of_users,
                seat_price=seat_price,
                number_of_tiers=number_of_tiers,
                storage_block_size=storage_block_size,
                tiers=utils.get_pydantic_model(
                    tiers,
                    OptionalNullable[List[models.SubscriptionSchemasStorageTierSchema]],
                ),
                connector_profile_id=connector_profile_id,
                feature_profile_id=feature_profile_id,
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_plan_request_schema,
                False,
                False,
                "json",
                models.UpdatePlanRequestSchema,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdatePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdatePlanBadRequestErrorData, http_res
            )
            raise errors.UpdatePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def update_async(
        self,
        *,
        plan_id: int,
        name: OptionalNullable[str] = UNSET,
        description: OptionalNullable[str] = UNSET,
        monthly_price: OptionalNullable[float] = UNSET,
        annual_price: OptionalNullable[float] = UNSET,
        annual_only: OptionalNullable[bool] = UNSET,
        is_self_serve: OptionalNullable[bool] = UNSET,
        trial_days: OptionalNullable[int] = UNSET,
        storage_amount: OptionalNullable[int] = UNSET,
        max_storage: OptionalNullable[int] = UNSET,
        max_users: OptionalNullable[int] = UNSET,
        no_of_users: OptionalNullable[int] = UNSET,
        seat_price: OptionalNullable[float] = UNSET,
        number_of_tiers: OptionalNullable[int] = UNSET,
        storage_block_size: OptionalNullable[int] = UNSET,
        tiers: OptionalNullable[
            Union[
                List[models.SubscriptionSchemasStorageTierSchema],
                List[models.SubscriptionSchemasStorageTierSchemaTypedDict],
            ]
        ] = UNSET,
        connector_profile_id: OptionalNullable[int] = UNSET,
        feature_profile_id: OptionalNullable[int] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Update a subscription plan

        Update an existing subscription plan with validation

        :param plan_id:
        :param name: Plan name
        :param description: Plan description
        :param monthly_price: Monthly price in USD
        :param annual_price: Annual price in USD
        :param annual_only: Whether plan is annual only
        :param is_self_serve: Whether users can self-subscribe
        :param trial_days: Trial period in days
        :param storage_amount: Included storage in GB
        :param max_storage: Maximum storage in GB
        :param max_users: Maximum number of users
        :param no_of_users: Number of included users
        :param seat_price: Price per additional user seat
        :param number_of_tiers: Number of storage tiers
        :param storage_block_size: Storage block size in GB
        :param tiers: Storage pricing tiers
        :param connector_profile_id: Connector profile ID
        :param feature_profile_id: Feature profile ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdatePlanRequest(
            plan_id=plan_id,
            update_plan_request_schema=models.UpdatePlanRequestSchema(
                name=name,
                description=description,
                monthly_price=monthly_price,
                annual_price=annual_price,
                annual_only=annual_only,
                is_self_serve=is_self_serve,
                trial_days=trial_days,
                storage_amount=storage_amount,
                max_storage=max_storage,
                max_users=max_users,
                no_of_users=no_of_users,
                seat_price=seat_price,
                number_of_tiers=number_of_tiers,
                storage_block_size=storage_block_size,
                tiers=utils.get_pydantic_model(
                    tiers,
                    OptionalNullable[List[models.SubscriptionSchemasStorageTierSchema]],
                ),
                connector_profile_id=connector_profile_id,
                feature_profile_id=feature_profile_id,
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_plan_request_schema,
                False,
                False,
                "json",
                models.UpdatePlanRequestSchema,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdatePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdatePlanBadRequestErrorData, http_res
            )
            raise errors.UpdatePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def delete(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.MessageResponseSchema:
        r"""Delete a subscription plan

        Permanently delete a subscription plan

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeletePlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeletePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.MessageResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeletePlanBadRequestErrorData, http_res
            )
            raise errors.DeletePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def delete_async(
        self,
        *,
        plan_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.MessageResponseSchema:
        r"""Delete a subscription plan

        Permanently delete a subscription plan

        :param plan_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeletePlanRequest(
            plan_id=plan_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/subscription/plans/{plan_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="DeletePlan",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.MessageResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.DeletePlanBadRequestErrorData, http_res
            )
            raise errors.DeletePlanBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    def update_storage_tiers(
        self,
        *,
        plan_id: int,
        storage_tiers: Union[
            List[models.SchemaStorageTierSchema],
            List[models.SchemaStorageTierSchemaTypedDict],
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Update storage tiers for a plan

        Update the storage tier pricing for a subscription plan

        :param plan_id:
        :param storage_tiers:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateStorageTiersRequest(
            plan_id=plan_id,
            update_storage_tiers_request_schema=models.UpdateStorageTiersRequestSchema(
                storage_tiers=utils.get_pydantic_model(
                    storage_tiers, List[models.SchemaStorageTierSchema]
                ),
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/subscription/plans/{plan_id}/storage-tiers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_storage_tiers_request_schema,
                False,
                False,
                "json",
                models.UpdateStorageTiersRequestSchema,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdateStorageTiers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdateStorageTiersBadRequestErrorData, http_res
            )
            raise errors.UpdateStorageTiersBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )

    async def update_storage_tiers_async(
        self,
        *,
        plan_id: int,
        storage_tiers: Union[
            List[models.SchemaStorageTierSchema],
            List[models.SchemaStorageTierSchemaTypedDict],
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PlanResponseSchema:
        r"""Update storage tiers for a plan

        Update the storage tier pricing for a subscription plan

        :param plan_id:
        :param storage_tiers:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateStorageTiersRequest(
            plan_id=plan_id,
            update_storage_tiers_request_schema=models.UpdateStorageTiersRequestSchema(
                storage_tiers=utils.get_pydantic_model(
                    storage_tiers, List[models.SchemaStorageTierSchema]
                ),
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/subscription/plans/{plan_id}/storage-tiers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_storage_tiers_request_schema,
                False,
                False,
                "json",
                models.UpdateStorageTiersRequestSchema,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="UpdateStorageTiers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PlanResponseSchema, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.UpdateStorageTiersBadRequestErrorData, http_res
            )
            raise errors.UpdateStorageTiersBadRequestError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.MammothAnalyticsDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.MammothAnalyticsDefaultError(
            "Unexpected response received", http_res
        )
