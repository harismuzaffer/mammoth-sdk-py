info:
  title: "Mammoth Analytics"
  version: "0.1.0"
  description: "\nMammoth API : helps you do use mammoth app functionalities via API.\n"
  contact:
    name: "Mammoth Analytics"
    url: "https://mammoth.io"
    email: "support@mammoth.io"
openapi: "3.1.0"
servers:
  - url: "/api/v2"
paths:
  "/workspaces/{workspace_id}/projects/{project_id}/users":
    post:
      tags:
        - "Projects"
      summary: "Add user to a project"
      description: "This endpoint allows addition of a user to a project."
      operationId: "AddUserProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddUsersToProject"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Successfully add user from project"
      x-speakeasy-name-override: "addUser"
    delete:
      tags:
        - "Projects"
      summary: "Remove user from a project"
      description: "This endpoint allows removal of a user from a project."
      operationId: "RemoveUserProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "user_id"
          in: "query"
          schema:
            type: "integer"
            title: "User ID"
            description: "Id of the user"
            examples:
              - 4
          description: "Id of the user"
          required: true
          examples:
            "user_id-example-1":
              summary: "Sample user ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Successfully add user from project"
      x-speakeasy-name-override: "removeUser"
    patch:
      tags:
        - "Projects"
      summary: "Update user role on a project"
      description: "This endpoint allows updation of a user to a project.             User role can be changed from editor to admin or vice versa."
      operationId: "UpdateUserProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "user_id"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            title: "User id"
            description: "Id of the user"
            examples:
              - 4
          description: "Id of the user"
          required: false
          examples:
            "user_id-example-1":
              summary: "Sample user ID"
              value: 4
        - name: "invite_id"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            title: "User Invite ID"
            description: "Id of the invited user"
            examples:
              - 4
          description: "Id of the invited user"
          required: false
          examples:
            "invite_id-example-1":
              summary: "Sample invite ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProjectUserPatch"}
        required: true
      responses:
        "200":
          description: "Successfully updated user role on project"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "updateUser"
  "/workspaces/{workspace_id}/projects":
    get:
      tags:
        - "Projects"
      summary: "Get list of projects"
      description: "Returns list of projects in given workspace. Query parameters can be used to optimize the response."
      operationId: "GetProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of projects to return"
            default: 10
            examples:
              - 10
          description: "Max number of projects to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned project count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the project list"
            default: 0
            examples:
              - 0
          description: "Offset from the beginning of the project list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th project"
              value: 0
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,name,status,created_at,updated_at,properties"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only project.id and project.name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of projects. Full representation includes id,name,status,created_at,updated_at,properties,owner_workspace_id"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of projects. standard representation includes id,name,status,created_at,updated_at,properties"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of projects. Minimal representation includes id,name"
              value: "__min"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort by column name"
            description: "Returned projects are Sort by this parameter. Can be (id, name, owner_workspace_id, updated_at)"
            default: "(id:asc)"
            examples:
              - "(id:asc)"
              - "(id:asc),(name:asc)"
          description: "Returned projects are Sort by this parameter. Can be (id, name, owner_workspace_id, updated_at)"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by project.id asc"
              value: "(id:asc)"
            "sort-example-2":
              summary: "Sort by project.id and name asc"
              value: "(id:asc),(name:asc)"
        - name: "subscribed"
          in: "query"
          schema:
            type: "string"
            title: "List only subscribed projects"
            description: "If true, list only subscribed projects otherwise list all projects"
            default: ""
            examples:
              - "true"
              - "false"
              - ""
          description: "If true, list only subscribed projects otherwise list all projects"
          required: false
          examples:
            "subscribed-example-1":
              summary: "List only subscribed projects"
              value: "true"
            "subscribed-example-2":
              summary: "List projects where listing access is present, not subscribed projects"
              value: "false"
            "subscribed-example-3":
              summary: "List both subsribed and non-subscribed projects"
              value: ""
      responses:
        "200":
          description: "List of projects"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ProjectList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "304":
          description: "Not Modified"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Projects"
      summary: "Create a new project in given workspace"
      description: "Creates new projects and add user as owner of the project."
      operationId: "CreateProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProjectCreate"}
        required: true
      responses:
        "201":
          description: "Successful create"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ProjectSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "create"
    delete:
      tags:
        - "Projects"
      summary: "Delete multiple projects"
      description: "Delete multiple projects"
      operationId: "DeleteProjects"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of project ids to get files"
            description: "Multiple project ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Multiple project ids, comma separated"
          required: false
          examples:
            "ids-example-1":
              summary: "Returns details of project ids 1, 2 and 3"
              value: "1,2,3"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "removeAll"
    patch:
      tags:
        - "Projects"
      summary: "Update multiple projects by adding/removing users or changing roles of the users"
      description: "Update multiple projects by adding/removing users or changing roles of the users"
      operationId: "UpdateProjects"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProjectsPatch"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}":
    delete:
      tags:
        - "Projects"
      summary: "Delete a project"
      description: "This action removes a project along with its associated data.            It operates asynchronously, so the deletion process may take some time to complete fully.            Currently, there's no tracking available; to check the status, attempt listing the projects again.            Please proceed cautiously as deleted data cannot be recovered."
      operationId: "DeleteProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "202":
          description: "Successful delete"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Projects"
      summary: "Update a project"
      description: "Currently on project rename is allowed"
      operationId: "UpdateProject"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProjectPatch"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ProjectSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "rename"
  "/workspaces/{workspace_id}/projects/{project_id}/pending-changes":
    get:
      tags:
        - "Projects"
      summary: "Get pending changes for a project"
      description: "\n        This endpoint fetches pending changes for a project including:\n        - Non-sync items\n        - Pending data update items\n        - Pending pipeline changes\n        "
      operationId: "GetPendingChanges"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      responses:
        "200":
          description: "Pending changes in a project - including pending pipelines, non sync items, and pending data update items"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/GetPendingItemsResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces/{workspace_id}/projects/{project_id}/resource-status":
    get:
      tags:
        - "Projects"
      summary: "Get resource status"
      description: "Returns the current status for all resources in the project"
      operationId: "GetResourceStatus"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            title: "Project ID"
            description: "Project to delete"
            default: 4
            examples:
              - 4
          description: "Project to delete"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      responses:
        "200":
          description: "Resource status information"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ResourceStatusResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews":
    get:
      tags:
        - "Dataviews"
      summary: "Get list of dataviews present in a dataset"
      description: "Get list of dataviews present in a dataset"
      operationId: "ListDataviews"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only dataview id and dataview name"
              value: "id,name"
            "fields-example-2":
              summary: "Return Full representation of dataviews."
              description: "Full representation includes column_count,created_at,data_updated_at,data_url,dependencies_info,display_properties,draft_mode,ds_id,id,is_dataview_data_in_sync,is_pipeline_running,metadata,name,original_data_updated,pipeline_autorun_enabled,pipeline_status,row_count,status,sys_cols,taskwise_info,updated_at,user_display_properties"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of dataviews."
              description: "Standard representation includes column_count,created_at,data_updated_at,data_url,dependencies_info,display_properties,ds_id,id,is_dataview_data_in_sync,metadata,name,original_data_updated,row_count,status,sys_cols,updated_at,user_display_properties"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of dataviews."
              description: "Minimal representation includes created_at,ds_id,id,name,status,updated_at"
              value: "__min"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            description: "Limit for how many dataviews to list"
            default: 50
            examples:
              - 2
          description: "Limit for how many dataviews to list"
          required: false
          examples:
            "limit-example-1":
              summary: "Sample limit"
              value: 2
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            description: "Offset for the dataviews list"
            default: 0
            examples:
              - 2
          description: "Offset for the dataviews list"
          required: false
          examples:
            "offset-example-1":
              summary: "Sample offset"
              value: 2
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            description: "Sort is a list of tuples in string format. Tuples are of the form (field, sort_order), separated by comma, where sort_order can be 'asc' or 'desc'. Allowed fields are ['id', 'name', 'ds_id', 'status', 'created_at']"
            examples:
              - "(id:desc)"
              - "(created_at:asc)"
              - "(ds_id:asc),(id:desc)"
          description: "Sort is a list of tuples in string format. Tuples are of the form (field, sort_order), separated by comma, where sort_order can be 'asc' or 'desc'. Allowed fields are ['id', 'name', 'ds_id', 'status', 'created_at']"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort listing of dataviews on the basis of id in descending order"
              value: "(id:desc)"
            "sort-example-2":
              summary: "Obtain dataviews in the order they were created"
              value: "(created_at:asc)"
            "sort-example-3":
              summary: "Sort dataviews on the basis of dataset id in ascending order, then for tiebreaks, sort on dataview id in descending order"
              value: "(ds_id:asc),(id:desc)"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewInfo"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobsGetResponse"}
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Dataviews"
      summary: "Create or duplicate dataview"
      description: "Create or duplicate dataview"
      operationId: "AddDataview"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: false
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema:
              oneOf:
                - type: "null"
                - {"$ref": "#/components/schemas/CreateDataview"}
              description: "Create or Duplicate Dataview"
        required: true
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateDataview"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-name-override: "add"
    delete:
      tags:
        - "Dataviews"
      summary: "Delete multiple dataviews"
      description: "Delete multiple dataviews"
      operationId: "DeleteMultipleDataviews"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            pattern: "^\\d+(,\\d+)*$"
            title: "Dataview IDs"
            description: "Comma separated integers for the dataviews ids within the dataset"
            examples:
              - "4,5"
          description: "Comma separated integers for the dataviews ids within the dataset"
          required: true
          examples:
            "ids-example-1":
              summary: "Sample dataview IDs within the dataset"
              value: "4,5"
      responses:
        "202":
          description: "Successfully deleted dataview"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewBulkDelete"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-name-override: "deleteMultiple"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}":
    get:
      tags:
        - "Dataviews"
      summary: "Get dataview information"
      description: "Get dataview information like id, row_count, column_count, metadata, taskwise info, status, etc"
      operationId: "GetDataviewInformationIndividual"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only dataview id and dataview name"
              value: "id,name"
            "fields-example-2":
              summary: "Return Full representation of dataviews."
              description: "Full representation includes column_count,created_at,data_updated_at,data_url,dependencies_info,display_properties,draft_mode,ds_id,id,is_dataview_data_in_sync,is_pipeline_running,metadata,name,original_data_updated,pipeline_autorun_enabled,pipeline_status,row_count,status,sys_cols,taskwise_info,updated_at,user_display_properties"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of dataviews."
              description: "Standard representation includes column_count,created_at,data_updated_at,data_url,dependencies_info,display_properties,ds_id,id,is_dataview_data_in_sync,metadata,name,original_data_updated,row_count,status,sys_cols,updated_at,user_display_properties"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of dataviews."
              description: "Minimal representation includes created_at,ds_id,id,name,status,updated_at"
              value: "__min"
        - name: "sequence"
          in: "query"
          schema:
            type: "integer"
            description: "Sequence number of the dataview task"
            default: 0
            examples:
              - 2
          description: "Sequence number of the dataview task"
          required: false
          examples:
            "sequence-example-1":
              summary: "Sample sequence number"
              value: 2
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewInfo"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-name-override: "getInformation"
    delete:
      tags:
        - "Dataviews"
      summary: "Delete dataview safely"
      description: "Delete dataview safely"
      operationId: "DeleteDataview"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      responses:
        "202":
          description: "Successfully deleted dataview"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewBulkDelete"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Dataviews"
      summary: "Patch dataview"
      description: "Update dataview properties like rename a dataview, reset a dataview, or apply display properties"
      operationId: "Patch"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataviewPatch"}
        required: true
      responses:
        "200":
          description: "Successfully updated dataview properties"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/activities":
    get:
      tags:
        - "Dataviews"
      summary: "Get list of active users on this dataview"
      description: "Get list of active users on this dataview"
      operationId: "GetActiveUsers"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewActiveUsers"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
    post:
      tags:
        - "Dataviews"
      summary: "Mark active user on this dataview"
      description: "Mark active user on this dataview"
      operationId: "MarkActiveUser"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataviewActiveUsers"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data":
    get:
      tags:
        - "Dataviews"
      summary: "Get dataview data"
      description: "Get dataview data"
      operationId: "GetDataviewData"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "sequence"
          in: "query"
          schema:
            type: "integer"
            description: "Sequence number of the dataview task"
            default: 0
            examples:
              - 2
          description: "Sequence number of the dataview task"
          required: false
          examples:
            "sequence-example-1":
              summary: "Sample sequence number"
              value: 2
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            description: "Offset is the starting position of rows at which we want to fetch data"
            default: 1
            examples:
              - 1
          description: "Offset is the starting position of rows at which we want to fetch data"
          required: false
          examples:
            "offset-example-1":
              summary: "Sample offset"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            description: "Limit is the number of rows we want to fetch"
            default: 400
            examples:
              - 1
          description: "Limit is the number of rows we want to fetch"
          required: false
          examples:
            "limit-example-1":
              summary: "Sample limit"
              value: 1
        - name: "columns"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - items:
                  type: "string"
                type: "array"
            description: "Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched."
            examples:
              - ["column_1", "column_2"]
          description: "Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets. If we don't pass anything, then all columns are fetched."
          required: false
          examples:
            "columns-example-1":
              summary: "Sample columns"
              value: ["column_1", "column_2"]
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            description: "Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three"
            examples:
              - "(column_1:asc)"
              - "(column_1:asc),(column_2:desc)"
          description: "Sort is a list of tuples in string format. Tuples are of the form (column_name, sort_order), separated by comma, where sort_order can be 'asc' or 'desc', limited to three"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort on column 1 in ascending order"
              value: "(column_1:asc)"
            "sort-example-2":
              summary: "Sort on column 1 in ascending order, then for tiebreaks, sort on column 2 in descending order"
              value: "(column_1:asc),(column_2:desc)"
      responses:
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-name-override: "getData"
    post:
      tags:
        - "Dataviews"
      summary: "Get dataview data"
      description: "Get dataview data"
      operationId: "GetDataviewDataPost"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataviewData"}
        required: true
      responses:
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-name-override: "retrievedata"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/data/generate":
    get:
      tags:
        - "Generate AI based data"
      summary: "Get validation information"
      description: "\n        This endpoint fetches validation information with regards to the external service used to generate the data e.g. limits for the Open AI key\n        "
      operationId: "GetValidationInfo"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "sequence"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            description: "Sequence number of the dataview task"
            examples:
              - 2
          description: "Sequence number of the dataview task"
          required: false
          examples:
            "sequence-example-1":
              summary: "Sample sequence number"
              value: 2
        - name: "validate_only"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            description: "Validate AI generation for the view"
            examples:
              - true
          description: "Validate AI generation for the view"
          required: false
          examples:
            "validate_only-example-1":
              summary: "Validate AI generation for the view"
              value: true
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/GenAIValidationSpec"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "generateAiBasedData"
    post:
      tags:
        - "Generate AI data"
      summary: "Generate AI preview data for a dataview for the given sequence"
      description: "Given the prompt, generate AI data againt a sequence number in the pipeline"
      operationId: "Preview"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "sequence"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            description: "Sequence number of the dataview task"
            examples:
              - 2
          description: "Sequence number of the dataview task"
          required: false
          examples:
            "sequence-example-1":
              summary: "Sample sequence number"
              value: 2
        - name: "model_type"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "openai"
              - "groq"
              - null
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/GenAISpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "200":
          description: "AI data generated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/GenAIData"}
      x-speakeasy-group: "generateAiData"
  "/workspaces/{workspace_id}/projects/{project_id}/suggestions":
    post:
      tags:
        - "Dataviews"
        - "generate Data based on AI"
      summary: "Generate AI-based Suggestions for Dataview"
      description: "Given the prompt, generate AI data againt a sequence number in the pipeline"
      operationId: "AiSuggestions"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "query"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: false
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UnifiedPromptSpec"}
        required: true
      responses:
        "201":
          description: "Regex and example generated successfully"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "200":
          description: "The request was processed successfully, but a valid regex pattern could not be generated"
          content:
            "application/json":
              schema:
                type: "object"
  "/workspaces/{workspace_id}/projects/{project_id}/sql_generation":
    post:
      tags:
        - "Dataviews"
        - "SQL Generation"
      summary: "Generate SQL query based on intent"
      description: "Given the intent, generate SQL query for a sequence number in the pipeline"
      operationId: "GenerateSql"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "query"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: false
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SQLGenerationSpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "object"
                  - {}
        "400":
          description: "Failed to generate SQL query"
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "200":
          description: "SQL query generated successfully"
          content:
            "application/json":
              schema:
                type: "object"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/profile_generation":
    post:
      tags:
        - "Dataviews"
        - "Generate Profile"
      summary: "Generate or Update Dataset Profile"
      description: "Triggers AI-based profiling for a given dataview."
      operationId: "GenerateProfile"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProfileGenerationSpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "202":
          description: "Successfully Submitted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline":
    get:
      tags:
        - "Dataview pipeline"
      summary: "Get dataview pipeline information"
      description: "\n        This endpoint fetches useful information of a dataview pipeline including some stats. This endpoint, representing a singular resource doesn't allow any filters.\n        "
      operationId: "GetPipeline"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "state, draft_mode"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only pipeline state and it's draft_mode"
              value: "state, draft_mode"
            "fields-example-2":
              summary: "Return Full representation of a pipeline"
              description: "Full representation includes state,draft_mode,auto_run,stats"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of a pipeline"
              description: "Standard representation includes state,draft_mode,auto_run"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of a pipeline"
              description: "Minimal representation includes state,draft_mode,auto_run"
              value: "__min"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineInfo"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-group: "dataviewPipeline"
      x-speakeasy-name-override: "get"
    patch:
      tags:
        - "Dataview pipeline"
      summary: "Edit and perform bulk operations on a dataview pipeline"
      description: "\n        This endpoint allows\n        - Editing a pipeline. Supported operations are\n          - Reorder\n          - Reset\n          - Run\n          - Discard-changes\n          - Set auto-run\n        - Bulk operations on(items of) the pipeline\n          - suspend\n          - restore\n          - discard\n        "
      operationId: "EditPipeline"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "skip_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
        - name: "force_run"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PipelinePatches"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/PipelineModificationResp"}
                  - {"$ref": "#/components/schemas/PipelineAutoRunResp"}
                  - items: {"$ref": "#/components/schemas/PipelineExortsModificationResp"}
                    type: "array"
                    examples:
                      - [{"trigger_id": 0, "status": null, "future_id": 2873}]
                examples:
                  - {"type_of_modification": "reset_pipeline", "status": "error", "has_error": true, "error_code": 8229, "error_info": null, "future_id": 9064, "param": {"push": "iaVjcODaCAWEhGPYqEcX", "color": "tHawTFGHbWEYOvEFzmCs", "guess": "http://www.sanchez-jones.biz/appsearch.htm", "painting": "RtalGDkNbiAFVtQypXzK", "data": 61.821602046927, "well": 1102, "way": "swfSCXHPiclvcWpPcSrA", "person": "https://perez-jones.net/explore/applogin.html", "service": 4393}}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Request to edit pipeline succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipeline"
      x-speakeasy-name-override: "edit"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/tasks":
    get:
      tags:
        - "Dataview pipeline Tasks"
      summary: "Get dataview pipeline tasks information"
      description: "\n        This endpoint fetches tasks information of tasks in a dataview pipeline.\n        "
      operationId: "GetPipelineTasks"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "sequence,status"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return task sequence and status"
              value: "sequence,status"
            "fields-example-2":
              summary: "Return Full representation of pipeline tasks"
              description: "Full representation includes id,sequence,dataview_id,status,created_at,params,reordered,data_pass_through,execution_start_time,execution_end_time,prev_metadata,transform_status,data_size,row_count,reference_errors"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of pipeline tasks"
              description: "Standard representation includes id,sequence,dataview_id,status,created_at,params,reordered,data_pass_through,execution_start_time,execution_end_time"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of pipeline tasks"
              description: "Minimal representation includes id,sequence,dataview_id,status"
              value: "__min"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort by the given fields"
            description: "Returned results are sorted by the combination of the given fields."
            default: "(id:asc)"
            examples:
              - "(id:asc)"
              - "(id:asc),(name:asc)"
          description: "Returned results are sorted by the combination of the given fields."
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by <Resource>.id asc"
              value: "(id:asc)"
            "sort-example-2":
              summary: "Sort by <Resource>_id and <Resource>_name asc"
              value: "(id:asc),(name:asc)"
        - name: "sequence"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            title: "Filter by the given sequence"
            description: "Returns all tasks where sequence matches the given value"
            examples:
              - 2
          description: "Returns all tasks where sequence matches the given value"
          required: false
          examples:
            "sequence-example-1":
              value: 2
        - name: "status"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "deleted"
              - "executed"
              - "executing"
              - "edited"
              - "added"
              - "suspended"
              - "suspending"
              - null
            title: "Filter by status"
            description: "Returns all tasks where status matches the given value"
            examples:
              - "executed"
              - "suspended"
          description: "Returns all tasks where status matches the given value"
          required: false
          examples:
            "status-example-1":
              summary: "List only those tasks that are executed"
              value: "executed"
            "status-example-2":
              summary: "List only those tasks that are currently suspended"
              value: "suspended"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineTasksPaginated"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "dataviewPipelineTasks"
    post:
      tags:
        - "Dataview pipeline Tasks"
      summary: "Add a task in the pipeline"
      description: "add a new transformation to the dataview. This transformation gets added as a task in the dataview pipeline"
      operationId: "AddTask"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddTaskSpec"}
        required: true
      responses:
        "201":
          description: "Task either could not be added or added in draft mode"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineModificationResp"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "202":
          description: "Request to add task succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipelineTasks"
      x-speakeasy-name-override: "add"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/tasks/{task_id}":
    get:
      tags:
        - "Dataview pipeline Task"
      summary: "Get dataview pipeline task information"
      description: "\n        This endpoint fetches information of a task in a dataview pipeline.\n        "
      operationId: "GetPipelineTask"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "task_id"
          in: "path"
          schema:
            type: "integer"
            title: "TaskID"
            description: "Id of a pipeline task"
            examples:
              - 121
          description: "Id of a pipeline task"
          required: true
          examples:
            "task_id-example-1":
              summary: "Sample Task ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "sequence,status"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return task sequence and status"
              value: "sequence,status"
            "fields-example-2":
              summary: "Return Full representation of pipeline tasks"
              description: "Full representation includes id,sequence,dataview_id,status,created_at,params,reordered,data_pass_through,execution_start_time,execution_end_time,prev_metadata,transform_status,data_size,row_count,reference_errors"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of pipeline tasks"
              description: "Standard representation includes id,sequence,dataview_id,status,created_at,params,reordered,data_pass_through,execution_start_time,execution_end_time"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of pipeline tasks"
              description: "Minimal representation includes id,sequence,dataview_id,status"
              value: "__min"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ItemTaskInfo"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-group: "dataviewPipelineTasks"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Dataview pipeline Task"
      summary: "Delete a task"
      description: "Deletes a pipeline task "
      operationId: "DeleteTask"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "task_id"
          in: "path"
          schema:
            type: "integer"
            title: "TaskID"
            description: "Id of a pipeline task"
            examples:
              - 121
          description: "Id of a pipeline task"
          required: true
          examples:
            "task_id-example-1":
              summary: "Sample Task ID"
              value: 121
        - name: "skip_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      responses:
        "202":
          description: "Request to deleted task succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "201":
          description: "Task either could not be deleted or deleted in draft mode"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineModificationResp"}
      x-speakeasy-group: "dataviewPipelineTasks"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Dataview pipeline Task"
      summary: "Edit a dataview pipeline task"
      description: "Modify a task, e.g. the params, the display_info(e.g. note), status(e.g. suspend a task)"
      operationId: "EditTask"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "task_id"
          in: "path"
          schema:
            type: "integer"
            title: "TaskID"
            description: "Id of a pipeline task"
            examples:
              - 121
          description: "Id of a pipeline task"
          required: true
          examples:
            "task_id-example-1":
              summary: "Sample Task ID"
              value: 121
        - name: "skip_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/TaskPatch"}
        required: true
      responses:
        "200":
          description: "Task edited, check response for details"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/PipelineModificationResp"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Request to edit task succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipelineTasks"
      x-speakeasy-name-override: "edit"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports":
    get:
      tags:
        - "Dataview pipeline Exports"
      summary: "Get dataview pipeline exports information"
      description: "\n        This endpoint fetches exports information of exports in a dataview pipeline.\n        "
      operationId: "GetPipelineExports"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "sequence,status"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return export sequence and status"
              value: "sequence,status"
            "fields-example-2":
              summary: "Return Full representation of pipeline exports"
              description: "Full representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable,reordered,data_pass_through,additional_properties,condition,last_modified_time,execution_start_time,execution_end_time,last_run_result,error_info"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of pipeline exports"
              description: "Standard representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable,reordered,data_pass_through,additional_properties,condition,last_modified_time,execution_start_time,execution_end_time"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of pipeline exports"
              description: "Minimal representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable"
              value: "__min"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort by the given fields"
            description: "Returned results are sorted by the combination of the given fields."
            default: "(id:asc)"
            examples:
              - "(id:asc)"
              - "(id:asc),(name:asc)"
          description: "Returned results are sorted by the combination of the given fields."
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by <Resource>.id asc"
              value: "(id:asc)"
            "sort-example-2":
              summary: "Sort by <Resource>_id and <Resource>_name asc"
              value: "(id:asc),(name:asc)"
        - name: "sequence"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            title: "Filter by the given sequence"
            description: "Returns all exports where sequence matches the given value"
            examples:
              - 2
          description: "Returns all exports where sequence matches the given value"
          required: false
          examples:
            "sequence-example-1":
              value: 2
        - name: "status"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "deleted"
              - "executed"
              - "executing"
              - "edited"
              - "added"
              - "suspended"
              - "suspending"
              - null
            title: "Filter by status"
            description: "Returns all exports where status matches the given value"
            examples:
              - "executed"
              - "suspended"
          description: "Returns all exports where status matches the given value"
          required: false
          examples:
            "status-example-1":
              summary: "List only those exports that are executed"
              value: "executed"
            "status-example-2":
              summary: "List only those exports that are currently suspended"
              value: "suspended"
        - name: "reorderd"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Filter by the given boolean of reordered"
            description: "Returns all exports where reordered status matches the given value"
            examples:
              - false
          description: "Returns all exports where reordered status matches the given value"
          required: false
          examples:
            "reorderd-example-1":
              value: false
        - name: "handler_type"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "postgres"
              - "csv_file"
              - "s3"
              - "mysql"
              - "mssql"
              - "ftp"
              - "sftp"
              - "email"
              - "elasticsearch"
              - "powerbi"
              - "redshift"
              - "bigquery"
              - "internal_dataset"
              - "publishdb"
              - null
            title: "Filter by the given value of handler type"
            description: "Returns all exports where handler type matches the given value"
            examples:
              - "bigquery"
          description: "Returns all exports where handler type matches the given value"
          required: false
          examples:
            "handler_type-example-1":
              value: "bigquery"
        - name: "end_of_pipeline"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Filter by the given boolean of end of pipeline"
            description: "Returns all exports where end of pipeline boolean matches the given value"
            examples:
              - false
          description: "Returns all exports where end of pipeline boolean matches the given value"
          required: false
          examples:
            "end_of_pipeline-example-1":
              value: false
        - name: "runnable"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Filter by the given boolean of runnable"
            description: "Returns all exports where runnable status matches the given value"
            examples:
              - false
          description: "Returns all exports where runnable status matches the given value"
          required: false
          examples:
            "runnable-example-1":
              value: false
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineExportsPaginated"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "dataviewPipelineExports"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Dataview pipeline Exports"
      summary: "Add a export in the pipeline"
      description: "add a new transformation to the dataview. This transformation gets added as a export in the dataview pipeline"
      operationId: "AddExport"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddExportSpec"}
        required: true
      responses:
        "201":
          description: "Export either could not be added or added in draft mode"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineExortsModificationResp"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "202":
          description: "Request to add export succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipelineExports"
      x-speakeasy-name-override: "add"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/exports/{export_id}":
    get:
      tags:
        - "Dataview pipeline Export"
      summary: "Get dataview pipeline export information"
      description: "\n        This endpoint fetches information of a export in a dataview pipeline.\n        "
      operationId: "GetPipelineExport"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "export_id"
          in: "path"
          schema:
            type: "integer"
            title: "ExportID"
            description: "Id of a pipeline export"
            examples:
              - 121
          description: "Id of a pipeline export"
          required: true
          examples:
            "export_id-example-1":
              summary: "Sample Export ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "sequence,status"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return export sequence and status"
              value: "sequence,status"
            "fields-example-2":
              summary: "Return Full representation of pipeline exports"
              description: "Full representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable,reordered,data_pass_through,additional_properties,condition,last_modified_time,execution_start_time,execution_end_time,last_run_result,error_info"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of pipeline exports"
              description: "Standard representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable,reordered,data_pass_through,additional_properties,condition,last_modified_time,execution_start_time,execution_end_time"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of pipeline exports"
              description: "Minimal representation includes id,dataview_id,sequence,sub_sequence,handler_type,trigger_type,end_of_pipeline,status,target_properties,runnable"
              value: "__min"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ItemExportInfo"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-group: "dataviewPipelineExports"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Dataview pipeline Export"
      summary: "Delete an export"
      description: "Deletes a pipeline export "
      operationId: "DeleteExport"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "export_id"
          in: "path"
          schema:
            type: "integer"
            title: "ExportID"
            description: "Id of a pipeline export"
            examples:
              - 121
          description: "Id of a pipeline export"
          required: true
          examples:
            "export_id-example-1":
              summary: "Sample Export ID"
              value: 121
        - name: "skip_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                oneOf:
                  - {"$ref": "#/components/schemas/PipelineExortsModificationResp"}
                  - {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "201":
          description: "Export either could not be deleted or deleted in draft mode"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineExortsModificationResp"}
        "202":
          description: "Request to deleted export succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipelineExport"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Dataview pipeline Export"
      summary: "Edit a dataview pipeline export"
      description: "Modify a export, e.g. the params, the display_info(e.g. note), status(e.g. suspend a export)"
      operationId: "EditExport"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "export_id"
          in: "path"
          schema:
            type: "integer"
            title: "ExportID"
            description: "Id of a pipeline export"
            examples:
              - 121
          description: "Id of a pipeline export"
          required: true
          examples:
            "export_id-example-1":
              summary: "Sample Export ID"
              value: 121
        - name: "skip_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ExportPatch"}
        required: true
      responses:
        "200":
          description: "Export edited, check response for details"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/PipelineExortsModificationResp"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
        "202":
          description: "Request to edit export succeeded"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
      x-speakeasy-group: "dataviewPipelineExports"
      x-speakeasy-name-override: "edit"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/pipeline/items":
    get:
      tags:
        - "Dataview pipeline Items"
      summary: "Get dataview pipeline items"
      description: "\n        This endpoint gives information about items in the pipeline. Currently items in the pipeline can be\n        either a Task or an Export. See `datviews/{<id>}/tasks` and `dataviews/{<id>}/exports` APIs for more information.\n        "
      operationId: "GetPipelineItems"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "sequence, status"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only item sequene and status"
              value: "sequence, status"
            "fields-example-2":
              summary: "Return Full representation of pipeline items"
              description: "Full representation includes id,dataview_id,sequence,status,reordered,data_pass_through,handler_type,trigger_type,runnable,data_size,row_count,execution_start_time,execution_end_time,error_info,reference_errors"
              value: "__full"
            "fields-example-3":
              summary: "Return Standard representation of pipeline items"
              description: "Standard representation includes id,dataview_id,sequence,status,reordered,data_pass_through,handler_type,trigger_type,runnable,data_size,row_count,execution_start_time,execution_end_time"
              value: "__standard"
            "fields-example-4":
              summary: "Return Minimal representation of pipeline items"
              description: "Minimal representation includes id,dataview_id,sequence,status,reordered,data_pass_through,handler_type,trigger_type,runnable"
              value: "__min"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort by the given fields"
            description: "Returned results are sorted by the combination of the given fields."
            default: "(id:asc)"
            examples:
              - "(id:asc)"
              - "(id:asc),(name:asc)"
          description: "Returned results are sorted by the combination of the given fields."
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by <Resource>.id asc"
              value: "(id:asc)"
            "sort-example-2":
              summary: "Sort by <Resource>_id and <Resource>_name asc"
              value: "(id:asc),(name:asc)"
        - name: "sequence"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            title: "Filter by the given sequence"
            description: "Returns all items where sequence matches the given value"
            examples:
              - 2
          description: "Returns all items where sequence matches the given value"
          required: false
          examples:
            "sequence-example-1":
              value: 2
        - name: "status"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "deleted"
              - "executed"
              - "executing"
              - "edited"
              - "added"
              - "suspended"
              - "suspending"
              - null
            title: "Filter by status"
            description: "Returns all items where status matches the given value"
            examples:
              - "added"
              - "executing"
          description: "Returns all items where status matches the given value"
          required: false
          examples:
            "status-example-1":
              summary: "List only those items that are newly added to the pipeline(in draft mode)"
              value: "added"
            "status-example-2":
              summary: "List items that are currently being executed"
              value: "executing"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PipelineItemsPaginated"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-group: "pipelineItems"
      x-speakeasy-name-override: "get"
  "/jobs/{job_id}":
    get:
      tags:
        - "Jobs"
      summary: "Get job by id"
      description: "Job are way to get results of long running tasks.             It either returns processing if tasks are still is running or                 result of task if it is completed"
      operationId: "GetJob"
      parameters:
        - name: "job_id"
          in: "path"
          schema:
            type: "integer"
            title: "Job id to to get status"
            description: "Job id is unique identifier for Job object. If processing is not completed, it will return processing otherwise it will have information about Job"
            default: 10
            examples:
              - 10
          description: "Job id is unique identifier for Job object. If processing is not completed, it will return processing otherwise it will have information about Job"
          required: true
          examples:
            "job_id-example-1":
              summary: "Returns details of Job id 10"
              value: 10
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-speakeasy-name-override: "get"
  "/jobs":
    get:
      tags:
        - "Jobs"
      summary: "Track multiple job ids"
      description: "Returns job objects for given list of job ids"
      operationId: "GetJobs"
      parameters:
        - name: "job_ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of job ids to to get status"
            description: "Track multiple job ids, comma separated"
            default: ""
            examples:
              - "10,11,12"
          description: "Track multiple job ids, comma separated"
          required: false
          examples:
            "job_ids-example-1":
              summary: "Returns details of job ids 10, 11 and 12"
              value: "10,11,12"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobsGetResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-speakeasy-name-override: "list"
  "/workspaces/{workspace_id}/clientapps/{client_key}":
    get:
      tags:
        - "Client Apps"
      summary: "Get client app details"
      description: "Get client app details"
      operationId: "AppDetails"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "client_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 200
            minLength: 16
            title: "Client Key"
            description: "Id of the client key to work with"
            examples:
              - "abcdefasdfafdsfaf345asf"
          description: "Id of the client key to work with"
          required: true
          examples:
            "client_key-example-1":
              summary: "Sample client key ID"
              value: "abcdefasdfafdsfaf345asf"
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, app_name)"
            default: "__standard"
            examples:
              - "id,app_name"
          description: "Fields to return. Can be (id, app_name)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and app_name in the result"
              value: "id,app_name"
      responses:
        "200":
          description: "Get client app details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ClientAppSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "clientApps"
      x-speakeasy-name-override: "getDetails"
    delete:
      tags:
        - "Client Apps"
      summary: "Delete a client app"
      description: "Delete a client app"
      operationId: "DeleteApp"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "client_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 200
            minLength: 16
            title: "Client Key"
            description: "Id of the client key to work with"
            examples:
              - "abcdefasdfafdsfaf345asf"
          description: "Id of the client key to work with"
          required: true
          examples:
            "client_key-example-1":
              summary: "Sample client key ID"
              value: "abcdefasdfafdsfaf345asf"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Successful delete"
      x-speakeasy-group: "clientApps"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Client Apps"
      summary: "Update client app"
      description: "Update client app details like name, description, secret etc"
      operationId: "UpdateApp"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "client_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 200
            minLength: 16
            title: "Client Key"
            description: "Id of the client key to work with"
            examples:
              - "abcdefasdfafdsfaf345asf"
          description: "Id of the client key to work with"
          required: true
          examples:
            "client_key-example-1":
              summary: "Sample client key ID"
              value: "abcdefasdfafdsfaf345asf"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PatchRequest"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ClientAppSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "clientApps"
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/clientapps":
    get:
      tags:
        - "Client Apps"
      summary: "Get list of client apps"
      description: "Get list of client apps specific to given user and workspace"
      operationId: "ListApps"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 10
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 0
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 0
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, app_name)"
            default: "__standard"
            examples:
              - "id,app_name"
          description: "Fields to return. Can be (id, app_name)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and app_name in the result"
              value: "id,app_name"
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            title: "Order by column name"
            description: "Returned client apps based on this parameter Use the format '(field:asc)' for ascending and '(field:desc)' for descending order."
            examples:
              - "(last_usage:asc),(id:desc)"
          description: "Returned client apps based on this parameter Use the format '(field:asc)' for ascending and '(field:desc)' for descending order."
          required: false
          examples:
            "sort-example-1":
              summary: "Order by client_apps.id in descending order"
              value: "(last_usage:asc),(id:desc)"
      responses:
        "200":
          description: "List of client apps"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ClientAppsList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "clientApps"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Client Apps"
      summary: "Create api tokens to access api"
      description: "Create api tokens to a user for a workspace to access APIs"
      operationId: "CreateApp"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ClientAppCreate"}
        required: true
      responses:
        "201":
          description: "Successful create"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ClientAppPostResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "clientApps"
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}/external_keys":
    get:
      tags:
        - "External keys"
      summary: "Get external keys of the given Workspace ID"
      description: "\n        This endpoint fetches all external keys added as part of the given Workspace ID\n        "
      operationId: "GetKeysByWorkspaceId"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "key_type,key_name,created_by_user_id"
              - "__standard"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return key_type, key_name and created_by_user_id"
              value: "key_type,key_name,created_by_user_id"
            "fields-example-2":
              summary: "Return Standard representation of external keys"
              description: "Standard representation includes id,key_type,key_name,description,secure_key,is_in_use,created_by_user_id,last_used_at,last_used_by_user_id"
              value: "__standard"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort by the given fields"
            description: "Returned results are sorted by the combination of the given fields."
            default: "(id:asc)"
            examples:
              - "(id:asc)"
              - "(id:asc),(name:asc)"
          description: "Returned results are sorted by the combination of the given fields."
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by <Resource>.id asc"
              value: "(id:asc)"
            "sort-example-2":
              summary: "Sort by <Resource>_id and <Resource>_name asc"
              value: "(id:asc),(name:asc)"
        - name: "key_type"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "open_ai"
              - null
            title: "Filter by key type"
            description: "Returns all tasks where key type matches the given type"
            examples:
              - "open_ai"
          description: "Returns all tasks where key type matches the given type"
          required: false
          examples:
            "key_type-example-1":
              summary: "List those keys that are of type open_ai"
              value: "open_ai"
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ExternalKeysPaginated"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "externalKeys"
      x-speakeasy-name-override: "getByWorkspaceId"
    post:
      tags:
        - "External keys"
      summary: "Add external keys to access the intended services"
      description: "External keys that lets Mammoth to user certain services. User brings their own key to access the service e.g AI based rules need an Open AI key"
      operationId: "AddExternalKey"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddExternalKeySpec"}
        required: true
      responses:
        "201":
          description: "Successful create"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ExternalKey"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "externalKeys"
      x-speakeasy-name-override: "add"
  "/workspaces/{workspace_id}/external_keys/{key_id}":
    get:
      tags:
        - "External key"
      summary: "Get the given external key"
      description: "\n        Fetches information about an external_key, optionally returns validation info\n        "
      operationId: "GetExternalKey"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
            default: "__standard"
            examples:
              - "key_type,key_name,created_by_user_id"
              - "__standard"
          description: "Fields to be returned in a comma-separated format. Check full mode for all fields."
          required: false
          examples:
            "fields-example-1":
              summary: "Return key_type, key_name and created_by_user_id"
              value: "key_type,key_name,created_by_user_id"
            "fields-example-2":
              summary: "Return Standard representation of external keys"
              description: "Standard representation includes id,key_type,key_name,description,secure_key,is_in_use,created_by_user_id,last_used_at,last_used_by_user_id"
              value: "__standard"
        - name: "key_id"
          in: "path"
          schema:
            type: "integer"
            title: "ExternalKeyId"
            description: "Id of an external key"
            examples:
              - 121
          description: "Id of an external key"
          required: true
          examples:
            "key_id-example-1":
              value: 121
        - name: "validate"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            description: "When True, Validates the key"
            examples:
              - true
          description: "When True, Validates the key"
          required: false
          examples:
            "validate-example-1":
              summary: "Validates the key and returns validation info in the response"
              value: true
      responses:
        "200":
          description: "Success"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ExternalKeyResp"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "Authorization error"
        "404":
          description: "Nothing matches the given URI"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Not Found Exception"
                examples:
                  - {"status_code": 404, "detail": "Not Found", "extra": {}}
      x-speakeasy-group: "externalKey"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "External key"
      summary: "Delete an external key"
      description: "Delete an external key from the DB. Doesnt not delete the corresponding key from the service"
      operationId: "DeleteExternalKey"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "key_id"
          in: "path"
          schema:
            type: "integer"
            title: "ExternalKeyId"
            description: "Id of an external key"
            examples:
              - 121
          description: "Id of an external key"
          required: true
          examples:
            "key_id-example-1":
              value: 121
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Successful delete"
      x-speakeasy-group: "externalKeys"
      x-speakeasy-name-override: "delete"
  "/gdpr_hooks/{integration_name}/deauthorization":
    post:
      tags:
        - "Deauthorization"
      summary: "Delete user's data from the system"
      description: "This endpoint is used to delete user's data from the system"
      operationId: "DeleteUserData"
      parameters:
        - name: "integration_name"
          in: "path"
          schema:
            type: "string"
            enum:
              - "zoom"
            title: "Integration Name"
            description: "Integration for which the data should be deleted"
            default: "zoom"
            examples:
              - "zoom"
          description: "Integration for which the data should be deleted"
          required: true
          examples:
            "integration_name-example-1":
              summary: "Integration name"
              value: "zoom"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ZoomDeAuthorizationRequest"}
        required: true
      responses:
        "200":
          description: "Successful create"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DeAuthorizationPostResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
  "/gdpr_hooks/shopify/customers/redact":
    post:
      tags:
        - "Shopify Privacy Webhooks"
      summary: "Delete requested shopify customer orders data from the system"
      description: "Delete requested shopify customer orders data from the system"
      operationId: "ShopifyCustomerRedact"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ShopifyCustomerRedactRequest"}
        required: true
      responses:
        "200":
          description: "Successful"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ShopifyCustomerRedactResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "shopifyPrivacyWebhooks"
      x-speakeasy-name-override: "redactCustomer"
  "/gdpr_hooks/shopify/customers/data_request":
    post:
      tags:
        - "Shopify Privacy Webhooks"
      summary: "Get requested data of shopify user"
      description: "Get requested data of shopify user"
      operationId: "ShopifyDataRequest"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ShopifyDataRequest"}
        required: true
      responses:
        "200":
          description: "Successful"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ShopifyDataRequestResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "shopifyPrivacyWebhooks"
      x-speakeasy-name-override: "dataRequest"
  "/gdpr_hooks/shopify/shop/redact":
    post:
      tags:
        - "Shopify Privacy Webhooks"
      summary: "Delete requested shopify shop's data from the system"
      description: "Delete requested shopify shop's data from the system"
      operationId: "ShopifyShopRedact"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ShopifyShopRedactRequest"}
        required: true
      responses:
        "200":
          description: "Successful"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ShopifyShopRedactResponse"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "shopifyPrivacyWebhooks"
      x-speakeasy-name-override: "shopRedact"
  "/browse":
    get:
      tags:
        - "Browse"
      summary: "Browse and discover resources"
      description: "Get all resources as defined by resource hierarchy"
      operationId: "BrowseResources"
      parameters:
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,type,name,created_at,updated_at,url,additional_info,children"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of resources. Full representation includes id,type,resource_id,name,updated_at,created_at,status,url,additional_info,children"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of resources. standard representation includes id,type,name,created_at,updated_at,url,additional_info,children"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of resources. Minimal representation includes id,type,name,url,additional_info,children"
              value: "__min"
        - name: "name"
          in: "query"
          schema:
            type: "string"
            title: "Get resources by name"
            description: "Fetch all resources which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Project"
          description: "Fetch all resources which matches given name (case sensitive)"
          required: false
          examples:
            "name-example-1":
              summary: "return resources which matches given name"
              value: "My Project"
        - name: "browse_type"
          in: "query"
          schema:
            type: "string"
            title: "Get only specific resource"
            description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
            default: ""
            examples:
              - "project,workspace"
          description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
          required: false
          examples:
            "browse_type-example-1":
              summary: "return resources of type project and workspace"
              value: "project,workspace"
        - name: "created_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource creation time"
            description: "Filter resources by creation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by creation time"
          required: false
          examples:
            "created_at-example-1":
              summary: "return resources which matches given creation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource updation time"
            description: "Filter resources by updation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by updation time"
          required: false
          examples:
            "updated_at-example-1":
              summary: "return resources which matches given updation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort resources"
            description: "Sort resources by resource type"
            default: "(id:asc)"
            examples:
              - "(workspace:asc),(dataview:desc)"
          description: "Sort resources by resource type"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by workspace and then by dataviews"
              value: "(workspace:asc),(dataview:desc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the resources list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the resources list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd resource"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of resources to return"
            default: 10
            examples:
              - 10
          description: "Max number of resources to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned resources count to 10"
              value: 10
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Fetch only specific resources as given by id"
            description: "Filter resources by object ids, provided as comma separated integer values"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter resources by object ids, provided as comma separated integer values"
          required: false
          examples:
            "ids-example-1":
              summary: "return resources of ids 1,2,3"
              value: "1,2,3"
        - name: "include_hidden"
          in: "query"
          schema:
            type: "boolean"
            title: "Include hidden resources"
            description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
            default: false
            examples:
              - false
              - true
          description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
          required: false
          examples:
            "include_hidden-example-1":
              summary: "Do not include hidden resources (default)"
              value: false
            "include_hidden-example-2":
              summary: "Include hidden resources"
              value: true
        - name: "level"
          in: "query"
          schema:
            type: "integer"
            maximum: 2
            minimum: 1
            title: "Show resources at given level"
            description: "level=2 includes children of each resources"
            default: 2
            examples:
              - 2
              - 1
          description: "level=2 includes children of each resources"
          required: false
          examples:
            "level-example-1":
              summary: "Include child resources (default)"
              value: 2
            "level-example-2":
              summary: "Do not include children resources"
              value: 1
        - name: "permissions"
          in: "query"
          schema:
            type: "boolean"
            title: "Include permissions in resource"
            description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
            default: false
            examples:
              - false
              - true
          description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
          required: false
          examples:
            "permissions-example-1":
              summary: "Do not include permissions (default)"
              value: false
            "permissions-example-2":
              summary: "Include permissions"
              value: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "get"
  "/workspaces/{workspace_id}/projects/{project_id}/folders/{folder_id}/browse":
    get:
      tags:
        - "Browse"
      summary: "Browse and discover folder resources"
      description: "Lists all resources in a folder e.g. datasets, dataviews, other folders."
      operationId: "BrowseFolderFolders"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "folder_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Folder ID"
            description: "Folder ID of the foler"
            default: 4
            examples:
              - 4
          description: "Folder ID of the foler"
          required: true
          examples:
            "folder_id-example-1":
              summary: "Sample folder ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,type,name,created_at,updated_at,url,additional_info,children"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of resources. Full representation includes id,type,resource_id,name,updated_at,created_at,status,url,additional_info,children"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of resources. standard representation includes id,type,name,created_at,updated_at,url,additional_info,children"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of resources. Minimal representation includes id,type,name,url,additional_info,children"
              value: "__min"
        - name: "name"
          in: "query"
          schema:
            type: "string"
            title: "Get resources by name"
            description: "Fetch all resources which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Project"
          description: "Fetch all resources which matches given name (case sensitive)"
          required: false
          examples:
            "name-example-1":
              summary: "return resources which matches given name"
              value: "My Project"
        - name: "browse_type"
          in: "query"
          schema:
            type: "string"
            title: "Get only specific resource"
            description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
            default: ""
            examples:
              - "project,workspace"
          description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
          required: false
          examples:
            "browse_type-example-1":
              summary: "return resources of type project and workspace"
              value: "project,workspace"
        - name: "created_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource creation time"
            description: "Filter resources by creation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by creation time"
          required: false
          examples:
            "created_at-example-1":
              summary: "return resources which matches given creation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource updation time"
            description: "Filter resources by updation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by updation time"
          required: false
          examples:
            "updated_at-example-1":
              summary: "return resources which matches given updation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort resources"
            description: "Sort resources by resource type"
            default: "(id:asc)"
            examples:
              - "(workspace:asc),(dataview:desc)"
          description: "Sort resources by resource type"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by workspace and then by dataviews"
              value: "(workspace:asc),(dataview:desc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the resources list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the resources list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd resource"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of resources to return"
            default: 10
            examples:
              - 10
          description: "Max number of resources to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned resources count to 10"
              value: 10
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Fetch only specific resources as given by id"
            description: "Filter resources by object ids, provided as comma separated integer values"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter resources by object ids, provided as comma separated integer values"
          required: false
          examples:
            "ids-example-1":
              summary: "return resources of ids 1,2,3"
              value: "1,2,3"
        - name: "include_hidden"
          in: "query"
          schema:
            type: "boolean"
            title: "Include hidden resources"
            description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
            default: false
            examples:
              - false
              - true
          description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
          required: false
          examples:
            "include_hidden-example-1":
              summary: "Do not include hidden resources (default)"
              value: false
            "include_hidden-example-2":
              summary: "Include hidden resources"
              value: true
        - name: "level"
          in: "query"
          schema:
            type: "integer"
            maximum: 2
            minimum: 1
            title: "Show resources at given level"
            description: "level=2 includes children of each resources"
            default: 2
            examples:
              - 2
              - 1
          description: "level=2 includes children of each resources"
          required: false
          examples:
            "level-example-1":
              summary: "Include child resources (default)"
              value: 2
            "level-example-2":
              summary: "Do not include children resources"
              value: 1
        - name: "permissions"
          in: "query"
          schema:
            type: "boolean"
            title: "Include permissions in resource"
            description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
            default: false
            examples:
              - false
              - true
          description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
          required: false
          examples:
            "permissions-example-1":
              summary: "Do not include permissions (default)"
              value: false
            "permissions-example-2":
              summary: "Include permissions"
              value: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "folders"
  "/workspaces/{workspace_id}/projects/{project_id}/browse":
    get:
      tags:
        - "Browse"
      summary: "Browse and discover project resources"
      description: "Lists resources in a project e.g. datasets, dataviews."
      operationId: "BrowseProjectProjects"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,type,name,created_at,updated_at,url,additional_info,children"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of resources. Full representation includes id,type,resource_id,name,updated_at,created_at,status,url,additional_info,children"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of resources. standard representation includes id,type,name,created_at,updated_at,url,additional_info,children"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of resources. Minimal representation includes id,type,name,url,additional_info,children"
              value: "__min"
        - name: "name"
          in: "query"
          schema:
            type: "string"
            title: "Get resources by name"
            description: "Fetch all resources which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Project"
          description: "Fetch all resources which matches given name (case sensitive)"
          required: false
          examples:
            "name-example-1":
              summary: "return resources which matches given name"
              value: "My Project"
        - name: "browse_type"
          in: "query"
          schema:
            type: "string"
            title: "Get only specific resource"
            description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
            default: ""
            examples:
              - "project,workspace"
          description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
          required: false
          examples:
            "browse_type-example-1":
              summary: "return resources of type project and workspace"
              value: "project,workspace"
        - name: "created_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource creation time"
            description: "Filter resources by creation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by creation time"
          required: false
          examples:
            "created_at-example-1":
              summary: "return resources which matches given creation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource updation time"
            description: "Filter resources by updation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by updation time"
          required: false
          examples:
            "updated_at-example-1":
              summary: "return resources which matches given updation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort resources"
            description: "Sort resources by resource type"
            default: "(id:asc)"
            examples:
              - "(workspace:asc),(dataview:desc)"
          description: "Sort resources by resource type"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by workspace and then by dataviews"
              value: "(workspace:asc),(dataview:desc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the resources list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the resources list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd resource"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of resources to return"
            default: 10
            examples:
              - 10
          description: "Max number of resources to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned resources count to 10"
              value: 10
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Fetch only specific resources as given by id"
            description: "Filter resources by object ids, provided as comma separated integer values"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter resources by object ids, provided as comma separated integer values"
          required: false
          examples:
            "ids-example-1":
              summary: "return resources of ids 1,2,3"
              value: "1,2,3"
        - name: "include_hidden"
          in: "query"
          schema:
            type: "boolean"
            title: "Include hidden resources"
            description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
            default: false
            examples:
              - false
              - true
          description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
          required: false
          examples:
            "include_hidden-example-1":
              summary: "Do not include hidden resources (default)"
              value: false
            "include_hidden-example-2":
              summary: "Include hidden resources"
              value: true
        - name: "level"
          in: "query"
          schema:
            type: "integer"
            maximum: 2
            minimum: 1
            title: "Show resources at given level"
            description: "level=2 includes children of each resources"
            default: 2
            examples:
              - 2
              - 1
          description: "level=2 includes children of each resources"
          required: false
          examples:
            "level-example-1":
              summary: "Include child resources (default)"
              value: 2
            "level-example-2":
              summary: "Do not include children resources"
              value: 1
        - name: "permissions"
          in: "query"
          schema:
            type: "boolean"
            title: "Include permissions in resource"
            description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
            default: false
            examples:
              - false
              - true
          description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
          required: false
          examples:
            "permissions-example-1":
              summary: "Do not include permissions (default)"
              value: false
            "permissions-example-2":
              summary: "Include permissions"
              value: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "getProject"
  "/workspaces/{workspace_id}/browse":
    get:
      tags:
        - "Browse"
      summary: "Browse and discover workspace resources"
      description: "Lists resources in a workspace e.g. projects"
      operationId: "BrowseWorkspaceWorkspaces"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,type,name,created_at,updated_at,url,additional_info,children"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of resources. Full representation includes id,type,resource_id,name,updated_at,created_at,status,url,additional_info,children"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of resources. standard representation includes id,type,name,created_at,updated_at,url,additional_info,children"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of resources. Minimal representation includes id,type,name,url,additional_info,children"
              value: "__min"
        - name: "name"
          in: "query"
          schema:
            type: "string"
            title: "Get resources by name"
            description: "Fetch all resources which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Project"
          description: "Fetch all resources which matches given name (case sensitive)"
          required: false
          examples:
            "name-example-1":
              summary: "return resources which matches given name"
              value: "My Project"
        - name: "browse_type"
          in: "query"
          schema:
            type: "string"
            title: "Get only specific resource"
            description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
            default: ""
            examples:
              - "project,workspace"
          description: "Resources can be filter on following types: typing.Literal['workspace', 'project', 'label', 'datasource', 'dataview', 'mammoth_root', 'webhook', 'report', 'file_object']"
          required: false
          examples:
            "browse_type-example-1":
              summary: "return resources of type project and workspace"
              value: "project,workspace"
        - name: "created_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource creation time"
            description: "Filter resources by creation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by creation time"
          required: false
          examples:
            "created_at-example-1":
              summary: "return resources which matches given creation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            type: "string"
            title: "Filter resources by resource updation time"
            description: "Filter resources by updation time"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Filter resources by updation time"
          required: false
          examples:
            "updated_at-example-1":
              summary: "return resources which matches given updation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort resources"
            description: "Sort resources by resource type"
            default: "(id:asc)"
            examples:
              - "(workspace:asc),(dataview:desc)"
          description: "Sort resources by resource type"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort by workspace and then by dataviews"
              value: "(workspace:asc),(dataview:desc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the resources list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the resources list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd resource"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of resources to return"
            default: 10
            examples:
              - 10
          description: "Max number of resources to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned resources count to 10"
              value: 10
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Fetch only specific resources as given by id"
            description: "Filter resources by object ids, provided as comma separated integer values"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter resources by object ids, provided as comma separated integer values"
          required: false
          examples:
            "ids-example-1":
              summary: "return resources of ids 1,2,3"
              value: "1,2,3"
        - name: "include_hidden"
          in: "query"
          schema:
            type: "boolean"
            title: "Include hidden resources"
            description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
            default: false
            examples:
              - false
              - true
          description: "Include hidden resource in response. Hidden resources are file object, ds with status deleted"
          required: false
          examples:
            "include_hidden-example-1":
              summary: "Do not include hidden resources (default)"
              value: false
            "include_hidden-example-2":
              summary: "Include hidden resources"
              value: true
        - name: "level"
          in: "query"
          schema:
            type: "integer"
            maximum: 2
            minimum: 1
            title: "Show resources at given level"
            description: "level=2 includes children of each resources"
            default: 2
            examples:
              - 2
              - 1
          description: "level=2 includes children of each resources"
          required: false
          examples:
            "level-example-1":
              summary: "Include child resources (default)"
              value: 2
            "level-example-2":
              summary: "Do not include children resources"
              value: 1
        - name: "permissions"
          in: "query"
          schema:
            type: "boolean"
            title: "Include permissions in resource"
            description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
            default: false
            examples:
              - false
              - true
          description: "Include permissions attached to each resources for given user. Permissions are returned as list of strings."
          required: false
          examples:
            "permissions-example-1":
              summary: "Do not include permissions (default)"
              value: false
            "permissions-example-2":
              summary: "Include permissions"
              value: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "workspace"
  "/support/workspaces":
    get:
      tags:
        - "Workspaces Support"
      summary: "Get workspaces list"
      description: "Retrieve a comprehensive list of workspaces along with their details."
      operationId: "ListWorkspaces"
      responses:
        "200":
          description: "List of workspaces"
          content:
            "application/json":
              schema:
                oneOf:
                  - {"$ref": "#/components/schemas/WorkspaceList"}
                  - {"$ref": "#/components/schemas/InstanceList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "workspacesSupport"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Workspaces Support"
      summary: "Create new workspace"
      description: "Create new workspace including relevant details."
      operationId: "CreateWorkspaces"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WorkspaceCreate"}
        required: true
      responses:
        "201":
          description: "Successful create"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "workspacesSupport"
      x-speakeasy-name-override: "create"
  "/support/workspaces/{workspace_id}":
    get:
      tags:
        - "Workspaces Support"
      summary: "Get workspace details"
      description: "Retrieve details for the specified workspace."
      operationId: "GetWorkspaceDetail"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, name)"
            default: "__standard"
            examples:
              - "id,name"
          description: "Fields to return. Can be (id, name)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name in the result"
              value: "id,name"
      responses:
        "200":
          description: "Get workspace Details"
          content:
            "application/json":
              schema:
                oneOf:
                  - items: {"$ref": "#/components/schemas/WorkspaceMinSchema"}
                    type: "array"
                  - items: {"$ref": "#/components/schemas/WorkspaceStdSchema"}
                    type: "array"
                  - items: {"$ref": "#/components/schemas/WorkspaceFullSchema"}
                    type: "array"
                  - items: {"$ref": "#/components/schemas/WorkspaceFieldSchema"}
                    type: "array"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "workspacesSupport"
      x-speakeasy-name-override: "getDetail"
    delete:
      tags:
        - "Workspaces Support"
      summary: "Delete a workspace"
      description: "Remove the specified workspace."
      operationId: "DeleteWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Successful delete"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "workspacesSupport"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Workspaces Support"
      summary: "Update workspace details"
      description: "Update details for the specified workspace."
      operationId: "UpdateWorkspaceDetail"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/support_schema_WorkspaceUpdate"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "workspacesSupport"
      x-speakeasy-name-override: "updateDetail"
  "/support/workspaces/{workspace_id}/users":
    get:
      tags:
        - "Users Support"
      summary: "Get users list"
      description: "Retrieve a list of users within a workspace."
      operationId: "GetUserList"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 10
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 0
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 0
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, email)"
            default: "__standard"
            examples:
              - "id,email"
          description: "Fields to return. Can be (id, email)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email in the result"
              value: "id,email"
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            title: "Order by column name"
            description: "Returned users from a workspaces based on this parameter, User format '(field:asc)' for ascending and  '(field:desc)' for descending order."
            examples:
              - "(email:asc),(id:desc)"
          description: "Returned users from a workspaces based on this parameter, User format '(field:asc)' for ascending and  '(field:desc)' for descending order."
          required: false
          examples:
            "sort-example-1":
              summary: "Order by user.email ascending and user.id descending"
              value: "(email:asc),(id:desc)"
      responses:
        "200":
          description: "List of users"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "usersSupport"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Users Support"
      summary: "Add a user to the workspace"
      description: "Add a user into the specified workspace"
      operationId: "AddUserToWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddUserSupport"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserPostSchema"}
        "400":
          description: "Bad Request"
        "202":
          description: "Request Accepted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserPostSchema"}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "usersSupport"
      x-speakeasy-name-override: "addToWorkspace"
    patch:
      tags:
        - "Users Support"
      summary: "Transfer workspace ownership"
      description: "Transfer workspace ownership to another user"
      operationId: "TransferUserRoles"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WorkspaceUserPatch"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "usersSupport"
      x-speakeasy-name-override: "transferRoles"
  "/support/workspaces/{workspace_id}/users/{user_id}":
    delete:
      tags:
        - "Users Support"
      summary: "Remove a user in a workspace"
      description: "Remove a user from the specified workspace."
      operationId: "RemoveWorkspaceUser"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "user_id"
          in: "path"
          schema:
            type: "integer"
            title: "User ID"
            description: "Id of the user to work with"
            examples:
              - 4
          description: "Id of the user to work with"
          required: true
          examples:
            "user_id-example-1":
              summary: "Sample user ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad Request"
        "200":
          description: "Successful delete"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "usersSupport"
      x-speakeasy-name-override: "remove"
  "/support/workspaces/{workspace_id}/sms":
    get:
      tags:
        - "Subscriptions Support"
      summary: "Get subscription details"
      description: "Retrieve associated chargebee subscription details for the workspace"
      operationId: "GetSubscriptionDetail"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, name)"
            default: "__standard"
            examples:
              - "id,name"
          description: "Fields to return. Can be (id, name)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name in the result"
              value: "id,name"
      responses:
        "200":
          description: "List of workspaces"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SubscriptionSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "subscriptionsSupport"
      x-speakeasy-name-override: "getDetail"
    post:
      tags:
        - "Subscriptions Support"
      summary: "Create subscription for workspace"
      description: "Associate the workspace with chargebee subscription"
      operationId: "RegisterSubscription"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CustomerSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/JobSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionsSupport"
      x-speakeasy-name-override: "register"
    patch:
      tags:
        - "Subscriptions Support"
      summary: "Update subscription for workspace"
      description: "Update the workspace's chargebee subscription"
      operationId: "UpdateSubscription"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            title: "Workspace ID"
            description: "Id of the workspace to work with"
            examples:
              - 4
          description: "Id of the workspace to work with"
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/support_schema_SubscriptionPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionsSupport"
  "/support/sms":
    get:
      tags:
        - "Subscriptions Support"
      summary: "Get available plans and other chargebee resources"
      description: "Retrieve the list of available plans and other Chargebee-related resources"
      operationId: "GetPlans"
      parameters:
        - name: "resource"
          in: "query"
          schema:
            type: "string"
            title: "Resource Type"
            description: "Type of resource to list"
            default: "plans"
          description: "Type of resource to list"
          required: true
      responses:
        "200":
          description: "List of plans"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "subscriptionsSupport"
  "/support/users":
    post:
      tags:
        - "Registration Support"
      summary: "Register a user"
      description: "Register a user with the given details"
      operationId: "RegisterUser"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/RegisterUserPostSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RegisterResponseSchema"}
        "400":
          description: "Bad Request"
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RegisterResponseSchema"}
        "401":
          description: "Authorization error"
      x-speakeasy-group: "registrationSupport"
      x-speakeasy-name-override: "register"
    patch:
      tags:
        - "Registration Support"
      summary: "Update user details"
      description: "Update user details"
      operationId: "UpdateUserVerification"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/RegisterUserPatches"}
        required: true
      responses:
        "200":
          description: "Successful patch"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RegisterResponseSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "registrationSupport"
  "/workspaces/{workspace_id}/subscription_v1/hosted-page":
    post:
      tags:
        - "Subscription"
      summary: "Get hosted pages"
      description: "Get hosted pages of the subscription for the requested properties"
      operationId: "FetchHostedPage"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HostedPageSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Hosted page details"
          content:
            "application/json":
              schema:
                type: "object"
  "/workspaces/{workspace_id}/subscription_v1/invoices/{invoice_id}":
    get:
      tags:
        - "Subscription"
      summary: "Get associated plan details"
      description: "Retrieve the current plan details for the workspace subscription"
      operationId: "GetInvoice"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "invoice_id"
          in: "path"
          schema:
            type: "integer"
            title: "Invoice ID"
            description: "ID of the invoice"
            examples:
              - 4
          description: "ID of the invoice"
          required: true
          examples:
            "invoice_id-example-1":
              summary: "Sample invoice ID"
              value: 4
      responses:
        "200":
          description: "Invoice details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InvoiceSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces/{workspace_id}/subscription_v1":
    get:
      tags:
        - "Subscription"
      summary: "Get subscription details"
      description: "Retrieve associated chargebee subscription details for the workspace"
      operationId: "GetWkspSubscriptionDetail"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, name)"
            default: "__standard"
            examples:
              - "id,name"
          description: "Fields to return. Can be (id, name)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name in the result"
              value: "id,name"
      responses:
        "200":
          description: "List of workspaces"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SubscriptionsFieldSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "subscriptions"
      x-speakeasy-name-override: "getDetail"
    patch:
      tags:
        - "Subscription"
      summary: "Update subscription details"
      description: "Update associated chargebee subscription objects for the workspace"
      operationId: "UpdateSubscriptionDetail"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/subscriptions_schema_SubscriptionPatchRequest"}
        required: true
      responses:
        "200":
          description: "List of workspaces"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SubscriptionsFieldSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "updateDetail"
  "/workspaces/{workspace_id}/subscription_v1/invoices":
    get:
      tags:
        - "Subscription"
      summary: "List all invoices"
      description: "List all invoices for the workspace subscription"
      operationId: "ListInvoices"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort Type"
            description: "Returns resource based on this parameter. Use the format '(field:asc)' for ascending and '(field:desc)' for descending order. Allowed values: date and updated_at"
            default: "(date:desc)"
            examples:
              - "(date:desc)"
          description: "Returns resource based on this parameter. Use the format '(field:asc)' for ascending and '(field:desc)' for descending order. Allowed values: date and updated_at"
          required: false
          examples:
            "sort-example-1":
              summary: "Order by invoice.date in descending order"
              value: "(date:desc)"
      responses:
        "200":
          description: "List of invoices"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InvoicesSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "subscriptions"
  "/subscription/plans/{plan_id}/archive":
    post:
      tags:
        - "Subscription Plans"
      summary: "Archive a subscription plan"
      description: "Archive a subscription plan (soft delete)"
      operationId: "ArchivePlan"
      parameters:
        - name: "plan_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "archive"
  "/subscription/plans":
    get:
      tags:
        - "Subscription Plans"
      summary: "List all subscription plans"
      description: "Retrieve all active subscription plans with enhanced error handling"
      operationId: "ListSubscriptionPlans"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanListResponseSchema"}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Subscription Plans"
      summary: "Create a new subscription plan"
      description: "Create a new subscription plan with comprehensive validation"
      operationId: "CreatePlan"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreatePlanRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "create"
  "/subscription/plans/{plan_id}":
    get:
      tags:
        - "Subscription Plans"
      summary: "Get a specific plan"
      description: "Retrieve details of a specific subscription plan"
      operationId: "GetPlan"
      parameters:
        - name: "plan_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "get"
    put:
      tags:
        - "Subscription Plans"
      summary: "Update a subscription plan"
      description: "Update an existing subscription plan with validation"
      operationId: "UpdatePlan"
      parameters:
        - name: "plan_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdatePlanRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "Subscription Plans"
      summary: "Delete a subscription plan"
      description: "Permanently delete a subscription plan"
      operationId: "DeletePlan"
      parameters:
        - name: "plan_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
      x-speakeasy-name-override: "delete"
  "/subscription/plans/{plan_id}/storage-tiers":
    put:
      tags:
        - "Subscription Plans"
      summary: "Update storage tiers for a plan"
      description: "Update the storage tier pricing for a subscription plan"
      operationId: "UpdateStorageTiers"
      parameters:
        - name: "plan_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdateStorageTiersRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionPlans"
  "/subscription/self-serve-plans":
    get:
      tags:
        - "Self-Serve Subscription Plans"
      summary: "List all subscription plans for self-serve"
      description: "Retrieve all active subscription plans for self-serve"
      operationId: "ListSelfServePlans"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PlanListResponseSchema"}
      x-speakeasy-group: "selfServeSubscriptionPlans"
      x-speakeasy-name-override: "list"
  "/subscription/connectors":
    get:
      tags:
        - "Connectors"
      summary: "List all connectors"
      description: "Retrieve all available connectors with enhanced error handling"
      operationId: "ListSubscriptionConnectors"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorListResponseSchema"}
      x-speakeasy-name-override: "fetch"
    post:
      tags:
        - "Connectors"
      summary: "Create a new connector"
      description: "Create a new connector with comprehensive validation"
      operationId: "CreateConnector"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateConnectorRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
  "/subscription/connectors/{connector_id}":
    put:
      tags:
        - "Connectors"
      summary: "Update a connector"
      description: "Update an existing connector with validation"
      operationId: "UpdateConnector"
      parameters:
        - name: "connector_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdateConnectorRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "Connectors"
      summary: "Delete a connector"
      description: "Delete a connector with enhanced validation"
      operationId: "DeleteConnector"
      parameters:
        - name: "connector_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
  "/subscription/features":
    get:
      tags:
        - "Features"
      summary: "List all features"
      description: "Retrieve all available features with enhanced error handling"
      operationId: "ListFeatures"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureListResponseSchema"}
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Features"
      summary: "Create a new feature"
      description: "Create a new feature with comprehensive validation"
      operationId: "CreateFeature"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateFeatureRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
  "/subscription/features/{feature_id}":
    put:
      tags:
        - "Features"
      summary: "Update a feature"
      description: "Update an existing feature with validation"
      operationId: "UpdateFeature"
      parameters:
        - name: "feature_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdateFeatureRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "Features"
      summary: "Delete a feature"
      description: "Delete a feature with enhanced validation"
      operationId: "DeleteFeature"
      parameters:
        - name: "feature_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
  "/subscription/connector-profiles/{profile_id}/connectors":
    post:
      tags:
        - "Connector Profiles"
      summary: "Add connector to profile"
      description: "Add a connector to an existing profile"
      operationId: "AddConnectorToProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddConnectorToProfileRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AddConnectorToProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "connectorProfiles"
      x-speakeasy-name-override: "addConnector"
  "/subscription/connector-profiles":
    get:
      tags:
        - "Connector Profiles"
      summary: "List all connector profiles"
      description: "Retrieve all connector profiles"
      operationId: "ListConnectorProfiles"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorProfileListResponseSchema"}
      x-speakeasy-group: "connectorProfiles"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Connector Profiles"
      summary: "Create a new connector profile"
      description: "Create a new connector profile with comprehensive validation"
      operationId: "CreateConnectorProfile"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateConnectorProfileRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "connectorProfiles"
      x-speakeasy-name-override: "create"
  "/subscription/connector-profiles/{profile_id}":
    put:
      tags:
        - "Connector Profiles"
      summary: "Update a connector profile"
      description: "Update an existing connector profile"
      operationId: "UpdateConnectorProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdateConnectorProfileRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "connectorProfiles"
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "Connector Profiles"
      summary: "Delete a connector profile"
      description: "Delete a connector profile"
      operationId: "DeleteConnectorProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "connectorProfiles"
      x-speakeasy-name-override: "delete"
  "/subscription/feature-profiles/{profile_id}/features":
    post:
      tags:
        - "Feature Profiles"
      summary: "Add feature to profile"
      operationId: "AddFeatureToProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddFeatureToProfileRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AddFeatureToProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "featureProfiles"
      x-speakeasy-name-override: "addFeature"
  "/subscription/feature-profiles":
    get:
      tags:
        - "Feature Profiles"
      summary: "List all feature profiles"
      operationId: "ListFeatureProfiles"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureProfileListResponseSchema"}
      x-speakeasy-group: "featureProfiles"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Feature Profiles"
      summary: "Create a new feature profile"
      operationId: "CreateFeatureProfile"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateFeatureProfileRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "featureProfiles"
      x-speakeasy-name-override: "create"
  "/subscription/feature-profiles/{profile_id}":
    put:
      tags:
        - "Feature Profiles"
      summary: "Update a feature profile"
      operationId: "UpdateFeatureProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UpdateFeatureProfileRequestSchema"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FeatureProfileResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "featureProfiles"
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "Feature Profiles"
      summary: "Delete a feature profile"
      operationId: "DeleteFeatureProfile"
      parameters:
        - name: "profile_id"
          in: "path"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "featureProfiles"
      x-speakeasy-name-override: "delete"
  "/workspaces/{workspace_id}/subscription/cancel":
    post:
      tags:
        - "Stripe Subscriptions"
      summary: "Cancel workspace subscription in Stripe"
      operationId: "CancelWorkspaceSubscription"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema:
              oneOf:
                - type: "null"
                - additionalProperties: {}
                  type: "object"
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "cancelWorkspace"
  "/workspaces/{workspace_id}/subscription/create-checkout":
    post:
      tags:
        - "Stripe Subscriptions"
      summary: "Create Stripe checkout URL for workspace subscription"
      operationId: "CreateCheckoutUrl"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateCheckoutUrlRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateCheckoutUrlResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
  "/workspaces/{workspace_id}/subscription/customer-portal":
    post:
      tags:
        - "Stripe Subscriptions"
      summary: "Create Stripe customer portal URL"
      operationId: "CreateCustomerPortalUrl"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateCustomerPortalUrlRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateCustomerPortalUrlResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "createPortalUrl"
  "/workspaces/{workspace_id}/subscription":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get workspace subscription from Stripe"
      operationId: "GetWorkspaceSubscription"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SubscriptionResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "get"
    post:
      tags:
        - "Stripe Subscriptions"
      summary: "Create Stripe subscription for workspace"
      operationId: "CreateWorkspaceSubscription"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateSubscriptionRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateSubscriptionResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "createWorkspace"
  "/workspaces/{workspace_id}/subscription/payment-methods":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get workspace payment methods from Stripe"
      operationId: "GetPaymentMethods"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PaymentMethodsResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
  "/workspaces/{workspace_id}/subscription/upcoming-invoice":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get upcoming invoice from Stripe"
      operationId: "GetUpcomingInvoice"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpcomingInvoiceResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
  "/workspaces/{workspace_id}/subscription/billing-history":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get workspace billing history from Stripe"
      operationId: "GetWorkspaceBillingHistory"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BillingHistoryResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "getBillingHistory"
  "/workspaces/{workspace_id}/subscription/status":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get workspace subscription status"
      operationId: "GetWorkspaceSubscriptionStatus"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceSubscriptionStatusDataSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "getWorkspaceStatus"
  "/workspaces/{workspace_id}/subscription/usage":
    get:
      tags:
        - "Stripe Subscriptions"
      summary: "Get workspace usage from Stripe"
      operationId: "GetWorkspaceUsage"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UsageResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "stripeSubscriptions"
      x-speakeasy-name-override: "getUsage"
  "/workspaces/{workspace_id}/subscription/check/check-connector":
    post:
      tags:
        - "Subscription Access Control"
      summary: "Check connector access for workspace"
      operationId: "CheckConnectorAccess"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CheckConnectorAccessRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AccessCheckResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionAccessControl"
      x-speakeasy-name-override: "checkConnector"
  "/workspaces/{workspace_id}/subscription/check/check-feature":
    post:
      tags:
        - "Subscription Access Control"
      summary: "Check feature access for workspace"
      operationId: "CheckFeatureAccess"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CheckFeatureAccessRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AccessCheckResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionAccessControl"
  "/workspaces/{workspace_id}/subscription/check/check-limits":
    post:
      tags:
        - "Subscription Access Control"
      summary: "Check usage limits for workspace"
      operationId: "CheckUsageLimits"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CheckUsageLimitsRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UsageLimitsCheckResponseSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "subscriptionAccessControl"
  "/subscription/stripe/webhook":
    post:
      tags:
        - "Stripe Webhooks"
      summary: "Handle Stripe webhook"
      operationId: "HandleStripeWebhook"
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/StripeWebhookResponseSchema"}
      x-speakeasy-group: "stripeWebhooks"
      x-speakeasy-name-override: "handle"
  "/workspaces/{workspace_id}/app-usage":
    get:
      tags:
        - "App Usage"
      summary: "Get app usage details"
      description: "Retrieve app usage and storage details for the workspace"
      operationId: "GetAppUsage"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (current_storage,max_storage_allowed)"
            default: "__standard"
            examples:
              - "current_storage,max_storage_allowed"
          description: "Fields to return. Can be (current_storage,max_storage_allowed)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only current_storage and max_storage_allowed in the result"
              value: "current_storage,max_storage_allowed"
      responses:
        "200":
          description: "App usage"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AppUsageSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "appUsage"
      x-speakeasy-name-override: "get"
  "/accept-invite":
    post:
      tags:
        - "Accept Invite"
      summary: "Accept invitation to workspace"
      description: "Accept invitation to workspace by token"
      operationId: "AcceptInvite"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AcceptInviteSchema"}
        required: true
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "acceptInvite"
      x-speakeasy-name-override: "accept"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets":
    get:
      tags:
        - "Datasets"
      summary: "Get list of datasets"
      description: "Returns list of datasets in given project. Query parameters can be used to optimize the response."
      operationId: "GetDatasets"
      parameters:
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only dataset.id and dataset.name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of datasets. Full representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations,batch_ids"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of datasets. standard representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of datasets. Minimal representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of dataset ids to get datasets"
            description: "Track multiple dataset ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple dataset ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of dataset ids 1, 2 and 3"
              value: "1,2,3"
        - name: "name"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of dataset names to get datasets"
            description: "Track multiple dataset names, comma separated"
            default: ""
            examples:
              - "ds_name1,ds_name2,ds_name3"
          description: "Track multiple dataset names, comma separated"
          required: false
          examples:
            "name-example-1":
              summary: "Returns details of dataset containing names ds_name1, ds_name2 and ds_name3"
              value: "ds_name1,ds_name2,ds_name3"
        - name: "created_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Created at date range filter"
            description: "Track multiple dataset, which falls under created_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
          description: "Track multiple dataset, which falls under created_at date range"
          required: false
          examples:
            "created_at-example-1":
              summary: "Returns details of dataset containing created_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Updated at date range filter"
            description: "Track multiple dataset, which falls under updated_at date range"
            default: ""
            examples:
              - "(from:'2023-12-18T09:39:17.628Z',to:'2023-12-17T09:42:43.152Z')"
          description: "Track multiple dataset, which falls under updated_at date range"
          required: false
          examples:
            "updated_at-example-1":
              summary: "Returns details of dataset containing updated_at within the provided date range"
              value: "(from:'2023-12-18T09:39:17.628Z',to:'2023-12-17T09:42:43.152Z')"
        - name: "created_by"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of users for dataset created by filter for datasets"
            description: "Track multiple dataset created by, comma separated"
            default: ""
            examples:
              - "riya,shriya"
          description: "Track multiple dataset created by, comma separated"
          required: false
          examples:
            "created_by-example-1":
              summary: "Returns details of dataset containing created by riya,priya and shriya"
              value: "riya,shriya"
        - name: "source_type"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of dataset source type to get datasets"
            description: "Track multiple dataset source type, comma separated"
            default: ""
            examples:
              - "file,cloud,sketch"
          description: "Track multiple dataset source type, comma separated"
          required: false
          examples:
            "source_type-example-1":
              summary: "Returns details of dataset containing source types file,cloud and sketch"
              value: "file,cloud,sketch"
        - name: "status"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of dataset status to get datasets"
            description: "Track multiple dataset status, comma separated"
            default: ""
            examples:
              - "ready,error,processing"
          description: "Track multiple dataset status, comma separated"
          required: false
          examples:
            "status-example-1":
              summary: "Returns details of dataset containing status ready,error and processing"
              value: "ready,error,processing"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the datasets based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(name:asc)"
          description: "Sort the datasets based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the datasets based on name and updated_at fields"
              value: "(id:asc),(name:asc)"
      responses:
        "200":
          description: "List of datasets"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DatasetsList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Datasets"
      summary: "Create dataset"
      description: "Create datasets"
      operationId: "CreateDatasets"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DatasetCreationSpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
    delete:
      tags:
        - "Datasets"
      summary: "Delete multiple datasets"
      description: "Deletes multiple datasets and its associated data."
      operationId: "DeleteDatasets"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of dataset ids to get datasets"
            description: "Track multiple dataset ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple dataset ids, comma separated"
          required: false
          examples:
            "ids-example-1":
              summary: "Returns details of dataset ids 1, 2 and 3"
              value: "1,2,3"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "remove"
    patch:
      tags:
        - "Datasets"
      summary: "Update datasets name"
      description: "Update the name of multiple datasets"
      operationId: "UpdateDatasets"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "validation_only"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DatasetsPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "rename"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}":
    get:
      tags:
        - "Datasets"
      summary: "Get dataset details"
      description: "Returns dataset details. Query parameters can be used to optimize the response."
      operationId: "GetDataset"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
            default: "id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, owner_workspace_id, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only dataset.id and dataset.name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of datasets. Full representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations,batch_ids"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of datasets. standard representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url,data_schema,stats,sources,display_info,dependencies,data_url,resource_path,configurations"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of datasets. Minimal representation includes id,name,created_at,updated_at,created_by,status,status_info,get_url"
              value: "__min"
      responses:
        "200":
          description: "Dataset Details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DatasetDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Datasets"
      summary: "Delete dataset"
      description: "Deletes the dataset and its associated data."
      operationId: "DeleteDataset"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Datasets"
      summary: "Update dataset"
      description: "Update the dataset"
      operationId: "UpdateDataset"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "validation_only"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
        - name: "skip_dependency_validation"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DatasetPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/data":
    get:
      tags:
        - "Datasets"
      summary: "Get dataset data"
      description: "Get the given dataset data"
      operationId: "GetDatasetData"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
          required: true
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
          required: true
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
          required: true
        - name: "columns"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
          required: false
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            default: 100
          required: false
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            default: 0
          required: false
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "getData"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches":
    get:
      tags:
        - "Batches"
      summary: "List batches"
      description: "List batches and their details."
      operationId: "GetBatches"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "id,name,state,created_at,description,row_count,column_count,source"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status, created_at."
            default: "id,name,state,created_at,description,row_count,column_count,source"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only batch.id and batch.name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of datasets. Full representation includes id,name,state,created_at,description,row_count,column_count,source,data_schema"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of datasets. standard representation includes id,name,state,created_at,description,row_count,column_count,source"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of datasets. Minimal representation includes id,name,state,created_at"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of batch ids to get batches"
            description: "Track multiple batch ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple batch ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of batch ids 1, 2 and 3"
              value: "1,2,3"
        - name: "created_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Created at date range filter"
            description: "Track multiple batches, which falls under created_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:18.628Z',to:'2023-12-26T10:42:43.152Z')"
          description: "Track multiple batches, which falls under created_at date range"
          required: false
          examples:
            "created_at-example-1":
              summary: "Returns details of batch containing created_at within the provided date range"
              value: "(from:'2023-12-19T09:39:18.628Z',to:'2023-12-26T10:42:43.152Z')"
        - name: "status"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of batch state to get batches"
            description: "Track multiple batch state, comma separated"
            default: ""
            examples:
              - "active,suspended"
          description: "Track multiple batch state, comma separated"
          required: false
          examples:
            "status-example-1":
              summary: "Returns details of batch containing state active and suspended"
              value: "active,suspended"
        - name: "row_count"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of batch row counts to get batches"
            description: "Track multiple batch row counts, comma separated"
            default: ""
            examples:
              - "10,25,3"
          description: "Track multiple batch row counts, comma separated"
          required: false
          examples:
            "row_count-example-1":
              summary: "Returns details of batch row counts 10, 15 and 3"
              value: "10,25,3"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the batches based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(state:asc)"
          description: "Sort the batches based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the batches based on name and state fields"
              value: "(id:asc),(state:asc)"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BatchesList"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Batches"
      summary: "Create batch"
      description: "Create a new batch through combine another datasets."
      operationId: "CreateBatch"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/BatchesPostRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/ObjectJobSchema"}
                  - additionalProperties: {}
                    type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
    delete:
      tags:
        - "Batches"
      summary: "Delete multiple batches"
      description: "Deletes multiple batches and its associated data."
      operationId: "DeleteBatches"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of dataset ids to get datasets"
            description: "Track multiple dataset ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple dataset ids, comma separated"
          required: false
          examples:
            "ids-example-1":
              summary: "Returns details of dataset ids 1, 2 and 3"
              value: "1,2,3"
      responses:
        "202":
          description: "Request accepted, processing continues off-line"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "remove"
    patch:
      tags:
        - "Batches"
      summary: "Update batches"
      description: "Update batches state."
      operationId: "UpdateBatches"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/BatchesPatchRequest"}
        required: true
      responses:
        "202":
          description: "Request accepted, processing continues off-line"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/batches/{batch_id}":
    get:
      tags:
        - "Batches"
      summary: "List batches"
      description: "List batches and their details."
      operationId: "GetBatch"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "batch_id"
          in: "path"
          schema:
            type: "integer"
            title: "Batch ID"
            description: "Id of the batch"
            examples:
              - 121
          description: "Id of the batch"
          required: true
          examples:
            "batch_id-example-1":
              summary: "Sample batch ID"
              value: 121
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "id,name,state,created_at,description,row_count,column_count,source"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status, created_at."
            default: "id,name,state,created_at,description,row_count,column_count,source"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only batch.id and batch.name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of datasets. Full representation includes id,name,state,created_at,description,row_count,column_count,source,data_schema"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of datasets. standard representation includes id,name,state,created_at,description,row_count,column_count,source"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of datasets. Minimal representation includes id,name,state,created_at"
              value: "__min"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BatchDetails"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Batches"
      summary: "Delete batch"
      description: "Deletes the batch and its associated data."
      operationId: "DeleteBatch"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "batch_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "batch_id-example-1":
              summary: "Sample dataset ID"
              value: 121
      responses:
        "202":
          description: "Request accepted, processing continues off-line"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
  "/workspaces/{workspace_id}/addons/connectors":
    post:
      tags:
        - "Workspaces"
      summary: "Add connector addon to workspace"
      description: "Add a connector addon to the specified workspace"
      operationId: "AddConnectorAddon"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddConnectorAddonRequest"}
        required: true
      responses:
        "201":
          description: "Connector addon added successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AddonSuccessResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces/{workspace_id}/addons/storage":
    post:
      tags:
        - "Workspaces"
      summary: "Add storage addon to workspace"
      description: "Add storage addon to the specified workspace"
      operationId: "AddStorageAddon"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddStorageAddonRequest"}
        required: true
      responses:
        "201":
          description: "Storage addon added successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceAddonResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces/{workspace_id}/users":
    get:
      tags:
        - "Workspaces"
      summary: "Get users in workspace"
      description: "Get all users inside of given workspace"
      operationId: "GetUsersInWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
            default: "id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link"
            examples:
              - "id,email"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email of  users inside workspace"
              value: "id,email"
            "fields-example-2":
              summary: "Return full representation of users inside workspace. Full representation includes id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link,user_roles,status"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of users inside workspace. standard representation includes id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of users inside workspace. Minimal representation includes id,email,first_name,last_name,created_at,updated_at"
              value: "__min"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort users"
            description: "Sort users by id, first_name or email"
            default: "(email:asc)"
            examples:
              - "(email:desc), (id:asc)"
          description: "Sort users by id, first_name or email"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort users by email and id"
              value: "(email:desc), (id:asc)"
        - name: "first_name"
          in: "query"
          schema:
            type: "string"
            title: "Get user by first or last name"
            description: "Fetch all users which matches given name (case sensitive)"
            default: ""
            examples:
              - "John"
          description: "Fetch all users which matches given name (case sensitive)"
          required: false
          examples:
            "first_name-example-1":
              summary: "return resources which matches given name"
              value: "John"
        - name: "last_name"
          in: "query"
          schema:
            type: "string"
            title: "Get user by first or last name"
            description: "Fetch all users which matches given name (case sensitive)"
            default: ""
            examples:
              - "John"
          description: "Fetch all users which matches given name (case sensitive)"
          required: false
          examples:
            "last_name-example-1":
              summary: "return resources which matches given name"
              value: "John"
        - name: "email"
          in: "query"
          schema:
            type: "string"
            title: "Get user by email"
            description: "Fetch user which matches given email"
            default: ""
            examples:
              - "john.doe@rediffmail.com"
          description: "Fetch user which matches given email"
          required: false
          examples:
            "email-example-1":
              summary: "return resources which matches given email"
              value: "john.doe@rediffmail.com"
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Fetch only specific users as given by id"
            description: "Filter users by ids, provided as comma separated integer values"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter users by ids, provided as comma separated integer values"
          required: false
          examples:
            "ids-example-1":
              summary: "return user of ids 1,2,3 in given workspace"
              value: "1,2,3"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the users list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the users list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd user"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 1
            title: "Limit"
            description: "Max number of users to return"
            default: 10
            examples:
              - 10
          description: "Max number of users to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned user count to 10"
              value: 10
        - name: "invited"
          in: "query"
          schema:
            type: "boolean"
            title: "Include invited users"
            description: "Include invited users"
            default: false
            examples:
              - true
              - false
          description: "Include invited users"
          required: false
          examples:
            "invited-example-1":
              summary: "Include invited users in response"
              value: true
            "invited-example-2":
              summary: "Exclude invited users in response"
              value: false
        - name: "project_id"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            examples:
              - 4
          description: "Project ID of the workspace"
          required: false
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      responses:
        "200":
          description: "List of users in a workspaces"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceUserGetResponse"}
        "400":
          description: "Bad Request"
        "304":
          description: "Not Modified"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "listUsers"
    post:
      tags:
        - "Workspaces"
      summary: "Add user in workspace"
      description: "Add users inside of given workspace"
      operationId: "AddUserInWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UserInvitePost"}
        required: true
      responses:
        "201":
          description: "Invited user emails"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceUserInviteResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "addUser"
    delete:
      tags:
        - "Workspaces"
      summary: "Remove users or invites from workspace"
      description: "Remove users or invites from workspace"
      operationId: "RemoveUserFromWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated user ids"
            description: "Comma separated user ids"
            default: ""
            examples:
              - "1,4"
          description: "Comma separated user ids"
          required: false
          examples:
            "ids-example-1":
              summary: "User ids 1 and 4"
              value: "1,4"
        - name: "invite_ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated invitation ids"
            description: "Comma separated invitation ids"
            default: ""
            examples:
              - "1,4"
          description: "Comma separated invitation ids"
          required: false
          examples:
            "invite_ids-example-1":
              summary: "Invite ids 1 and 4"
              value: "1,4"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "removeMember"
    patch:
      tags:
        - "Workspaces"
      summary: "Resend invite, remove invitation, or change role in workspace"
      description: "Resend invite, remove invitation, or change workspace role of a invited user, transfer ownership"
      operationId: "UpdateUserToWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WorkspaceUsersPatch"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "modifyMember"
  "/workspaces/{workspace_id}/addons/users":
    post:
      tags:
        - "Workspaces"
      summary: "Add user seats addon to workspace"
      description: "Add user seats addon to the specified workspace"
      operationId: "AddUserSeatsAddon"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AddUserSeatsAddonRequest"}
        required: true
      responses:
        "201":
          description: "User seats addon added successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AddonSuccessResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
  "/workspaces":
    get:
      tags:
        - "Workspaces"
      summary: "Get workspaces"
      description: "Get all workspaces"
      operationId: "GetWorkspaces"
      parameters:
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
            default: "id,name,status,url,updated_at,created_at,last_accessed,path"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name of a workspace"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of workspace. Full representation includes id,name,status,url,updated_at,created_at,last_accessed,path,acc_image,date_format,total_users"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of workspace. Standard representation includes id,name,status,url,updated_at,created_at,last_accessed,path"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of workspace. Minimal representation includes id,name,status,url,updated_at"
              value: "__min"
        - name: "name"
          in: "query"
          schema:
            type: "string"
            title: "Get workspace by name"
            description: "Fetch all workspaces which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Workspace"
          description: "Fetch all workspaces which matches given name (case sensitive)"
          required: false
          examples:
            "name-example-1":
              summary: "return resources which matches given name"
              value: "My Workspace"
        - name: "created_at"
          in: "query"
          schema:
            type: "string"
            title: "Get workspace filtered by creation time"
            description: "Fetch all workspaces which matches given filter criterion"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Fetch all workspaces which matches given filter criterion"
          required: false
          examples:
            "created_at-example-1":
              summary: "return workspaces which matches given creation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            type: "string"
            title: "Get workspace filtered by creation time"
            description: "Fetch all workspaces which matches given filter criterion"
            default: ""
            examples:
              - "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
          description: "Fetch all workspaces which matches given filter criterion"
          required: false
          examples:
            "updated_at-example-1":
              summary: "return workspaces which matches given updation time"
              value: "(from:'2023-12-16T09:39:17.628Z',to:'2023-12-16T09:42:43.152Z')"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort workspace"
            description: "Sort workspace by id or name"
            default: "(name:asc)"
            examples:
              - "(name:desc), (id:asc)"
          description: "Sort workspace by id or name"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort workspaces by name and id"
              value: "(name:desc), (id:asc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the workspace list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the workspace list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd user"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 1
            title: "Limit"
            description: "Max number of workspaces to return"
            default: 10
            examples:
              - 10
          description: "Max number of workspaces to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned workspaces to 10"
              value: 10
      responses:
        "200":
          description: "List of workspaces"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspacesSchema"}
        "400":
          description: "Bad Request"
        "304":
          description: "Not Modified"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Workspaces"
      summary: "Create workspace"
      description: "Create a new workspace with optional plan assignment"
      operationId: "CreateWorkspace"
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}":
    get:
      tags:
        - "Workspaces"
      summary: "Get workspace details"
      description: "Fetch additional details about workspace"
      operationId: "GetWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
            default: "id,name,status,url,updated_at,created_at,last_accessed,path"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name of a workspace"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of workspace. Full representation includes id,name,status,url,updated_at,created_at,last_accessed,path,acc_image,date_format,total_users"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of workspace. Standard representation includes id,name,status,url,updated_at,created_at,last_accessed,path"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of workspace. Minimal representation includes id,name,status,url,updated_at"
              value: "__min"
      responses:
        "200":
          description: "Get details of a workspace"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspacesSchema"}
        "400":
          description: "Bad Request"
        "304":
          description: "Not Modified"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Workspaces"
      summary: "Delete a workspace"
      description: "Delete the specified workspace."
      operationId: "DeleteUserWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Workspaces"
      summary: "Update workspace"
      description: "Update workspace details"
      operationId: "UpdateWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WorkspacePatch"}
        required: true
      responses:
        "200":
          description: "Updated workspace details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/workspaces_workspace_schema_WorkspaceUpdate"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/users/{user_id}":
    delete:
      tags:
        - "Workspaces"
      summary: "Remove user from workspace/Leave workspace"
      description: "Remove user from given workspace/Leave workspace"
      operationId: "RemoveUser"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "user_id"
          in: "path"
          schema:
            type: "integer"
            title: "User ID"
            description: "Id of the user"
            examples:
              - 4
          description: "Id of the user"
          required: true
          examples:
            "user_id-example-1":
              summary: "Sample user ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
    patch:
      tags:
        - "Workspaces"
      summary: "Change user role in workspace"
      description: "This endpoint can be used to change user role in workspace"
      operationId: "UpdateUserInWorkspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "user_id"
          in: "path"
          schema:
            type: "integer"
            title: "User ID"
            description: "Id of the user"
            examples:
              - 4
          description: "Id of the user"
          required: true
          examples:
            "user_id-example-1":
              summary: "Sample user ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AdminWorkspaceUserPatch"}
        required: true
      responses:
        "200":
          description: "User role updated"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceUserPatchResponse"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "updateUser"
  "/self/avatar":
    post:
      tags:
        - "Self"
      summary: "Add profile picture"
      description: "Add a profile picture (avatar) to the user"
      operationId: "UploadProfilePic"
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                "file":
                  type: "string"
                  format: "binary"
              type: "object"
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
    delete:
      tags:
        - "Self"
      summary: "Delete profile picture"
      description: "Delete the profile picture (avatar) of the user"
      operationId: "DeleteAvatar"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Client Error"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
  "/self":
    get:
      tags:
        - "Self"
      summary: "Get request user details"
      description: "Retrieve details of a requested user"
      operationId: "GetUserDetails"
      parameters:
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, email)"
            default: "__standard"
            examples:
              - "id,email"
              - "id,name,email,user_roles"
              - "__standard"
              - "__min"
              - "__full"
          description: "Fields to return. Can be (id, email)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email in the result"
              value: "id,email"
            "fields-example-2":
              summary: "Return id name, email and roles of the user"
              value: "id,name,email,user_roles"
            "fields-example-3":
              summary: "Return standard fields in the result"
              value: "__standard"
            "fields-example-4":
              summary: "Return only minimal fields in the result"
              value: "__min"
            "fields-example-5":
              summary: "Return all fields in the result"
              value: "__full"
      responses:
        "200":
          description: "List of users"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SelfFieldSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "users"
      x-speakeasy-name-override: "getSelf"
    delete:
      tags:
        - "Self"
      summary: "Delete self"
      description: "Delete self"
      operationId: "DeleteSelf"
      parameters:
        - name: "validate_only"
          in: "query"
          schema:
            type: "boolean"
            title: "Validate only"
            description: "Validate only for deleting self user"
            default: false
            examples:
              - true
          description: "Validate only for deleting self user"
          required: false
          examples:
            "validate_only-example-1":
              summary: "Returns the validation result"
              value: true
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Self"
      summary: "Update user details"
      description: "Update the details of the user"
      operationId: "UpdateUser"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SelfPatch"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
  "/workspaces/{workspace_id}/projects/{project_id}/schedules":
    get:
      tags:
        - "Schedules"
      summary: "Get list of schedules"
      description: "Get list of schedules"
      operationId: "ListSchedules"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, email)"
            default: "__standard"
            examples:
              - "id,email"
          description: "Fields to return. Can be (id, email)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email in the result"
              value: "id,email"
      responses:
        "200":
          description: "List of data"
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/ScheduleSchemaFields"}
                type: "array"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Schedules"
      summary: "Create schedule"
      description: "Create schedule"
      operationId: "CreateSchedule"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SchedulePostRequestSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ResponseJobSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "200":
          description: "Schedule data"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScheduleSchemaFields"}
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}/projects/{project_id}/schedules/{schedule_id}":
    get:
      tags:
        - "Schedules"
      summary: "Get schedule data"
      description: "Get requested schedule data"
      operationId: "GetSchedule"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "schedule_id"
          in: "path"
          schema:
            type: "integer"
            title: "Schedule ID"
            description: "Id of the schedule"
            default: 216
            examples:
              - 4
          description: "Id of the schedule"
          required: true
          examples:
            "schedule_id-example-1":
              summary: "Sample schedule ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to return. Can be (id, email)"
            default: "__standard"
            examples:
              - "id,email"
          description: "Fields to return. Can be (id, email)"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email in the result"
              value: "id,email"
      responses:
        "200":
          description: "Schedule data"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScheduleSchemaFields"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Schedules"
      summary: "Delete schedule data"
      description: "Delete schedule data"
      operationId: "DeleteSchedule"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "schedule_id"
          in: "path"
          schema:
            type: "integer"
            title: "Schedule ID"
            description: "Id of the schedule"
            default: 216
            examples:
              - 4
          description: "Id of the schedule"
          required: true
          examples:
            "schedule_id-example-1":
              summary: "Sample schedule ID"
              value: 4
        - name: "force"
          in: "query"
          schema:
            type: "boolean"
            title: "Force"
            description: "Is force delete"
            default: false
            examples:
              - false
          description: "Is force delete"
          required: false
          examples:
            "force-example-1":
              summary: "Sample force value"
              value: false
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Schedules"
      summary: "Patch schedule related data"
      description: "Patch schedule related data"
      operationId: "PatchSchedule"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "schedule_id"
          in: "path"
          schema:
            type: "integer"
            title: "Schedule ID"
            description: "Id of the schedule"
            default: 216
            examples:
              - 4
          description: "Id of the schedule"
          required: true
          examples:
            "schedule_id-example-1":
              summary: "Sample schedule ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SchedulePatchRequest"}
        required: true
      responses:
        "200":
          description: "Schedule data"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScheduleSchemaFields"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "patch"
  "/workspaces/{workspace_id}/connectors/{connector_key}":
    get:
      tags:
        - "Connectors"
      summary: "Get connector details"
      description: "Get the details of an connector"
      operationId: "GetConnector"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format"
            default: "__standard"
            examples:
              - "name_key,api_type"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only name_key and api_type of a Connector"
              value: "name_key,api_type"
            "fields-example-2":
              summary: "Return full representation of Connectors. Full representation includes name_key,disp_name,api_type,is_premium,is_added,spec,version_key,supported_version,vendor"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of Connectors. Standard representation includes name_key,disp_name,api_type,is_premium,is_added,spec"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of Connectors. Minimal representation includes name_key,disp_name,api_type"
              value: "__min"
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            default: false
          required: false
      responses:
        "200":
          description: "Get details of an connector"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorsSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
  "/workspaces/{workspace_id}/connectors":
    get:
      tags:
        - "Connectors"
      summary: "List connectors"
      description: "List the connectors that are provided by the system"
      operationId: "ListWorkspaceConnectors"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format"
            default: "__standard"
            examples:
              - "name_key,api_type"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format"
          required: false
          examples:
            "fields-example-1":
              summary: "Return only name_key and api_type of a Connector"
              value: "name_key,api_type"
            "fields-example-2":
              summary: "Return full representation of Connectors. Full representation includes name_key,disp_name,api_type,is_premium,is_added,spec,version_key,supported_version,vendor"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of Connectors. Standard representation includes name_key,disp_name,api_type,is_premium,is_added,spec"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of Connectors. Minimal representation includes name_key,disp_name,api_type"
              value: "__min"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Order by column names"
            description: "Returned connectors based on this parameter Use the format '(field:asc)' for ascending and  '(field:desc)' for descending order."
            default: "(name_key:asc)"
            examples:
              - "(name_key:asc),(disp_name:desc)"
          description: "Returned connectors based on this parameter Use the format '(field:asc)' for ascending and  '(field:desc)' for descending order."
          required: false
          examples:
            "sort-example-1":
              summary: "Order by connectors.name in ascending order and Connector.disp_name in descending order"
              value: "(name_key:asc),(disp_name:desc)"
        - name: "name_key"
          in: "query"
          schema:
            type: "string"
            title: "Get connectors by name"
            description: "Fetch Connector which matches given name (case sensitive)"
            default: ""
            examples:
              - "My Connector"
          description: "Fetch Connector which matches given name (case sensitive)"
          required: false
          examples:
            "name_key-example-1":
              summary: "return resources which matches given name"
              value: "My Connector"
        - name: "is_premium"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Get Connectors by premium status"
            description: "Fetch all Connectors based on premium status"
            examples:
              - true
          description: "Fetch all Connectors based on premium status"
          required: false
          examples:
            "is_premium-example-1":
              summary: "return resources which matches given condition"
              value: true
        - name: "is_added"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Get Connectors by added status"
            description: "Fetch all Connectors based on added status"
            examples:
              - true
          description: "Fetch all Connectors based on added status"
          required: false
          examples:
            "is_added-example-1":
              summary: "return resources which matches given condition"
              value: true
      responses:
        "200":
          description: "List of Connectors"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
  ? "/workspaces/{workspace_id}/projects/{project_id}/connectors/{connector_key}/connections/{connection_key}/ds_configs/{ds_config_key}"
  : get:
      tags:
        - "DsConfig"
      summary: "Get ds config details"
      description: "Returns ds config details. Query parameters can be used to optimize the response."
      operationId: "GetDsConfig"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "ds_config_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "DsConfig Key"
            description: "Key for the ds_config"
            examples:
              - "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
          description: "Key for the ds_config"
          required: true
          examples:
            "ds_config_key-example-1":
              summary: "Sample DsConfig Key"
              value: "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
      responses:
        "200":
          description: "Get ds config details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DsConfigDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "DsConfig"
      summary: "Delete ds config"
      description: "Deletes ds config. Query parameters can be used to optimize the response."
      operationId: "DeleteDsConfig"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "ds_config_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "DsConfig Key"
            description: "Key for the ds_config"
            examples:
              - "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
          description: "Key for the ds_config"
          required: true
          examples:
            "ds_config_key-example-1":
              summary: "Sample DsConfig Key"
              value: "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "dsConfigs"
      x-speakeasy-name-override: "remove"
    patch:
      tags:
        - "DsConfig"
      summary: "Validate and get sample data"
      description: "Validates and gets the sample data for given details. Query parameters can be used to optimize the response."
      operationId: "UpdateDsConfigs"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "ds_config_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "DsConfig Key"
            description: "Key for the ds_config"
            examples:
              - "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
          description: "Key for the ds_config"
          required: true
          examples:
            "ds_config_key-example-1":
              summary: "Sample DsConfig Key"
              value: "ytvudfx0e2w2wr2e1artrz1wtrn2wmgdyu7bgj4v"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DsConfigPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "dsConfigs"
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/connectors/{connector_key}/connections/{connection_key}/ds_configs":
    get:
      tags:
        - "DsConfig"
      summary: "List ds configs"
      description: "Returns list of ds configs. Query parameters can be used to optimize the response."
      operationId: "ListDsConfigs"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "fields"
          in: "query"
          schema:
            type: "string"
          required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "dsConfigs"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "DsConfig"
      summary: "Validate and get sample data"
      description: "Validates and gets the sample data for given details. Query parameters can be used to optimize the response."
      operationId: "ValidateAndGetDsConfig"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ValidateAndSampleDataSpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "dsConfigs"
      x-speakeasy-name-override: "validateAndFetchData"
    delete:
      tags:
        - "DsConfig"
      summary: "Delete ds configs"
      description: "Deletes list of ds configs. Query parameters can be used to optimize the response."
      operationId: "DeleteDsConfigs"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 50
            minLength: 1
            title: "Connector Key"
            description: "Encoded key of the connector"
            examples:
              - "YmlncXVlcnk="
          description: "Encoded key of the connector"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector Key"
              value: "YmlncXVlcnk="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "config_ids"
          in: "query"
          schema:
            type: "string"
          required: true
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
  "/workspaces/{workspace_id}/projects/{project_id}/connectors/{connector_key}/connections/{connection_key}":
    get:
      tags:
        - "Connections"
      summary: "Get Connection"
      description: "Get connection for given connector using the connection key"
      operationId: "GetConnection"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "concern"
          in: "query"
          schema:
            type:
              - "string"
              - "null"
            enum:
              - "profiles"
              - "ds_config_spec"
              - null
            title: "Concern type"
            description: "Concern type"
            default: "profiles"
            examples:
              - "data"
          description: "Concern type"
          required: false
          examples:
            "concern-example-1":
              value: "data"
        - name: "profile"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            title: "Profile type"
            description: "Profile type"
            examples:
              - "api"
          description: "Profile type"
          required: false
          examples:
            "profile-example-1":
              value: "api"
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            title: "Is export type"
            description: "Is export type"
            default: false
            examples:
              - false
          description: "Is export type"
          required: false
          examples:
            "is_export-example-1":
              value: false
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Connections"
      summary: "Delete Connection"
      description: "Delete connection for given connector using the connection key"
      operationId: "DeleteConnection"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            title: "Is export type"
            description: "Is export type"
            default: false
            examples:
              - false
          description: "Is export type"
          required: false
          examples:
            "is_export-example-1":
              value: false
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Connections"
      summary: "Update Connection"
      description: "update connection for given connector using the connection key with the provided data"
      operationId: "UpdateConnection"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            title: "Is export type"
            description: "Is export type"
            default: false
            examples:
              - false
          description: "Is export type"
          required: false
          examples:
            "is_export-example-1":
              value: false
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ConnectionPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/connectors/{connector_key}/connections":
    get:
      tags:
        - "Connections"
      summary: "List Connections"
      description: "Get the list of connections for the given connector"
      operationId: "ListConnections"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            title: "Is export type"
            description: "Is export type"
            default: false
            examples:
              - false
          description: "Is export type"
          required: false
          examples:
            "is_export-example-1":
              value: false
      responses:
        "200":
          description: "Get connections list"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListConnectionsSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Connections"
      summary: "Create Connection"
      description: "Create connection for given connector using the provided data"
      operationId: "SaveConnection"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "is_export"
          in: "query"
          schema:
            type: "boolean"
            title: "Is export type"
            description: "Is export type"
            default: false
            examples:
              - false
          description: "Is export type"
          required: false
          examples:
            "is_export-example-1":
              value: false
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              description: "Subscription detail which needs to be updated"
              examples:
                - {"database": "hubli_journal", "hostname": "localhost", "port": 5432, "username": "appuser", "<password>": "<pwd>"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}/projects/{project_id}/webhooks":
    get:
      tags:
        - "Webhooks"
      summary: "List webhooks"
      description: "Returns list of webhook details. Query parameters can be used to optimize the response."
      operationId: "ListWebhooks"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, ds_id, url."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, ds_id, url."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the ds_config. Full representation includes id,name,mode,uri,ds_id,origins"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the ds_config. standard representation includes id,name,mode,uri,ds_id,origins"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the ds_config. Minimal representation includes id,name,mode,uri,ds_id"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of webhook ids to get webhooks"
            description: "Track multiple webhook ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple webhook ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of webhook ids 1, 2 and 3"
              value: "1,2,3"
        - name: "name"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of webhook names to get webhooks"
            description: "Track multiple webhook names, comma separated"
            default: ""
            examples:
              - "webhook_name1,webhook_name2,webhook_name3"
          description: "Track multiple webhook names, comma separated"
          required: false
          examples:
            "name-example-1":
              summary: "Returns details of webhook containing names webhook_name1, webhook_name2 and webhook_name3"
              value: "webhook_name1,webhook_name2,webhook_name3"
        - name: "ds_id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of webhook ds ids to get webhooks"
            description: "Track multiple webhook ds ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple webhook ds ids, comma separated"
          required: false
          examples:
            "ds_id-example-1":
              summary: "Returns details of webhook ds ids 1, 2 and 3"
              value: "1,2,3"
        - name: "mode"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of webhook modes to get webhooks"
            description: "Track multiple webhook modes, comma separated"
            default: ""
            examples:
              - "combine,replace"
          description: "Track multiple webhook modes, comma separated"
          required: false
          examples:
            "mode-example-1":
              summary: "Returns details of webhook containing mode combine and replace"
              value: "combine,replace"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the webhooks based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(name:asc)"
          description: "Sort the webhooks based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the webhooks based on id and name fields"
              value: "(id:asc),(name:asc)"
      responses:
        "200":
          description: "List webhooks"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WebhooksList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Webhooks"
      summary: "Create a webhook"
      description: "Create a webhook dataset."
      operationId: "CreateAWebhook"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WebhookSpec"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WebhookDetails"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}/projects/{project_id}/webhooks/{webhook_id}":
    get:
      tags:
        - "Webhooks"
      summary: "Get webhook details"
      description: "Returns webhook details. Query parameters can be used to optimize the response."
      operationId: "GetWebhookDetails"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "webhook_id"
          in: "path"
          schema:
            type: "integer"
            title: "Webhook ID"
            description: "ID of the webhook"
            default: 4
            examples:
              - 4
          description: "ID of the webhook"
          required: true
          examples:
            "webhook_id-example-1":
              summary: "Sample webhook ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, ds_id, url."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, ds_id, url."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the ds_config. Full representation includes id,name,mode,uri,ds_id,origins"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the ds_config. standard representation includes id,name,mode,uri,ds_id,origins"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the ds_config. Minimal representation includes id,name,mode,uri,ds_id"
              value: "__min"
      responses:
        "200":
          description: "Get webhook details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WebhookDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "getDetails"
    delete:
      tags:
        - "Webhooks"
      summary: "Delete webhook"
      description: "Deletes given webhook."
      operationId: "DeleteWebhook"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "webhook_id"
          in: "path"
          schema:
            type: "integer"
            title: "Webhook ID"
            description: "ID of the webhook"
            default: 4
            examples:
              - 4
          description: "ID of the webhook"
          required: true
          examples:
            "webhook_id-example-1":
              summary: "Sample webhook ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Webhooks"
      summary: "Updates the webhook"
      description: "Updates the webhook with given information."
      operationId: "UpdateWebhookConfigurations"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "webhook_id"
          in: "path"
          schema:
            type: "integer"
            title: "Webhook ID"
            description: "ID of the webhook"
            default: 4
            examples:
              - 4
          description: "ID of the webhook"
          required: true
          examples:
            "webhook_id-example-1":
              summary: "Sample webhook ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WebhookPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WebhookDetails"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
  "/webhooks/data/{webhook_uri}":
    get:
      tags:
        - "Webhooks"
      summary: "Add data to the webhook"
      description: "Add data to the webhook."
      operationId: "AddDataToWebhookUsingGetMethod"
      parameters:
        - name: "webhook_uri"
          in: "path"
          schema:
            type: "string"
            minLength: 1
            title: "Webhook Key"
            description: "API key of the webhook"
            default: 4
            examples:
              - "g7rHe3mUqUGPEpnc4XxeDWJa"
          description: "API key of the webhook"
          required: true
          examples:
            "webhook_uri-example-1":
              summary: "Sample webhook key"
              value: "g7rHe3mUqUGPEpnc4XxeDWJa"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "addDataUsingGet"
    post:
      tags:
        - "Webhooks"
      summary: "Add data to webhook"
      description: "Add data webhook dataset. Query parameters can be used to optimize the response."
      operationId: "AddDataToWebhook"
      parameters:
        - name: "webhook_uri"
          in: "path"
          schema:
            type: "string"
            minLength: 1
            title: "Webhook Key"
            description: "API key of the webhook"
            default: 4
            examples:
              - "g7rHe3mUqUGPEpnc4XxeDWJa"
          description: "API key of the webhook"
          required: true
          examples:
            "webhook_uri-example-1":
              summary: "Sample webhook key"
              value: "g7rHe3mUqUGPEpnc4XxeDWJa"
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "addData"
  "/workspaces/{workspace_id}/chargebee-plan":
    get:
      tags:
        - "Chargebee Plan"
      summary: "Get Chargebee plan"
      description: "This endpoint is used to get the Chargebee plan of the workspace."
      operationId: "GetChargebeePlan"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "Get plan"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/GetPlanSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "chargebeePlan"
      x-speakeasy-name-override: "get"
  "/workspaces/{workspace_id}/projects/{project_id}/files":
    get:
      tags:
        - "Files"
      summary: "List files"
      description: "Returns list of webhook details. Query parameters can be used to optimize the response."
      operationId: "ListFiles"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the file. Full representation includes id,name,status,created_at,last_updated_at,status_info,additional_info"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the file. standard representation includes id,name,status,created_at,last_updated_at,status_info,additional_info"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the file. Minimal representation includes id,name,status,created_at,last_updated_at"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of file ids to get files"
            description: "Track multiple file ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple file ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of file ids 1, 2 and 3"
              value: "1,2,3"
        - name: "name"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of file names to get files"
            description: "Track multiple file names, comma separated"
            default: ""
            examples:
              - "file_name1,file_name2,file_name3"
          description: "Track multiple file names, comma separated"
          required: false
          examples:
            "name-example-1":
              summary: "Returns details of webhook containing names file_name1, file_name2 and file_name3"
              value: "file_name1,file_name2,file_name3"
        - name: "status"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of file statuses to get files"
            description: "Track multiple file statuses, comma separated"
            default: ""
            examples:
              - "processing,action_needed"
          description: "Track multiple file statuses, comma separated"
          required: false
          examples:
            "status-example-1":
              summary: "Returns details of file containing status processing and action_needed"
              value: "processing,action_needed"
        - name: "created_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Created at date range filter"
            description: "Track multiple files, which falls under created_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
          description: "Track multiple files, which falls under created_at date range"
          required: false
          examples:
            "created_at-example-1":
              summary: "Returns details of file containing created_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Updated at date range filter"
            description: "Track multiple files, which falls under updated_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
          description: "Track multiple files, which falls under updated_at date range"
          required: false
          examples:
            "updated_at-example-1":
              summary: "Returns details of file containing updated_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the files based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(name:asc)"
          description: "Sort the files based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the files based on id and name fields"
              value: "(id:asc),(name:asc)"
      responses:
        "200":
          description: "List files"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FilesList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Files"
      summary: "Upload file or folder"
      description: "Upload file or folder to create a dataset"
      operationId: "CreateFileDataset"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "folder_resource_id"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
            title: "Folder Resource ID"
            description: "Resource ID of the folder where the dataset is to be created"
            examples:
              - "label_123"
          description: "Resource ID of the folder where the dataset is to be created"
          required: false
          examples:
            "folder_resource_id-example-1":
              summary: "Sample folder resource ID"
              value: "label_123"
        - name: "append_to_ds_id"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "integer"
            minimum: 1
            title: "Append to an existing dataset"
            description: "Dataset ID to which the file is being appended"
            examples:
              - 4
          description: "Dataset ID to which the file is being appended"
          required: false
          examples:
            "append_to_ds_id-example-1":
              summary: "Sample dataview ID"
              value: 4
        - name: "override_target_schema"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "boolean"
            title: "Whether to override the target schema with the incoming schema"
            description: "When appending to an existing dataset and this flag is set, the schema of the target dataset will be overridden by schema of the incoming data"
            examples:
              - false
              - true
          description: "When appending to an existing dataset and this flag is set, the schema of the target dataset will be overridden by schema of the incoming data"
          required: false
          examples:
            "override_target_schema-example-1":
              summary: "Do not overirde the target schema with the incoming schema"
              value: false
            "override_target_schema-example-2":
              summary: "Override the target schema with the incoming schema"
              value: true
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                "files":
                  items:
                    type: "string"
                    format: "binary"
                  type: "array"
              type: "object"
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad Request"
        "202":
          description: "Upload file to create a dataset"
          content:
            "application/json":
              schema:
                oneOf:
                  - {"$ref": "#/components/schemas/ObjectJobSchema"}
                  - items: {"$ref": "#/components/schemas/ObjectJobSchema"}
                    type: "array"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "createDataset"
    delete:
      tags:
        - "Files"
      summary: "Delete files"
      description: "Deletes given files."
      operationId: "DeleteFiles"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of file ids to get files"
            description: "Track multiple file ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple file ids, comma separated"
          required: false
          examples:
            "ids-example-1":
              summary: "Returns details of file ids 1, 2 and 3"
              value: "1,2,3"
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "remove"
  "/workspaces/{workspace_id}/projects/{project_id}/files/{file_id}":
    get:
      tags:
        - "Files"
      summary: "Get file details"
      description: "Returns file details. Query parameters can be used to optimize the response."
      operationId: "GetFileDetails"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "file_id"
          in: "path"
          schema:
            type: "integer"
            title: "File ID"
            description: "ID of the file"
            default: 4
            examples:
              - 4
          description: "ID of the file"
          required: true
          examples:
            "file_id-example-1":
              summary: "Sample file ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the file. Full representation includes id,name,status,created_at,last_updated_at,status_info,additional_info"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the file. standard representation includes id,name,status,created_at,last_updated_at,status_info,additional_info"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the file. Minimal representation includes id,name,status,created_at,last_updated_at"
              value: "__min"
      responses:
        "200":
          description: "Get file details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FileDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Files"
      summary: "Delete file"
      description: "Deletes given file."
      operationId: "DeleteFile"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "file_id"
          in: "path"
          schema:
            type: "integer"
            title: "File ID"
            description: "ID of the file"
            default: 4
            examples:
              - 4
          description: "ID of the file"
          required: true
          examples:
            "file_id-example-1":
              summary: "Sample file ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Files"
      summary: "Updates the file configs"
      description: "Updates the file details with given information."
      operationId: "UpdateFileConfigs"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "file_id"
          in: "path"
          schema:
            type: "integer"
            title: "File ID"
            description: "ID of the file"
            default: 4
            examples:
              - 4
          description: "ID of the file"
          required: true
          examples:
            "file_id-example-1":
              summary: "Sample file ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/FilePatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "400":
          description: "Bad Request"
        "202":
          description: "Patch on the file object"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "updateConfigs"
  "/preferences":
    get:
      tags:
        - "Preferences"
      summary: "Fetch user preferences"
      description: "This endpoint is used to fetch user preferences."
      operationId: "GetUserPreferences"
      responses:
        "200":
          description: "Preferences data"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreferencesSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    patch:
      tags:
        - "Preferences"
      summary: "Update user preferences"
      description: "This endpoint is used to update user preferences."
      operationId: "UpdateUserPreferences"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PreferencesPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/folders":
    get:
      tags:
        - "Folders"
      summary: "List folders"
      description: "List folders."
      operationId: "ListFolders"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the folder. Full representation includes id,name,status,created_at,updated_at,resource_id,created_by,parent_id,resource_path"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the folder. standard representation includes id,name,status,created_at,updated_at,resource_id,created_by,parent_id,resource_path"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the folder. Minimal representation includes id,name,status,created_at,updated_at,resource_id"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of file ids to get folders"
            description: "Filter by multiple folder ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter by multiple folder ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of folder ids 1, 2 and 3"
              value: "1,2,3"
        - name: "name"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of folder names to get folders"
            description: "Filter by multiple folder names, comma separated"
            default: ""
            examples:
              - "folder_name1,folder_name2,folder_name3"
          description: "Filter by multiple folder names, comma separated"
          required: false
          examples:
            "name-example-1":
              summary: "Returns details of folder containing names folder_name1, folder_name2 and folder_name3"
              value: "folder_name1,folder_name2,folder_name3"
        - name: "status"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of folder statuses to get folders"
            description: "Filter by multiple folder statuses, comma separated"
            default: ""
            examples:
              - "ready,deleting"
          description: "Filter by multiple folder statuses, comma separated"
          required: false
          examples:
            "status-example-1":
              summary: "Returns details of folder containing status ready and deleting"
              value: "ready,deleting"
        - name: "created_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Created at date range filter"
            description: "Filter by multiple folders, which falls under created_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.728Z',to:'2023-12-26T19:42:43.152Z')"
          description: "Filter by multiple folders, which falls under created_at date range"
          required: false
          examples:
            "created_at-example-1":
              summary: "Returns details of folder containing created_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.728Z',to:'2023-12-26T19:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Updated at date range filter"
            description: "Filter by multiple folders, which falls under updated_at date range"
            default: ""
            examples:
              - "(from:'2024-12-19T09:39:17.628Z',to:'2024-12-26T09:42:43.152Z')"
          description: "Filter by multiple folders, which falls under updated_at date range"
          required: false
          examples:
            "updated_at-example-1":
              summary: "Returns details of folder containing updated_at within the provided date range"
              value: "(from:'2024-12-19T09:39:17.628Z',to:'2024-12-26T09:42:43.152Z')"
        - name: "created_by"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of folder created by user name to get folders"
            description: "Filter by multiple folder created by user names, comma separated"
            default: ""
            examples:
              - "riya,geeta"
          description: "Filter by multiple folder created by user names, comma separated"
          required: false
          examples:
            "created_by-example-1":
              summary: "Returns details of folder containing created by user riya and geeta"
              value: "riya,geeta"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the folders based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(name:asc)"
          description: "Sort the folders based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the folders based on id and name fields"
              value: "(id:asc),(name:asc)"
      responses:
        "200":
          description: "List folders"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FoldersList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Folders"
      summary: "Create Folder"
      description: "Creates a new folder."
      operationId: "CreateFolder"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CreateFolder"}
        required: true
      responses:
        "201":
          description: "Create folder"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FolderDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "create"
    delete:
      tags:
        - "Folders"
      summary: "Delete folders"
      description: "Deletes given folders."
      operationId: "DeleteFolders"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "ids"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of file ids to get folders"
            description: "Filter by multiple folder ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Filter by multiple folder ids, comma separated"
          required: false
          examples:
            "ids-example-1":
              summary: "Returns details of folder ids 1, 2 and 3"
              value: "1,2,3"
        - name: "check_dependency"
          in: "query"
          schema:
            type: "boolean"
            title: "Check for dependency"
            description: "Check for dependency before deleting the folder"
            default: true
            examples:
              - true
          description: "Check for dependency before deleting the folder"
          required: false
          examples:
            "check_dependency-example-1":
              summary: "Check for dependency before deleting the folder"
              value: true
        - name: "remove_contents"
          in: "query"
          schema:
            type: "boolean"
            title: "Remove folder contents"
            description: "Remove folder contents before deleting the folder"
            default: true
            examples:
              - true
          description: "Remove folder contents before deleting the folder"
          required: false
          examples:
            "remove_contents-example-1":
              summary: "Remove folder contents before deleting the folder"
              value: true
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "remove"
    patch:
      tags:
        - "Folders"
      summary: "Move resources from/to folder"
      description: "Move resources from/to folder."
      operationId: "UpdateFolderResources"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/BulkFolderPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "400":
          description: "Bad Request"
        "202":
          description: "Move folder resources"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "updateResources"
  "/workspaces/{workspace_id}/projects/{project_id}/folders/{folder_id}":
    get:
      tags:
        - "Folders"
      summary: "Get Folder Details"
      description: "Get details of a folder."
      operationId: "GetFolder"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "folder_id"
          in: "path"
          schema:
            type: "integer"
            title: "Folder ID"
            description: "ID of the folder"
            default: 4
            examples:
              - 4
          description: "ID of the folder"
          required: true
          examples:
            "folder_id-example-1":
              summary: "Sample folder ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the folder. Full representation includes id,name,status,created_at,updated_at,resource_id,created_by,parent_id,resource_path"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the folder. standard representation includes id,name,status,created_at,updated_at,resource_id,created_by,parent_id,resource_path"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the folder. Minimal representation includes id,name,status,created_at,updated_at,resource_id"
              value: "__min"
      responses:
        "200":
          description: "Get folder details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FolderDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Folders"
      summary: "Delete Folder"
      description: "Deletes given folder along with all the files inside the folder."
      operationId: "DeleteFolder"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "folder_id"
          in: "path"
          schema:
            type: "integer"
            title: "Folder ID"
            description: "ID of the folder"
            default: 4
            examples:
              - 4
          description: "ID of the folder"
          required: true
          examples:
            "folder_id-example-1":
              summary: "Sample folder ID"
              value: 4
        - name: "check_dependency"
          in: "query"
          schema:
            type: "boolean"
            title: "Check for dependency"
            description: "Check for dependency before deleting the folder"
            default: true
            examples:
              - true
          description: "Check for dependency before deleting the folder"
          required: false
          examples:
            "check_dependency-example-1":
              summary: "Check for dependency before deleting the folder"
              value: true
        - name: "remove_contents"
          in: "query"
          schema:
            type: "boolean"
            title: "Remove folder contents"
            description: "Remove folder contents before deleting the folder"
            default: true
            examples:
              - true
          description: "Remove folder contents before deleting the folder"
          required: false
          examples:
            "remove_contents-example-1":
              summary: "Remove folder contents before deleting the folder"
              value: true
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Folders"
      summary: "Updates the folder details"
      description: "Updates the folder details with given information."
      operationId: "UpdateFolderDetails"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "folder_id"
          in: "path"
          schema:
            type: "integer"
            title: "Folder ID"
            description: "ID of the folder"
            default: 4
            examples:
              - 4
          description: "ID of the folder"
          required: true
          examples:
            "folder_id-example-1":
              summary: "Sample folder ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/FolderPatchRequest"}
        required: true
      responses:
        "200":
          description: "Rename folder"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FolderDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/automations":
    get:
      tags:
        - "Automations"
      summary: "Get list of automations"
      description: "Get list of automations"
      operationId: "GetList"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the automation. Full representation includes id,name,description,status,created_at,updated_at,created_by,updated_by,tasks,conditions,condition_mode"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the automation. standard representation includes id,name,description,status,created_at,updated_at,created_by,updated_by,tasks,conditions,condition_mode"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the automation. Minimal representation includes id,name,description,status,created_at,updated_at"
              value: "__min"
        - name: "id"
          in: "query"
          schema:
            type: "string"
            title: "Comma separated list of automation ids to get automations"
            description: "Track multiple automation ids, comma separated"
            default: ""
            examples:
              - "1,2,3"
          description: "Track multiple automation ids, comma separated"
          required: false
          examples:
            "id-example-1":
              summary: "Returns details of automation ids 1, 2 and 3"
              value: "1,2,3"
        - name: "name"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of automation names to get automations"
            description: "Track multiple automation names, comma separated"
            default: ""
            examples:
              - "automation_name1,automation_name2,automation_name3"
          description: "Track multiple automation names, comma separated"
          required: false
          examples:
            "name-example-1":
              summary: "Returns details of webhook containing names automation_name1, automation_name2 and automation_name3"
              value: "automation_name1,automation_name2,automation_name3"
        - name: "status"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Comma separated list of automation statuses to get automations"
            description: "Track multiple automation statuses, comma separated"
            default: ""
            examples:
              - "processing,action_needed"
          description: "Track multiple automation statuses, comma separated"
          required: false
          examples:
            "status-example-1":
              summary: "Returns details of automation containing status processing and action_needed"
              value: "processing,action_needed"
        - name: "created_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Created at date range filter"
            description: "Track multiple automations, which falls under created_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
          description: "Track multiple automations, which falls under created_at date range"
          required: false
          examples:
            "created_at-example-1":
              summary: "Returns details of automation containing created_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
        - name: "updated_at"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: ""
            title: "Updated at date range filter"
            description: "Track multiple automations, which falls under updated_at date range"
            default: ""
            examples:
              - "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
          description: "Track multiple automations, which falls under updated_at date range"
          required: false
          examples:
            "updated_at-example-1":
              summary: "Returns details of automation containing updated_at within the provided date range"
              value: "(from:'2023-12-19T09:39:17.628Z',to:'2023-12-26T09:42:43.152Z')"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of result to return"
            default: 50
            examples:
              - 10
          description: "Max number of result to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned result count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Distance from the beginning of the list of results"
            default: 0
            examples:
              - 10
          description: "Distance from the beginning of the list of results"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th result"
              value: 10
        - name: "sort"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "(id:asc)"
            title: "Sort"
            description: "Sort the automations based on the fields"
            default: "(id:asc)"
            examples:
              - "(id:asc),(name:asc)"
          description: "Sort the automations based on the fields"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort the automations based on id and name fields"
              value: "(id:asc),(name:asc)"
      responses:
        "200":
          description: "List automations"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AutomationsList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "Automations"
      summary: "Create automation"
      description: "Create automation"
      operationId: "CreateAutomation"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AutomationCreationSchema"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ResponseJobSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "202":
          description: "Create an automation"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
      x-speakeasy-name-override: "create"
  "/workspaces/{workspace_id}/projects/{project_id}/automations/{automation_id}":
    get:
      tags:
        - "Automations"
      summary: "Get automation data"
      description: "Get requested automation data"
      operationId: "GetAutomation"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "automation_id"
          in: "path"
          schema:
            type: "integer"
            title: "Automation ID"
            description: "ID of the automation"
            default: 4
            examples:
              - 4
          description: "ID of the automation"
          required: true
          examples:
            "automation_id-example-1":
              summary: "Sample automation ID"
              value: 4
        - name: "fields"
          in: "query"
          schema:
            oneOf:
              - type: "null"
              - type: "string"
                default: "__standard"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
            default: "__standard"
            examples:
              - "id,name"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, status_info, created_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and name"
              value: "id,name"
            "fields-example-2":
              summary: "Return full representation of the automation. Full representation includes id,name,description,status,created_at,updated_at,created_by,updated_by,tasks,conditions,condition_mode"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of the automation. standard representation includes id,name,description,status,created_at,updated_at,created_by,updated_by,tasks,conditions,condition_mode"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of the automation. Minimal representation includes id,name,description,status,created_at,updated_at"
              value: "__min"
      responses:
        "200":
          description: "Get automation details"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AutomationDetails"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-name-override: "get"
    delete:
      tags:
        - "Automations"
      summary: "Delete automation and its tasks"
      description: "Delete automation data"
      operationId: "DeleteAutomation"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "automation_id"
          in: "path"
          schema:
            type: "integer"
            title: "Automation ID"
            description: "ID of the automation"
            default: 4
            examples:
              - 4
          description: "ID of the automation"
          required: true
          examples:
            "automation_id-example-1":
              summary: "Sample automation ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Automations"
      summary: "Update automation related data"
      description: "Update automation related data"
      operationId: "UpdateAutomation"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "automation_id"
          in: "path"
          schema:
            type: "integer"
            title: "Automation ID"
            description: "ID of the automation"
            default: 4
            examples:
              - 4
          description: "ID of the automation"
          required: true
          examples:
            "automation_id-example-1":
              summary: "Sample automation ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AutomationPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "202":
          description: "Patch on the automation object"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ObjectJobSchema"}
      x-speakeasy-name-override: "update"
  "/workspaces/{workspace_id}/projects/{project_id}/connectors/{connector_key}/connections/{connection_key}/chat":
    get:
      tags:
        - "QueryGen"
      summary: "Get status"
      description: "Get status on chat generation"
      operationId: "GetChatStatus"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/QueryGenerationStatus"}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
    post:
      tags:
        - "QueryGen"
      summary: "Generate query"
      description: "Get query suggestion for the given data"
      operationId: "GetQuerySuggestion"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "connector_key"
          in: "path"
          schema:
            type: "string"
            title: "Encoded Connector key"
            description: "Encoded key of the Connector to work with"
            examples:
              - "cG9zdGdyZXM="
          description: "Encoded key of the Connector to work with"
          required: true
          examples:
            "connector_key-example-1":
              summary: "Sample Connector key"
              value: "cG9zdGdyZXM="
        - name: "connection_key"
          in: "path"
          schema:
            type: "string"
            maxLength: 100
            minLength: 1
            title: "Connection Key"
            description: "Encoded key of the connection"
            examples:
              - "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
          description: "Encoded key of the connection"
          required: true
          examples:
            "connection_key-example-1":
              summary: "Sample Connection Key"
              value: "kvx3b8lhfe3ilk0wv4xu4fl539njerj0lmcr6wf8"
        - name: "reset_cache"
          in: "query"
          schema:
            type: "boolean"
            title: "Reset"
            description: "Force Reset/regenerate cache. This will ignore any query request"
            default: false
            examples:
              - true
          description: "Force Reset/regenerate cache. This will ignore any query request"
          required: false
          examples:
            "reset_cache-example-1":
              summary: "Reset cache"
              value: true
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Intent"}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-name-override: "getSuggestion"
  "/workspaces/{workspace_id}/split-segments":
    get:
      tags:
        - "Split Segments"
      summary: "Get segments and features"
      description: "Retrieve split segments and the features associated with it"
      operationId: "GetSegments"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      responses:
        "200":
          description: "List segments"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SegmentsResponseSchema"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
      x-speakeasy-group: "splitSegments"
      x-speakeasy-name-override: "get"
    patch:
      tags:
        - "Split Segments"
      summary: "Update segments with workspace Id"
      description: "Update split segments with workspace Id"
      operationId: "UpdateSegments"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SegmentsPatch"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                oneOf:
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Client Error"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
                  - properties:
                      "status_code":
                        type: "integer"
                      "detail":
                        type: "string"
                      "extra":
                        additionalProperties: {}
                        type:
                          - "null"
                          - "object"
                          - "array"
                    type: "object"
                    required:
                      - "detail"
                      - "status_code"
                    description: "Validation Exception"
                    examples:
                      - {"status_code": 400, "detail": "Bad Request", "extra": {}}
        "401":
          description: "No permission -- see authorization schemes"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Authorization Exception"
                examples:
                  - {"status_code": 401, "detail": "Unauthorized", "extra": {}}
      x-speakeasy-group: "splitSegments"
      x-speakeasy-name-override: "update"
  "/settings/users":
    get:
      tags:
        - "Owner user control settings"
      summary: "List users of all workspaces"
      description: "List users of all workspaces where the user is an owner"
      operationId: "ListUsersOfWorkspaces"
      parameters:
        - name: "fields"
          in: "query"
          schema:
            type: "string"
            title: "Fields"
            description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
            default: "id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link"
            examples:
              - "id,email"
              - "__full"
              - "__standard"
              - "__min"
          description: "Fields to be returned in a comma-separated format may include id, name, created_at, updated_at."
          required: false
          examples:
            "fields-example-1":
              summary: "Return only id and email of  users inside workspace"
              value: "id,email"
            "fields-example-2":
              summary: "Return full representation of users inside workspace. Full representation includes id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link,user_roles,status"
              value: "__full"
            "fields-example-3":
              summary: "Return standard representation of users inside workspace. standard representation includes id,email,first_name,last_name,created_at,updated_at,last_login_date,last_active_date,profile_link"
              value: "__standard"
            "fields-example-4":
              summary: "Return minimal representation of users inside workspace. Minimal representation includes id,email,first_name,last_name,created_at,updated_at"
              value: "__min"
        - name: "sort"
          in: "query"
          schema:
            type: "string"
            title: "Sort users"
            description: "Sort users by id, first_name or email"
            default: "(email:asc)"
            examples:
              - "(email:desc), (id:asc)"
          description: "Sort users by id, first_name or email"
          required: false
          examples:
            "sort-example-1":
              summary: "Sort users by email and id"
              value: "(email:desc), (id:asc)"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the users list"
            default: 0
            examples:
              - 1
          description: "Offset from the beginning of the users list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 2nd user"
              value: 1
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 1
            title: "Limit"
            description: "Max number of users to return"
            default: 10
            examples:
              - 10
          description: "Max number of users to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned user count to 10"
              value: 10
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "ownerUserControlSettings"
      x-speakeasy-name-override: "listUsers"
    patch:
      tags:
        - "Owner user control settings"
      summary: "Transfer ownerships of the workspaces"
      description: "Transfer ownerships of the workspaces"
      operationId: "TransferOwnerships"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/WorkspaceUsersSettingsPatch"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "ownerUserControlSettings"
  "/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/dataviews/{dataview_id}/conditional-format":
    get:
      tags:
        - "Conditional Format"
      summary: "get conditional format"
      description: "Get conditional format details for the dataview"
      operationId: "GetConditionalFormat"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "conditionalFormat"
      x-speakeasy-name-override: "get"
    post:
      tags:
        - "Conditional Format"
      summary: "create conditional format"
      description: "Post conditional format details for the dataview"
      operationId: "CreateConditionalFormat"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema:
              additionalProperties: {"$ref": "#/components/schemas/apiv2_conditional_formatting_schema_ColumnSchema"}
              type: "object"
              description: "Create Conditional format"
              examples:
                - {"column_1": {"FORMAT": {"color": "red", "type": "no bold"}, "CONDITION": {"OR": [{"column_1": {"CONTAINS": {"VALUE": ["gmail.com"]}}}, {"column_5": {"CONTAINS": {"VALUE": ["in_trial"]}}}]}}, "column_2": {"FORMAT": {"color": "blue", "type": "italic"}, "CONDITION": {"OR": [{"column_1": {"CONTAINS": {"VALUE": [".io"]}}}, {"column_6": {"IN_LIST": {"COLUMN": "column_nmq2mogdfh"}}}]}}}
        required: true
      responses:
        "201":
          description: "Document created, URL follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "conditionalFormats"
      x-speakeasy-name-override: "create"
    delete:
      tags:
        - "Conditional Format"
      summary: "delete conditional format"
      description: "Delete conditional format details for the dataview"
      operationId: "DeleteConditionalFormat"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      responses:
        "204":
          description: "Request fulfilled, nothing follows"
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "conditionalFormat"
      x-speakeasy-name-override: "delete"
    patch:
      tags:
        - "Conditional Format"
      summary: "update conditional format"
      description: "Patch conditional format details for the dataview"
      operationId: "UpdateConditionalFormat"
      parameters:
        - name: "workspace_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Workspace ID"
            description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
            default: 2
            examples:
              - 4
          description: "Workspace refers to a collection of projects. Workspace ID is unique identifier for workspace."
          required: true
          examples:
            "workspace_id-example-1":
              summary: "Sample workspace ID"
              value: 4
        - name: "project_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Project ID"
            description: "Project ID of the workspace"
            default: 1
            examples:
              - 4
          description: "Project ID of the workspace"
          required: true
          examples:
            "project_id-example-1":
              summary: "Sample project ID"
              value: 4
        - name: "dataset_id"
          in: "path"
          schema:
            type: "integer"
            title: "Dataset ID"
            description: "Id of the dataset"
            examples:
              - 121
          description: "Id of the dataset"
          required: true
          examples:
            "dataset_id-example-1":
              summary: "Sample dataset ID"
              value: 121
        - name: "dataview_id"
          in: "path"
          schema:
            type: "integer"
            minimum: 1
            title: "Dataview ID"
            description: "Dataview ID of the dataset"
            default: 4
            examples:
              - 4
          description: "Dataview ID of the dataset"
          required: true
          examples:
            "dataview_id-example-1":
              summary: "Sample dataview ID"
              value: 4
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CondFormattingPatchRequest"}
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad request syntax or unsupported method"
          content:
            "application/json":
              schema:
                properties:
                  "status_code":
                    type: "integer"
                  "detail":
                    type: "string"
                  "extra":
                    additionalProperties: {}
                    type:
                      - "null"
                      - "object"
                      - "array"
                type: "object"
                required:
                  - "detail"
                  - "status_code"
                description: "Validation Exception"
                examples:
                  - {"status_code": 400, "detail": "Bad Request", "extra": {}}
      x-speakeasy-group: "conditionalFormat"
      x-speakeasy-name-override: "update"
  "/reports":
    get:
      tags:
        - "Reports"
      summary: "Get list of reports"
      description: "Returns list of reports. Query parameters can be used to optimize the response."
      operationId: "GetReports"
      parameters:
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            maximum: 100
            minimum: 0
            title: "Limit"
            description: "Max number of reports to return"
            default: 10
            examples:
              - 10
          description: "Max number of reports to return"
          required: false
          examples:
            "limit-example-1":
              summary: "Limit returned reports count to 10"
              value: 10
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            title: "Offset"
            description: "Offset from the beginning of the reports list"
            default: 0
            examples:
              - 0
          description: "Offset from the beginning of the reports list"
          required: false
          examples:
            "offset-example-1":
              summary: "Start from 10th reports"
              value: 0
      responses:
        "200":
          description: "List of projects"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReportList"}
        "400":
          description: "Bad Request"
        "401":
          description: "Authorization error"
        "304":
          description: "Not Modified"
      x-speakeasy-name-override: "list"
components:
  schemas:
    "AbstractSource":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details":
          type: "object"
          description: "Details of the abstract ds source"
          examples:
            - {}
      type: "object"
      required:
        - "details"
      title: "AbstractSource"
      examples:
        - {"type": "abstract", "details": {"argue": "faulknerrachel@example.com", "age": "1992-06-22T18:07:59.993900", "himself": "https://www.garcia-zimmerman.com/categories/app/listhomepage.html", "eye": "vejFffhshWusXrtcUWAM", "affect": "2009-07-30T22:43:26.325336", "simply": "RPcdlsVaTcjXMDZVJvqd", "well": 5181, "value": "xTiCMyNHDcmcTEzGTCoM", "task": "https://caldwell.info/app/searchhomepage.asp"}}
    "AcceptInviteSchema":
      properties:
        "token":
          type: "string"
          title: "Token"
          description: "Invite token"
          examples:
            - {"summary": "Invite token", "value": "invite_token"}
      type: "object"
      required:
        - "token"
      title: "AcceptInviteSchema"
      description: "Accept Invite User Data"
      examples:
        - {"token": "invite_token"}
    "AccessCheckResponseSchema":
      properties:
        "allowed":
          type: "boolean"
        "message":
          type: "string"
      type: "object"
      required:
        - "allowed"
        - "message"
      title: "AccessCheckResponseSchema"
    "AddColumns":
      properties:
        "c_name":
          type: "string"
          description: "Column Name"
          examples:
            - {"value": "test"}
        "c_type":
          type: "string"
          enum:
            - "text"
            - "numeric"
            - "date"
          description: "Data Type of the column"
          examples:
            - {"value": "numeric"}
      type: "object"
      required:
        - "c_name"
        - "c_type"
      title: "AddColumns"
    "AddConditionParams":
      properties:
        "sequence_number":
          type: "integer"
          title: "Sequence Number"
          description: "The rule's order in the processing pipeline"
        "prompt":
          type: "string"
          title: "Prompt"
          description: "Plain English condition, e.g., 'Filter rows where Price > 100'"
      type: "object"
      required:
        - "prompt"
        - "sequence_number"
      title: "AddConditionParams"
    "AddConnectorAddonRequest":
      properties:
        "connector_id":
          type: "integer"
          title: "Connector ID"
          description: "ID of the connector to add as an addon"
          examples:
            - {"value": 1}
      type: "object"
      required:
        - "connector_id"
      title: "AddConnectorAddonRequest"
    "AddConnectorToProfileRequestSchema":
      properties:
        "connector_id":
          type: "integer"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
              default: 0
          default: 0
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
              default: true
          default: true
      type: "object"
      required:
        - "connector_id"
      title: "AddConnectorToProfileRequestSchema"
    "AddConnectorToProfileResponseSchema":
      properties:
        "connector": {"$ref": "#/components/schemas/ConnectorSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "connector"
        - "message"
      title: "AddConnectorToProfileResponseSchema"
    "AddExportSpec":
      properties:
        "DATAVIEW_ID":
          type: "integer"
        "sequence":
          oneOf:
            - type: "null"
            - type: "integer"
        "TRIGGER_ID":
          oneOf:
            - type: "null"
            - type: "integer"
        "end_of_pipeline":
          type: "boolean"
          default: true
        "handler_type":
          type: "string"
          enum:
            - "postgres"
            - "csv_file"
            - "s3"
            - "mysql"
            - "mssql"
            - "ftp"
            - "sftp"
            - "email"
            - "elasticsearch"
            - "powerbi"
            - "redshift"
            - "bigquery"
            - "internal_dataset"
            - "publishdb"
        "trigger_type":
          type: "string"
          enum:
            - "none"
            - "pipeline"
            - "schedule"
        "target_properties":
          type: "object"
          default: {}
        "additional_properties":
          type: "object"
          default: {}
        "condition":
          type: "object"
          default: {}
        "run_immediately":
          type: "boolean"
        "validate_only":
          type: "boolean"
          default: false
      type: "object"
      required:
        - "DATAVIEW_ID"
        - "handler_type"
        - "run_immediately"
        - "trigger_type"
      title: "AddExportSpec"
      description: "A export specification"
      examples:
        - {"DATAVIEW_ID": 2311, "sequence": 3, "TRIGGER_ID": null, "end_of_pipeline": true, "handler_type": "internal_dataset", "trigger_type": "pipeline", "target_properties": {"COLUMN_MAPPING": {"Color": "Color", "Age": "Age"}}, "additional_properties": {}, "condition": {}, "run_immediately": true, "validate_only": false}
    "AddExternalKeySpec":
      properties:
        "key_type":
          type: "string"
          enum:
            - "open_ai"
          maxLength: 100
          minLength: 1
          description: "Type of the external key e.g. open_ai"
          examples:
            - {"value": "open_ai"}
        "key_name":
          type: "string"
          maxLength: 100
          minLength: 1
          description: "A name to be associated with the key"
          examples:
            - {"value": "Mammmoth Open AI"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 200
          minLength: 1
          description: "Describe the purpose of the key and any added information related to it"
        "secure_key":
          type: "string"
          maxLength: 200
          minLength: 3
          description: "The key value which will be used in the intended service"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
      type: "object"
      required:
        - "key_name"
        - "key_type"
        - "secure_key"
      title: "AddExternalKeySpec"
      description: "External key specification"
      examples:
        - {"key_type": "open_ai", "key_name": "My Open AI key", "description": null, "secure_key": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
    "AddFeatureToProfileRequestSchema":
      properties:
        "feature_id":
          type: "integer"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
              default: 0
          default: 0
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
              default: true
          default: true
        "value":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "feature_id"
      title: "AddFeatureToProfileRequestSchema"
    "AddFeatureToProfileResponseSchema":
      properties:
        "feature": {"$ref": "#/components/schemas/subscriptions_schema_FeatureSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "feature"
        - "message"
      title: "AddFeatureToProfileResponseSchema"
    "AddRemoveBatchColumns":
      properties:
        "add":
          items:
            type: "string"
          type: "array"
          description: "List of columns to be added to batch_columns"
          examples:
            - {"value": ["batch_table_col_id"]}
        "remove":
          items:
            type: "string"
          type: "array"
          description: "List of columns to be removed from batch_columns"
          examples:
            - {"value": ["batch_table_col_row_count"]}
      type: "object"
      required:
        - "add"
        - "remove"
      title: "AddRemoveBatchColumns"
    "AddStorageAddonRequest":
      properties:
        "additional_storage_gb":
          type: "integer"
          title: "Additional Storage (GB)"
          description: "Amount of additional storage to add in gigabytes"
          examples:
            - {"value": 100}
      type: "object"
      required:
        - "additional_storage_gb"
      title: "AddStorageAddonRequest"
    "AddTaskSpec":
      properties:
        "DATAVIEW_ID":
          type: "integer"
        "SEQUENCE_NUMBER":
          oneOf:
            - type: "null"
            - type: "integer"
        "CONDITION":
          oneOf:
            - type: "null"
            - type: "object"
      type: "object"
      required:
        - "DATAVIEW_ID"
      title: "AddTaskSpec"
      description: "A task specification"
      examples:
        - {"DATAVIEW_ID": 2311, "SEQUENCE_NUMBER": 13, "CONDITION": null, "COPY": {}}
    "AddUserSeatsAddonRequest":
      properties:
        "user_count":
          type: "integer"
          title: "User Count"
          description: "Number of additional user seats to add"
          default: 1
          examples:
            - {"value": 5}
      type: "object"
      title: "AddUserSeatsAddonRequest"
    "AddUserSpec":
      properties:
        "user_id":
          type: "integer"
          description: "User id"
          examples:
            - {"value": 1}
        "role_name":
          type: "string"
          enum:
            - "project_admin"
            - "project_analyst"
          description: "Role name"
          default: "project_analyst"
          examples:
            - {"value": "project_admin"}
      type: "object"
      required:
        - "user_id"
      title: "AddUserSpec"
    "AddUserSupport":
      properties:
        "first_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"summary": "Sample First Name", "value": "Jacob"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Last name of the user"
          examples:
            - {"summary": "Sample Last Name", "value": "van"}
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "role":
          type: "string"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
          title: "Role"
          description: "Role of the user"
          examples:
            - {"summary": "Sample User Roles", "value": "workspace_member"}
      type: "object"
      required:
        - "email"
        - "role"
      title: "AddUserSupport"
      description: "Details of the workspace to be created"
      examples:
        - {"first_name": "John", "last_name": "Smith", "email": "johnsmith@gmail.com", "role": "workspace_admin"}
    "AddUsersToProject":
      properties:
        "users":
          items: {"$ref": "#/components/schemas/AddUserSpec"}
          type: "array"
          title: "List of users and their roles"
          description: "List of user IDs to add to project"
          examples:
            - {"value": [{"user_id": 1, "role_name": "project_admin"}]}
      type: "object"
      required:
        - "users"
      title: "AddUsersToProject"
      description: "Add user to a project. Only project_admin and project_analyst are allowed"
      examples:
        - {"users": [{"user_id": 4, "role_name": "project_admin"}]}
        - {"users": [{"user_id": 4, "role_name": "project_analyst"}]}
    "AdditionalInfo":
      properties:
        "append_to_ds_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Id"
          description: "File Id"
          examples:
            - {"value": 163534}
        "parent_id":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Parent Id"
          description: "Parent Id"
          examples:
            - {"value": "label_8024"}
        "delete_existing_after_append":
          type: "boolean"
          title: "Delete Existing After Append"
          description: "Delete Existing After Append"
          default: false
          examples:
            - {"value": false}
        "password_protected":
          type: "boolean"
          title: "Password Protected"
          description: "Password Protected"
          default: false
          examples:
            - {"value": true}
        "sheets_info":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/SheetInfo"}
              type: "array"
          title: "Sheet Info"
          description: "Sheet Info"
          examples:
            - {"value": {}}
        "final_ds_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Final Ds Id"
          description: "Final Dataset Id"
          examples:
            - {"value": {}}
        "url":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Final Ds Id"
          description: "Final Dataset Id"
          examples:
            - {"value": {}}
      type: "object"
      title: "AdditionalInfo"
      description: "Additional Info of the file"
      examples:
        - {"value": {"parent_id": "label_8024", "delete_existing_after_append": false, "password_protected": true, "sheet_info": {}}}
    "AddonResponse":
      properties:
        "id":
          type: "integer"
          title: "Addon ID"
          description: "Unique identifier for the addon"
          examples:
            - {"value": 1}
        "workspace_id":
          type: "integer"
          title: "Workspace ID"
          description: "ID of the workspace this addon belongs to"
          examples:
            - {"value": 123}
        "addon_type":
          type: "string"
          title: "Addon Type"
          description: "Type of addon (connector, storage, user)"
          examples:
            - {"value": "connector"}
        "quantity":
          type: "integer"
          title: "Quantity"
          description: "Quantity of the addon"
          examples:
            - {"value": 1}
        "status":
          type: "string"
          title: "Status"
          description: "Status of the addon (pending, active, cancelled)"
          examples:
            - {"value": "pending"}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created At"
          description: "When the addon was created"
          examples:
            - {"value": "2021-08-10T10:00:00"}
      type: "object"
      required:
        - "addon_type"
        - "id"
        - "quantity"
        - "status"
        - "workspace_id"
      title: "AddonResponse"
      description: "Details of the created addon"
    "AddonSuccessResponse":
      properties:
        "addon": {"$ref": "#/components/schemas/AddonResponse"}
        "message":
          type: "string"
          title: "Message"
          description: "Success message"
          examples:
            - {"value": "Connector addon added successfully to workspace 123"}
      type: "object"
      required:
        - "addon"
        - "message"
      title: "AddonSuccessResponse"
    "AdminWorkspaceUserPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/WorkspaceUserPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "AdminWorkspaceUserPatch"
      description: "Update user role on workspace"
      examples:
        - {"patches": [{"op": "replace", "path": "role", "value": "workspace_member"}]}
    "AdminWorkspaceUserPatchOp":
      properties:
        "op":
          type: "string"
          title: "Operation"
          description: "Operation to be performed on the workspace"
          examples:
            - {"summary": "Sample Operation", "value": "replace"}
        "path":
          type: "string"
          title: "Path"
          description: "Path of the workspace"
          examples:
            - {"summary": "Sample Path", "value": "name"}
        "value":
          type: "object"
          title: "Value"
          description: "Value of the workspace"
          examples:
            - {"summary": "Sample Value", "value": {}}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "AdminWorkspaceUserPatchOp"
    "ApiPostDsBatchSource":
      properties:
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
      type: "object"
      title: "ApiPostDsBatchSource"
    "AppUsageFieldSchema":
      properties:
        "storage_used":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Storage used"
          description: "Total storage used by the workspace"
          examples:
            - {"summary": "Sample Storage used", "value": 100}
        "current_storage_allowed":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Current storage allowed"
          description: "Current storage allowed for the workspace"
          examples:
            - {"summary": "Sample Current storage allowed", "value": 1000}
        "plan_storage_value":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Plan storage value"
          description: "Initial storage offered by the plan"
          examples:
            - {"summary": "Sample Plan storage value", "value": 1000}
        "max_storage_allowed":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Max storage allowed"
          description: "Maximum storage allowed that can be allowed for the workspace with current plan and addons"
          examples:
            - {"summary": "Sample Max storage allowed", "value": 1000}
        "row_count_utilized":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Row count utilized"
          description: "Total row count utilized by the workspace"
          examples:
            - {"summary": "Sample Row count utilized", "value": 100}
        "current_row_count_allowed":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Current row count allowed"
          description: "Current row count allowed for the workspace"
          examples:
            - {"summary": "Sample Current row count allowed", "value": 1000}
        "plan_row_count_value":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Plan row count value"
          description: "Initial row count offered by the plan"
          examples:
            - {"summary": "Sample Plan row count value", "value": 1000}
        "max_row_count_allowed":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Max row count allowed"
          description: "Maximum row count allowed that can be allowed for the workspace with current plan and addons"
          examples:
            - {"summary": "Sample Max row count allowed", "value": 1000}
      type: "object"
      title: "AppUsageFieldSchema"
    "AppUsageSchema":
      properties:
        "workspace": {"$ref": "#/components/schemas/AppUsageFieldSchema"}
      type: "object"
      required:
        - "workspace"
      title: "AppUsageSchema"
    "AutomationConditionSchema":
      properties:
        "condition_type":
          type: "string"
          enum:
            - "at_specific_time"
            - "new_data_addition_in_folder"
          title: "Condition Type"
          description: "Condition Type"
          examples:
            - {"summary": "Sample condition type", "value": "at_specific_time"}
        "details": {"$ref": "#/components/schemas/automations_schema_ConditionSchema"}
      type: "object"
      required:
        - "condition_type"
        - "details"
      title: "AutomationConditionSchema"
    "AutomationCreationSchema":
      properties:
        "name":
          type: "string"
          minLength: 1
          title: "Name"
          description: "Name"
          examples:
            - {"summary": "Sample name", "value": "automation abc"}
        "description":
          type: "string"
          title: "Description"
          description: "Description"
          examples:
            - {"summary": "Sample description", "value": "automation description"}
        "tasks":
          items: {"$ref": "#/components/schemas/AutomationTaskSchema"}
          type: "array"
          title: "Tasks"
          description: "Tasks"
          examples:
            - {"summary": "Sample tasks", "value": [{"task_type": "run_data_retrieval", "details": [{"ds_id": 456}, {"ds_id": 555}]}]}
        "conditions":
          items: {"$ref": "#/components/schemas/AutomationConditionSchema"}
          type: "array"
          title: "Conditions"
          description: "Conditions"
          default: []
          examples:
            - {"summary": "Sample conditions", "value": [{"condition_type": "at_specific_time", "details": {"frequency": "monthly", "interval": 1, "start_at": "2025-08-06 10:56:20Z", "until": "2025-09-12 10:56:20Z", "by_week_day": ["mo"], "by_month_day": [1, 2], "start_now": true}}]}
        "condition_mode":
          type: "string"
          enum:
            - "and"
            - "or"
          title: "Condition Mode"
          description: "Condition Mode"
          default: "or"
          examples:
            - {"summary": "Sample condition type", "value": "and"}
      type: "object"
      required:
        - "description"
        - "name"
        - "tasks"
      title: "AutomationCreationSchema"
      description: "Create automation"
      examples:
        - {"name": "automation test", "description": "automation test description", "tasks": [{"task_type": "append_data", "details": {"destination_dataset_ids": [6], "source_folder_resource_id": 1}, "conditions": [{"condition_type": "new_data_addition_in_folder", "details": {"file_contains": "less"}}]}]}
        - {"name": "automation abc", "description": "automation abc description", "tasks": [{"task_type": "run_data_retrieval", "details": [{"ds_id": 6}, {"ds_id": 5}]}], "conditions": [{"condition_type": "at_specific_time", "details": {"frequency": "minutely", "interval": 5, "start_at": "2025-01-22 16:56:20Z", "until": "2025-01-30 16:56:20Z"}}], "condition_mode": "or"}
    "AutomationDetails":
      properties:
        "automation": {"$ref": "#/components/schemas/AutomationSchema"}
      type: "object"
      required:
        - "automation"
      title: "AutomationDetails"
    "AutomationPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "command"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "details"
            - "run"
            - "status"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "password"}
        "value":
          oneOf:
            - type: "string"
            - {"$ref": "#/components/schemas/PatchAutomationSchema"}
            - type: "object"
          title: "Value"
          description: "Value to update automation details"
          examples:
            - {"value": {"name": "test"}}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "AutomationPatchData"
    "AutomationPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/AutomationPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "AutomationPatchRequest"
      description: "Update automation related details"
      examples:
        - {"patch": [{"op": "replace", "path": "details", "value": {"name": "automation test updated", "description": "automation test", "tasks": [{"id": 1, "task_type": "append_data", "details": {"destination_dataset_ids": [6], "source_folder_resource_id": 7}, "conditions": [{"condition_type": "new_data_addition_in_folder", "details": {"file_contains": "less"}, "condition_mode": "or"}]}], "status": "active"}}]}
        - {"patch": [{"op": "command", "path": "run", "value": {}}]}
        - {"patch": [{"op": "replace", "path": "status", "value": "suspend"}]}
    "AutomationSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID"
          description: "Automation ID"
          examples:
            - {"summary": "Sample ID", "value": 1}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Automation Name"
          examples:
            - {"summary": "Sample automation name", "value": "automation xyz"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Description"
          description: "Automation Description"
          examples:
            - {"summary": "Sample automation description", "value": "automation xyz description"}
        "tasks":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/TaskSchema"}
              type: "array"
          title: "Tasks"
          description: "Automation Tasks"
          examples:
            - {"summary": "Sample automation tasks", "value": [{"task_type": "run_data_retrieval", "details": [{"id": 444, "ds_id": 456, "ds_name": "abc", "status": "idle", "schedule_id": 123}]}]}
        "conditions":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/GetConditionSchema"}
              type: "array"
          title: "Conditions"
          description: "Conditions"
          examples:
            - {"summary": "Sample automation conditions", "value": [{"condition_type": "new_data_addition_in_folder", "details": {"source_folder_resource_id": 33, "file_contains": "abc", "mapping": [{"col A": ["col B", "col C"], "col2": "col4", "col5": "col7"}]}}]}
        "condition_mode":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Condition Mode for automation"
          description: "Mode of Condition"
          examples:
            - {"summary": "Sample automation condition mode", "value": "and/or"}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample created at", "value": "2025-08-12 10:56:20Z"}
        "created_by":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Created By"
          description: "Created By"
          examples:
            - {"summary": "Sample created by", "value": 4}
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Updated At"
          description: "Updated At"
          examples:
            - {"summary": "Sample updated at", "value": "2025-08-12 10:56:20Z"}
        "updated_by":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Updated By"
          description: "Updated By"
          examples:
            - {"summary": "Sample updated by", "value": 5}
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "active"
            - "suspended"
            - "failed"
            - null
          title: "Status"
          description: "Status"
          examples:
            - {"summary": "Sample status", "value": "enabled"}
      type: "object"
      title: "AutomationSchema"
    "AutomationTaskSchema":
      properties:
        "task_type":
          type:
            - "string"
            - "null"
          enum:
            - "run_data_retrieval"
            - "append_data"
            - null
          title: "Task type"
          description: "Task type"
          examples:
            - {"summary": "Sample task type", "value": "run_data_retrieval"}
        "details":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/TaskDetailsSchema"}
          title: "Details"
          description: "Task Details"
          examples:
            - {"summary": "Sample task details", "value": [{"ds_ids": [5, 6]}]}
        "conditions":
          items:
            type: "object"
          type: "array"
          title: "Conditions"
          description: "Conditions"
          default: []
          examples:
            - {"summary": "Sample conditions", "value": [{"condition_type": "at_specific_time", "details": {"frequency": "monthly", "interval": 1, "start_at": "2027-08-06 10:56:20Z", "until": "2028-09-12 10:56:20Z", "by_week_day": ["mo"], "by_month_day": [1, 2], "start_now": true}}]}
      type: "object"
      title: "AutomationTaskSchema"
    "AutomationsList":
      properties:
        "automations":
          items: {"$ref": "#/components/schemas/AutomationSchema"}
          type: "array"
        "limit":
          type: "integer"
          default: 10
        "offset":
          type: "integer"
          default: 0
        "next":
          type: "string"
      type: "object"
      required:
        - "automations"
        - "next"
      title: "AutomationsList"
    "BatchDescriptionCloud":
      properties:
        "space_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Space ID"
          examples:
            - 1
        "from_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "From Date"
          examples:
            - "2024-02-04T14:34:41.532945Z"
        "to_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "To Date"
          examples:
            - "2024-02-04T14:44:41.532945Z"
        "data_file_path":
          oneOf:
            - type: "null"
            - type: "string"
              format: "uri"
          description: "Data File Path"
          examples:
            - "/project-3/cloud_19_qciyyVV2pz_/iq9BwsIg84.csv"
        "on_refresh_action":
          oneOf:
            - type: "null"
            - type: "string"
          description: "On Refresh Action"
          examples:
            - "replace"
      type: "object"
      title: "BatchDescriptionCloud"
    "BatchDescriptionFile":
      properties:
        "numeric_error_columns":
          oneOf:
            - type: "null"
            - type: "array"
          description: "Numeric Error Columns"
          examples:
            - ["column_1"]
        "date_error_columns":
          oneOf:
            - type: "null"
            - type: "array"
          description: "Date Error Columns"
          examples:
            - ["column_1"]
      type: "object"
      title: "BatchDescriptionFile"
    "BatchDetails":
      properties:
        "batch": {"$ref": "#/components/schemas/BatchInfoSchema"}
      type: "object"
      required:
        - "batch"
      title: "BatchDetails"
    "BatchInfoSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Batch ID"
          examples:
            - 1
        "description":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/BatchDescriptionFile"}
            - {"$ref": "#/components/schemas/BatchDescriptionCloud"}
            - type: "object"
          description: "Batch Description"
          examples:
            - {}
        "column_count":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Column Count"
          examples:
            - 10
        "row_count":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Row Count"
          examples:
            - 100
        "source":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/CloudDsBatchSource"}
            - {"$ref": "#/components/schemas/BranchInBatchSource"}
            - {"$ref": "#/components/schemas/ProjectBranchInBatchSource"}
            - {"$ref": "#/components/schemas/WebhookDsBatchSource"}
            - {"$ref": "#/components/schemas/FileDsBatchSource"}
            - {"$ref": "#/components/schemas/DuplicateOrCombineDsBatchSource"}
            - {"$ref": "#/components/schemas/ApiPostDsBatchSource"}
          description: "Batch Source"
          examples:
            - {}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Batch Name"
          examples:
            - "batch1"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Batch Creation Time"
          examples:
            - "2024-02-04T14:44:41.532345Z"
        "state":
          type:
            - "string"
            - "null"
          enum:
            - "active"
            - "sync_pending"
            - "suspended"
            - "deleting"
            - null
          description: "Batch State"
          examples:
            - "active"
        "data_schema":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/api_ds_schema_ColumnSchema"}
              type: "array"
          description: "Data Schema"
          examples:
            - []
      type: "object"
      title: "BatchInfoSchema"
    "BatchesList":
      properties:
        "batches":
          items: {"$ref": "#/components/schemas/BatchInfoSchema"}
          type: "array"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "api/v2/workspaces/4/projects/1020/datasets/3453/batches?limit=50&offset=50"}
      type: "object"
      required:
        - "batches"
        - "next"
      title: "BatchesList"
    "BatchesPatchOperation":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "add"
            - "remove"
            - "command"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "batches"
          description: "Path"
          examples:
            - {"value": "batches"}
        "value": {"$ref": "#/components/schemas/BatchesPatchValues"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "BatchesPatchOperation"
    "BatchesPatchRequest":
      properties:
        "patch": {"$ref": "#/components/schemas/BatchesPatchOperation"}
      type: "object"
      required:
        - "patch"
      title: "BatchesPatchRequest"
      description: "State of the batches to be updated"
      examples:
        - {"patch": {"op": "replace", "path": "batches", "value": {"suspend": [1, 2, 8], "restore": [4, 5, 7]}}}
    "BatchesPatchValues":
      properties:
        "suspend":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          description: "List of batch ids to be suspended"
          examples:
            - {"value": [1, 2, 3]}
        "restore":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          description: "List of batch ids to be restored"
          examples:
            - {"value": [4, 5, 6]}
      type: "object"
      title: "BatchesPatchValues"
      description: "Value to replace/add/remove the attribute"
      examples:
        - {"value": {"suspend": [1, 2, 3], "restore": [4, 8, 6]}}
    "BatchesPostRequest":
      properties:
        "source_id":
          type: "integer"
          description: "Source dataset id"
          examples:
            - {"value": 239169}
        "mapping":
          oneOf:
            - items: {"$ref": "#/components/schemas/ColumnIdMapping"}
              type: "array"
            - items: {"$ref": "#/components/schemas/ColumnNameMapping"}
              type: "array"
        "validate_only":
          type: "boolean"
          description: "Validation required"
          examples:
            - {"value": true}
        "delete_source_ds":
          type: "boolean"
          description: "Delete source dataset"
          examples:
            - {"value": false}
        "new_ds_details":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/NewDsDetails"}
          description: "New dataset details"
          examples:
            - {"value": {"name": "new_dataset_name"}}
      type: "object"
      required:
        - "delete_source_ds"
        - "mapping"
        - "source_id"
        - "validate_only"
      title: "BatchesPostRequest"
      description: "Specs for new batch to be created"
      examples:
        - {"source_id": 239169, "mapping": [{"destination_c_id": "c_id", "source_c_id": "c_id", "expected_destination_c_type": "TEXT"}], "new_ds_details": {"name": "Batch Dataset"}, "validate_only": false, "delete_source_ds": false}
    "BillingHistoryResponseSchema":
      properties:
        "billing_history":
          items:
            type: "object"
          type: "array"
      type: "object"
      required:
        - "billing_history"
      title: "BillingHistoryResponseSchema"
    "BranchInBatchSource":
      properties:
        "resource_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Resource Path"
          examples:
            - "/workspace:Mammoth Analytics:3/project:test_project:10/label:Datasets:1/datasource:test:14"
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Dataview ID"
          examples:
            - 1
        "dataview_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataview Name"
          examples:
            - "dv1"
        "dataset_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataset Name"
          examples:
            - "ds1"
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
      type: "object"
      title: "BranchInBatchSource"
    "BulkFolderPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/FoldersPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "BulkFolderPatchRequest"
      description: "Move resources to a folder or move folder to another folder or remove resources from a folder"
      examples:
        - {"patch": [{"op": "move", "from": [555], "path": 344}]}
    "ChangeColumnType":
      properties:
        "c_id":
          type: "string"
          description: "Column id"
          examples:
            - {"value": "column_2"}
        "c_type":
          type: "string"
          enum:
            - "text"
            - "numeric"
            - "date"
          description: "Column Data Type"
          examples:
            - {"value": "numeric"}
      type: "object"
      required:
        - "c_id"
        - "c_type"
      title: "ChangeColumnType"
    "CheckConnectorAccessRequestSchema":
      properties:
        "connector_name":
          type: "string"
      type: "object"
      required:
        - "connector_name"
      title: "CheckConnectorAccessRequestSchema"
    "CheckFeatureAccessRequestSchema":
      properties:
        "feature_name":
          type: "string"
      type: "object"
      required:
        - "feature_name"
      title: "CheckFeatureAccessRequestSchema"
    "CheckUsageLimitsRequestSchema":
      type: "object"
      title: "CheckUsageLimitsRequestSchema"
    "ClientAppCreate":
      properties:
        "app_name":
          type: "string"
          maxLength: 100
          minLength: 1
          description: "Name of client app or api tokens"
          examples:
            - {"value": "New Example Client App Name"}
        "description":
          type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "project_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Project ID"
          examples:
            - {"value": "Sample project ID"}
        "api_key":
          type: "string"
          maxLength: 200
          minLength: 16
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "api_secret":
          type: "string"
          maxLength: 200
          minLength: 16
          description: "App Secret of client app or api tokens"
          examples:
            - {"value": "secret_abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "encrypted_key":
          type: "string"
          description: "Encrypted keyof client app or api tokens"
          examples:
            - {"value": "encrypted_abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "encrypted_secret":
          type: "string"
          description: "Encrypted secret of client app or api tokens"
          examples:
            - {"value": "encrypted_secret_abcDefGhiJklMnoPqrStuVwxYz1234567890"}
      type: "object"
      required:
        - "api_key"
        - "api_secret"
        - "app_name"
        - "description"
        - "encrypted_key"
        - "encrypted_secret"
      title: "ClientAppCreate"
      description: "Details of the app to be created"
      examples:
        - {"app_name": "test2", "description": "test from doc", "api_key": "G4gSQUNMLw1PJOAb3TLbiCPXpDF5", "api_secret": "noGXcACTSUBYoC0ZBM42rgYpClxcgjkk5f", "encrypted_key": "tkerqRZHKkwVL8oyKGZpozno9uelBjK+hyIk82VhEtmsS0aGsrX5Hc1mnKY0pUhdYMygSdYGFTA=", "encrypted_secret": "BT3fC5CiZsNECQryaSICcdlix87BWFWnBxDxStbOe0aKJJCmGLqgELssp3z4PrR4wNSiWhc2Rlw/beZMaLo=", "scopes": []}
    "ClientAppFieldsSchema":
      properties:
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "workspace_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Workspace ID of client app or api tokens"
          examples:
            - {"value": 1}
        "user_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "User ID of client app or api tokens"
          examples:
            - {"value": 1}
        "last_usage":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Last usage of client app or api tokens"
          examples:
            - {"value": "2021-09-28T11:30:00.000Z"}
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of client app or api tokens"
          examples:
            - {"value": 1}
        "app_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          oneOf:
            - type: "null"
            - type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
      type: "object"
      title: "ClientAppFieldsSchema"
    "ClientAppFullSchema":
      properties:
        "id":
          type: "integer"
          description: "ID of client app or api tokens"
          examples:
            - {"value": 1}
        "app_name":
          type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "workspace_id":
          type: "integer"
          description: "Workspace ID of client app or api tokens"
          examples:
            - {"value": 1}
        "user_id":
          type: "integer"
          description: "User ID of client app or api tokens"
          examples:
            - {"value": 1}
        "project_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Project ID of client app or api tokens"
          examples:
            - {"value": 1}
        "last_usage":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Last usage of client app or api tokens"
          examples:
            - {"value": "2021-09-28T11:30:00.000Z"}
      type: "object"
      required:
        - "app_key"
        - "app_name"
        - "id"
        - "user_id"
        - "workspace_id"
      title: "ClientAppFullSchema"
    "ClientAppMinSchema":
      properties:
        "id":
          type: "integer"
          description: "ID of client app or api tokens"
          examples:
            - {"value": 1}
        "app_name":
          type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
      type: "object"
      required:
        - "app_key"
        - "app_name"
        - "id"
      title: "ClientAppMinSchema"
    "ClientAppPostResponse":
      properties:
        "app_name":
          type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "description":
          type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "workspace_id":
          type: "integer"
          description: "Workspace ID of client app or api tokens"
          examples:
            - {"value": 1}
        "user_id":
          type: "integer"
          description: "User ID of client app or api tokens"
          examples:
            - {"value": 1}
      type: "object"
      required:
        - "app_key"
        - "app_name"
        - "description"
        - "user_id"
        - "workspace_id"
      title: "ClientAppPostResponse"
    "ClientAppSchema":
      properties:
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "workspace_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Workspace ID of client app or api tokens"
          examples:
            - {"value": 1}
        "user_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "User ID of client app or api tokens"
          examples:
            - {"value": 1}
        "last_usage":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Last usage of client app or api tokens"
          examples:
            - {"value": "2021-09-28T11:30:00.000Z"}
        "id":
          type: "integer"
          description: "ID of client app or api tokens"
          examples:
            - {"value": 1}
        "app_name":
          type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
      type: "object"
      required:
        - "app_key"
        - "app_name"
        - "id"
      title: "ClientAppSchema"
    "ClientAppStdSchema":
      properties:
        "id":
          type: "integer"
          description: "ID of client app or api tokens"
          examples:
            - {"value": 1}
        "app_name":
          type: "string"
          description: "Name of client app or api tokens"
          examples:
            - {"value": "Example Client App Name"}
        "app_key":
          type: "string"
          description: "App key of client app or api tokens"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Description of client app or api tokens"
          examples:
            - {"value": "Example Client App Description"}
        "workspace_id":
          type: "integer"
          description: "Workspace ID of client app or api tokens"
          examples:
            - {"value": 1}
        "user_id":
          type: "integer"
          description: "User ID of client app or api tokens"
          examples:
            - {"value": 1}
        "project_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Project ID of client app or api tokens"
          examples:
            - {"value": 1}
        "last_usage":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Last usage of client app or api tokens"
          examples:
            - {"value": "2021-09-28T11:30:00.000Z"}
      type: "object"
      required:
        - "app_key"
        - "app_name"
        - "id"
        - "user_id"
        - "workspace_id"
      title: "ClientAppStdSchema"
    "ClientAppsList":
      properties:
        "result":
          items:
            oneOf:
              - {"$ref": "#/components/schemas/ClientAppSchema"}
              - {"$ref": "#/components/schemas/ClientAppMinSchema"}
              - {"$ref": "#/components/schemas/ClientAppStdSchema"}
              - {"$ref": "#/components/schemas/ClientAppFullSchema"}
              - {"$ref": "#/components/schemas/ClientAppFieldsSchema"}
          type: "array"
      type: "object"
      required:
        - "result"
      title: "ClientAppsList"
    "CloudDBBatchSource":
      properties:
        "database":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Database Name"
          examples:
            - "test_db"
        "host":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Host"
          examples:
            - "localhost"
        "username":
          oneOf:
            - type: "null"
            - type: "string"
          description: "User name"
          examples:
            - "test"
      type: "object"
      title: "CloudDBBatchSource"
    "CloudDsBatchSource":
      properties:
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
        "connector_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Connector Name"
          examples:
            - "PostgreSQL"
        "query":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Query"
          examples:
            - "SELECT * FROM test_table"
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Profile"
          examples:
            - "default"
        "connector_details":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/CloudDBBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsDatabricksBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsBigqueryBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsParquetBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsSnowflakeBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsZoomBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsGoogleAnalyticsBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsGoogleAdsBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsShopifyBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsFacebookBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsHubspotBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsMailchimpBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsSalesforceBatchSource"}
            - {"$ref": "#/components/schemas/CloudDsSftpBatchSource"}
          description: "Connector Details"
          examples:
            - {}
      type: "object"
      title: "CloudDsBatchSource"
    "CloudDsBigqueryBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "project":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Project Name"
          examples:
            - "test_project"
        "dataset":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Name of the Dataset"
          examples:
            - "test_dataset"
      type: "object"
      title: "CloudDsBigqueryBatchSource"
    "CloudDsConfigSchema":
      properties:
        "query":
          type: "string"
          minLength: 8
          title: "Query"
          description: "Query to fetch data from cloud"
          examples:
            - {"value": "SELECT * FROM \"base_templates\" limit 2"}
        "on_refresh_action":
          type: "string"
          enum:
            - "replace"
            - "combine"
          title: "Refresh action"
          description: "on refresh action"
          examples:
            - {"value": "replace"}
        "config_key":
          type: "string"
          minLength: 1
          title: "Config key"
          description: "Config key of the source"
          examples:
            - {"value": "r7rsmlv9srbqzqi586sp8743l5sv4b0nxwi7g7n2"}
        "ds_name":
          type: "string"
          minLength: 1
          title: "Dataset name"
          description: "Name of the dataset"
          examples:
            - {"value": "base_templates"}
        "table":
          type: "string"
          minLength: 1
          title: "Table name"
          description: "Selected table name"
          examples:
            - {"value": "base_templates"}
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Profile"
          description: "Profile"
          examples:
            - {"value": "public"}
        "unique_sequence_column":
          type:
            - "string"
            - "null"
          enum:
            - "numeric"
            - "date"
            - null
          title: "Sequence column"
          description: "Unique sequence column"
          examples:
            - {"value": {"c_name": "id", "c_type": "numeric"}}
        "data_start_date":
          type: "string"
          format: "date-time"
          title: "Data start date"
          description: "Start date of the data"
          examples:
            - {"value": "2024-09-27 04:22:00"}
      type: "object"
      required:
        - "config_key"
        - "data_start_date"
        - "ds_name"
        - "on_refresh_action"
        - "query"
        - "table"
      title: "CloudDsConfigSchema"
    "CloudDsDatabricksBatchSource":
      properties:
        "host":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Host"
          examples:
            - "localhost"
        "http_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "HTTP Path"
          examples:
            - "/api/2.0/clusters/list"
        "catalog":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Catalog"
          examples:
            - "test_catalog"
      type: "object"
      title: "CloudDsDatabricksBatchSource"
    "CloudDsFacebookBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "user_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "User Name"
          examples:
            - "test_user"
      type: "object"
      title: "CloudDsFacebookBatchSource"
    "CloudDsGoogleAdsBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "account_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Account Name"
          examples:
            - "test_account"
      type: "object"
      title: "CloudDsGoogleAdsBatchSource"
    "CloudDsGoogleAnalyticsBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
      type: "object"
      title: "CloudDsGoogleAnalyticsBatchSource"
    "CloudDsHubspotBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "user_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "User Name"
          examples:
            - "test_user"
        "domain":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Domain"
          examples:
            - "test_domain"
      type: "object"
      title: "CloudDsHubspotBatchSource"
    "CloudDsMailchimpBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
      type: "object"
      title: "CloudDsMailchimpBatchSource"
    "CloudDsParquetBatchSource":
      properties:
        "database":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Database Name"
          examples:
            - "test_db"
        "host":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Host"
          examples:
            - "localhost"
        "username":
          oneOf:
            - type: "null"
            - type: "string"
          description: "User name"
          examples:
            - "test"
        "account_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Account Name"
          examples:
            - "test_account"
        "container":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Container"
          examples:
            - "test_container"
      type: "object"
      title: "CloudDsParquetBatchSource"
    "CloudDsSalesforceBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "instance_url":
          oneOf:
            - type: "null"
            - type: "string"
              format: "url"
          description: "Instance URL"
          examples:
            - "https://test.com"
      type: "object"
      title: "CloudDsSalesforceBatchSource"
    "CloudDsSftpBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
        "domain":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Domain"
          examples:
            - "test_domain"
        "username":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Username"
          examples:
            - "test_user"
      type: "object"
      title: "CloudDsSftpBatchSource"
    "CloudDsShopifyBatchSource":
      properties:
        "shop_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Shop Name"
          examples:
            - "test_shop"
        "shop_url":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Shop URL"
          examples:
            - "https://test.com"
      type: "object"
      title: "CloudDsShopifyBatchSource"
    "CloudDsSnowflakeBatchSource":
      properties:
        "database":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Database Name"
          examples:
            - "test_db"
        "host":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Host"
          examples:
            - "localhost"
        "username":
          oneOf:
            - type: "null"
            - type: "string"
          description: "User name"
          examples:
            - "test"
        "account":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Account"
          examples:
            - "test_account"
        "warehouse":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Warehouse"
          examples:
            - "test_warehouse"
        "role":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Role"
          examples:
            - "test_role"
      type: "object"
      title: "CloudDsSnowflakeBatchSource"
    "CloudDsZoomBatchSource":
      properties:
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          description: "Email"
          examples:
            - "test@gmail.com"
      type: "object"
      title: "CloudDsZoomBatchSource"
    "CloudFileDsConfig":
      properties:
        "ds_name":
          type: "string"
          minLength: 1
          title: "Datasource name"
          description: "Datasource name"
          examples:
            - {"value": "08.12.21-RFIG.csv"}
        "file_path":
          type: "string"
          minLength: 1
          title: "File path"
          description: "File path"
          examples:
            - {"value": "./sftp_test/08.12.21-RFIG.csv"}
        "data_pull_file":
          type: "string"
          title: "Data pull file"
          description: "Data pull file"
          examples:
            - {"value": "Pull next file based on name pattern"}
        "on_refresh_action":
          type: "string"
          enum:
            - "replace"
            - "combine"
          title: "On refresh action"
          description: "On refresh action"
          examples:
            - {"value": "replace"}
        "name_pattern":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name pattern"
          description: "Name pattern"
          examples:
            - {"value": "<dd>.<mm>.<yy>-RFIG.csv"}
        "folder_path":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Folder path"
          description: "Folder path"
          examples:
            - {"value": "./sftp_test"}
        "last_pulled_file":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last pulled file"
          description: "Last pulled file"
          examples:
            - {"value": "08.12.21-RFIG.csv"}
        "config_key":
          type: "string"
          minLength: 1
          title: "config key"
          description: "Config key of the source"
          examples:
            - {"value": "wjlda6rtyl75zlfuep8tjuct5bgim8qa3yzlkyoq"}
      type: "object"
      required:
        - "config_key"
        - "data_pull_file"
        - "ds_name"
        - "file_path"
        - "on_refresh_action"
      title: "CloudFileDsConfig"
    "ColumnIdMapping":
      properties:
        "destination_c_id":
          type: "string"
          description: "Destination column id"
          examples:
            - {"value": "column_id"}
        "source_c_id":
          type: "string"
          description: "Source column id"
          examples:
            - {"value": "column_id"}
        "expected_destination_c_type":
          type: "string"
          enum:
            - "TEXT"
            - "NUMERIC"
            - "DATE"
          description: "Expected destination column data type"
          examples:
            - {"value": "TEXT"}
      type: "object"
      required:
        - "destination_c_id"
        - "expected_destination_c_type"
        - "source_c_id"
      title: "ColumnIdMapping"
    "ColumnNameMapping":
      properties:
        "destination_c_name":
          type: "string"
          description: "Destination column name"
          examples:
            - {"value": "CustomerID"}
        "source_c_name":
          type: "string"
          description: "Source column name"
          examples:
            - {"value": "CustomerID"}
        "expected_destination_c_type":
          type: "string"
          enum:
            - "TEXT"
            - "NUMERIC"
            - "DATE"
          description: "Expected destination column data type"
          examples:
            - {"value": "TEXT"}
      type: "object"
      required:
        - "destination_c_name"
        - "expected_destination_c_type"
        - "source_c_name"
      title: "ColumnNameMapping"
    "Columns":
      properties:
        "c_id":
          type: "string"
          minLength: 1
          description: "Column ID"
          examples:
            - {"summary": "Sample Column ID", "value": "column_1"}
        "c_name":
          type: "string"
          minLength: 1
          description: "Column Name"
          examples:
            - {"summary": "Sample Column Name", "value": "test"}
        "c_type":
          type: "string"
          enum:
            - "text"
            - "numeric"
            - "date"
          description: "Data Type of the column"
          examples:
            - {"summary": "Sample Data Type", "value": "numeric"}
        "c_format":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/NumericFormat"}
            - type: "string"
          description: "Format to be applied to the column. This field can be None for text columns"
          examples:
            - {"summary": "Specifying a date format shows the date as e.g. '10-Oct-1901'", "value": "%d-%b-%Y"}
            - {"summary": "Adds a percentage symbol to numbers", "value": {"comma_separated": false, "currency_symbol": "", "decimal_spec": 0, "enabled": true, "is_percentage": true, "numtype": "float"}}
      type: "object"
      required:
        - "c_id"
        - "c_name"
        - "c_type"
      title: "Columns"
    "CondFormattingPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/ConditionPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "CondFormattingPatchRequest"
      description: "Update Conditional format"
      examples:
        - {"patch": [{"op": "replace", "path": "condition", "value": {"column_1": {"FORMAT": {"color": "red", "type": "no bold"}, "CONDITION": {"OR": [{"column_1": {"CONTAINS": {"VALUE": ["gmail.com"]}}}, {"column_5": {"CONTAINS": {"VALUE": ["in_trial"]}}}]}}, "column_2": {"FORMAT": {"color": "blue", "type": "italic"}, "CONDITION": {"OR": [{"column_1": {"CONTAINS": {"VALUE": [".io"]}}}, {"column_6": {"IN_LIST": {"COLUMN": "column_nmq2mogdfh"}}}]}}}}]}
    "ConditionPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "condition"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "condition"}
        "value":
          additionalProperties: {"$ref": "#/components/schemas/apiv2_conditional_formatting_schema_ColumnSchema"}
          type: "object"
          title: "Value"
          description: "Value to update automation details"
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "ConditionPatchData"
    "ConnectionPatchOp":
      properties:
        "op":
          type: "string"
          const: "replace"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          const: "connection"
          description: "Path"
          examples:
            - {"value": "connection"}
        "value":
          type: "object"
          description: "Patch value"
          examples:
            - {"value": {"database": "db"}}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "ConnectionPatchOp"
    "ConnectionPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/ConnectionPatchOp"}
          type: "array"
          description: "List of patch operations"
          examples:
            - {"value": [{"op": "replace", "path": "connection", "value": {"database": "db"}}]}
      type: "object"
      required:
        - "patch"
      title: "ConnectionPatchRequest"
      description: "Subscription detail which needs to be updated"
      examples:
        - {"patch": [{"op": "replace", "path": "connection", "value": {"database": "hubli_journal", "hostname": "localhost", "port": 5432, "username": "appuser", "<password>": "<pwd>"}}]}
    "ConnectorList":
      properties:
        "connectors":
          items:
            type: "object"
          type: "array"
        "limit":
          type: "integer"
          default: 10
        "offset":
          type: "integer"
          default: 0
        "next":
          type: "string"
      type: "object"
      required:
        - "connectors"
        - "next"
      title: "ConnectorList"
    "ConnectorListResponseSchema":
      properties:
        "connectors":
          items: {"$ref": "#/components/schemas/ConnectorSchema"}
          type: "array"
      type: "object"
      required:
        - "connectors"
      title: "ConnectorListResponseSchema"
    "ConnectorProfileConnectorSchema":
      properties:
        "connector_id":
          type: "integer"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
              default: 0
          default: 0
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
              default: true
          default: true
      type: "object"
      required:
        - "connector_id"
      title: "ConnectorProfileConnectorSchema"
    "ConnectorProfileListResponseSchema":
      properties:
        "connector_profiles":
          items: {"$ref": "#/components/schemas/ConnectorProfileSchema"}
          type: "array"
      type: "object"
      required:
        - "connector_profiles"
      title: "ConnectorProfileListResponseSchema"
    "ConnectorProfileResponseSchema":
      properties:
        "connector_profile": {"$ref": "#/components/schemas/ConnectorProfileSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "connector_profile"
        - "message"
      title: "ConnectorProfileResponseSchema"
    "ConnectorProfileSchema":
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
        "connectors":
          items: {"$ref": "#/components/schemas/ConnectorSchema"}
          type: "array"
        "connectors_count":
          type: "integer"
        "used_in_plans":
          items:
            type: "string"
          type: "array"
        "plan_count":
          type: "integer"
      type: "object"
      required:
        - "connectors"
        - "connectors_count"
        - "id"
        - "name"
        - "plan_count"
        - "used_in_plans"
      title: "ConnectorProfileSchema"
    "ConnectorResponseSchema":
      properties:
        "connector": {"$ref": "#/components/schemas/ConnectorSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "connector"
        - "message"
      title: "ConnectorResponseSchema"
    "ConnectorSchema":
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "price_per_month":
          type: "number"
        "enabled":
          type: "boolean"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
        "used_in_profiles":
          items:
            type: "string"
          type: "array"
        "profile_count":
          type: "integer"
      type: "object"
      required:
        - "enabled"
        - "id"
        - "name"
        - "price_per_month"
        - "profile_count"
        - "used_in_profiles"
      title: "ConnectorSchema"
    "ConnectorsSchema":
      properties:
        "disp_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Connector Name"
          description: "Name of the connector"
          examples:
            - {"summary": "Sample Connector Name", "value": "Postgres SQL"}
        "name_key":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Connector Key"
          description: "Key of the connector"
          examples:
            - {"summary": "Sample Connector Key", "value": "postgres"}
        "api_type":
          oneOf:
            - type: "null"
            - type: "string"
          title: "API Type"
          description: "Type of the API"
          examples:
            - {"summary": "Sample Connector Type", "value": "DB"}
        "is_premium":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Is Premium"
          description: "Whether the Connector is premium or not"
          examples:
            - {"value": true}
            - {"value": false}
        "is_added":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Is Added"
          description: "Whether the Connector is added to the workspace or not"
          examples:
            - {"value": true}
            - {"value": false}
        "spec":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/SpecSchema"}
        "version_key":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Version Key"
          description: "Key of the version"
          examples:
            - {"summary": "Sample Version Key", "value": "1.0"}
        "supported_version":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Supported Version"
          description: "Supported version of the connector"
          examples:
            - {"summary": "Sample Supported Version", "value": "1.0"}
        "vendor":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Vendor"
          description: "Vendor of the connector"
          examples:
            - {"summary": "Sample Vendor", "value": "Google"}
      type: "object"
      title: "ConnectorsSchema"
    "CreateCheckoutUrlRequestSchema":
      properties:
        "success_url":
          type: "string"
        "cancel_url":
          type: "string"
      type: "object"
      required:
        - "cancel_url"
        - "success_url"
      title: "CreateCheckoutUrlRequestSchema"
    "CreateCheckoutUrlResponseSchema":
      properties:
        "checkout_url":
          type: "string"
        "checkout_session_id":
          type: "string"
        "message":
          type: "string"
      type: "object"
      required:
        - "checkout_session_id"
        - "checkout_url"
        - "message"
      title: "CreateCheckoutUrlResponseSchema"
    "CreateConnectorProfileRequestSchema":
      properties:
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "connectors":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/ConnectorProfileConnectorSchema"}
              type: "array"
              default: []
          default: []
      type: "object"
      required:
        - "name"
      title: "CreateConnectorProfileRequestSchema"
    "CreateConnectorRequestSchema":
      properties:
        "name":
          type: "string"
          maxLength: 128
          minLength: 2
          description: "Connector name"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Connector description"
        "price_per_month":
          type: "number"
          description: "Monthly price in USD"
          default: 0
        "enabled":
          type: "boolean"
          description: "Whether connector is enabled"
          default: true
      type: "object"
      required:
        - "name"
      title: "CreateConnectorRequestSchema"
    "CreateCustomerPortalUrlRequestSchema":
      properties:
        "return_url":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      title: "CreateCustomerPortalUrlRequestSchema"
    "CreateCustomerPortalUrlResponseSchema":
      properties:
        "portal_url":
          type: "string"
      type: "object"
      required:
        - "portal_url"
      title: "CreateCustomerPortalUrlResponseSchema"
    "CreateDataview":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
              default: "View"
          maxLength: 50
          minLength: 1
          description: "Dataview Name"
          default: "View"
          examples:
            - {"value": "New Dataview"}
        "clone_config_from":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Clone config from"
          examples:
            - {"value": {"clone_config_from": {"dataview_id": 1}}}
        "dataview_config":
          oneOf:
            - type: "null"
            - type: "object"
          description: "Dataview Config"
        "extra_condition":
          oneOf:
            - type: "null"
            - type: "object"
          description: "Extra Condition"
      type: "object"
      title: "CreateDataview"
    "CreateDataviewResponse":
      properties:
        "dataview_id":
          type: "integer"
          description: "Dataview ID"
      type: "object"
      required:
        - "dataview_id"
      title: "CreateDataviewResponse"
    "CreateFeatureProfileRequestSchema":
      properties:
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "features":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/FeatureProfileFeatureSchema"}
              type: "array"
              default: []
          default: []
      type: "object"
      required:
        - "name"
      title: "CreateFeatureProfileRequestSchema"
    "CreateFeatureRequestSchema":
      properties:
        "name":
          type: "string"
          maxLength: 128
          minLength: 2
          description: "Feature name"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Feature description"
        "price_per_month":
          type: "number"
          description: "Monthly price in USD"
          default: 0
        "enabled":
          type: "boolean"
          description: "Whether feature is enabled"
          default: true
        "values":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Allowed values for the feature"
      type: "object"
      required:
        - "name"
      title: "CreateFeatureRequestSchema"
    "CreateFolder":
      properties:
        "name":
          type: "string"
          maxLength: 100
          minLength: 1
          title: "Name"
          description: "Folder Name"
          examples:
            - {"value": "Folder1"}
        "parent_folder_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Parent id"
          description: "Parent folder id"
          examples:
            - {"value": 8024}
      type: "object"
      required:
        - "name"
      title: "CreateFolder"
      description: "Create a new folder"
      examples:
        - {"name": "Folder1", "parent_folder_id": 8043}
    "CreatePlanRequestSchema":
      properties:
        "name":
          type: "string"
          maxLength: 128
          minLength: 2
          description: "Plan name"
        "monthly_price":
          type: "number"
          minimum: 0.01
          exclusiveMinimum: 0
          description: "Monthly price in USD"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Plan description"
        "annual_price":
          oneOf:
            - type: "null"
            - type: "number"
          minimum: 0.01
          description: "Annual price in USD"
        "annual_only":
          type: "boolean"
          description: "Whether plan is annual only"
          default: false
        "is_self_serve":
          type: "boolean"
          description: "Whether users can self-subscribe"
        "trial_days":
          oneOf:
            - type: "null"
            - type: "integer"
          maximum: 365
          description: "Trial period in days"
        "storage_amount":
          type: "integer"
          description: "Included storage in GB"
          default: 0
        "max_storage":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Maximum storage in GB"
        "max_users":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Maximum number of users"
        "no_of_users":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Number of included users"
        "seat_price":
          oneOf:
            - type: "null"
            - type: "number"
          description: "Price per additional user seat"
        "number_of_tiers":
          type: "integer"
          maximum: 10
          minimum: 1
          description: "Number of storage tiers"
          default: 1
        "storage_block_size":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Storage block size in GB"
        "tiers":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/subscription_schemas_StorageTierSchema"}
              type: "array"
          description: "Storage pricing tiers"
        "connector_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Connector profile ID"
        "feature_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Feature profile ID"
      type: "object"
      required:
        - "is_self_serve"
        - "monthly_price"
        - "name"
      title: "CreatePlanRequestSchema"
    "CreateSketchDataset":
      properties:
        "name":
          type: "string"
          description: "Dataset Name"
          examples:
            - {"summary": "Sample Dataset Name", "value": "test"}
        "dataschema":
          items: {"$ref": "#/components/schemas/Columns"}
          type: "array"
          description: "Dataschema of the table"
          examples:
            - {"summary": "Sample Data Schema", "value": {"key": "value"}}
        "display_properties":
          oneOf:
            - type: "null"
            - type: "object"
          description: "Display Properties for the dataset"
          examples:
            - {"summary": "Sample Display Properties", "value": {"key": "value"}}
        "data_content":
          oneOf:
            - type: "null"
            - items:
                items:
                  type: "string"
                type: "array"
              type: "array"
          description: "Data that would be inserted into the dataset"
          examples:
            - {"value": [["apple", "sweet"], ["orange", "citrus"], ["banana", "sweet"]]}
      type: "object"
      required:
        - "dataschema"
        - "name"
      title: "CreateSketchDataset"
    "CreateSubscriptionRequestSchema":
      properties:
        "plan_id":
          type: "integer"
          description: "Plan ID to subscribe to"
        "billing_interval":
          type: "string"
          description: "Billing interval"
          default: "monthly"
        "trial_days":
          type: "integer"
          maximum: 365
          minimum: 0
          description: "Trial period in days"
          default: 0
        "customer_email":
          type: "string"
          description: "Customer email address"
      type: "object"
      required:
        - "customer_email"
        - "plan_id"
      title: "CreateSubscriptionRequestSchema"
    "CreateSubscriptionResponseSchema":
      properties:
        "customer_id":
          type: "string"
        "message":
          type: "string"
      type: "object"
      required:
        - "customer_id"
        - "message"
      title: "CreateSubscriptionResponseSchema"
    "CreateThirdPartyDataset":
      properties:
        "connector_key":
          type: "string"
          description: "Third party connector Key"
          examples:
            - {"summary": "Sample connector key", "value": "postgres"}
        "connection_key":
          type: "string"
          description: "Identity Key"
          examples:
            - {"summary": "Sample Identity key", "value": "asfasgqegasdfasdgasdgasgda"}
        "query_properties": {"$ref": "#/components/schemas/DsConfigForCloudTypeConnector"}
        "schedule_properties":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/ScheduleProperties"}
          description: "Schedule Properties"
          examples:
            - {"summary": "Schedule Properties", "value": {"key": "value"}}
        "recurrence_info":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/RecurrenceInfo"}
          description: "Recurrence Properties"
          examples:
            - {"summary": "Recurrence Properties", "value": {"key": "value"}}
      type: "object"
      required:
        - "connection_key"
        - "connector_key"
        - "query_properties"
      title: "CreateThirdPartyDataset"
    "CreateWeburlDataset":
      properties:
        "url":
          type: "string"
          minLength: 16
          description: "URL of the dataset"
          examples:
            - {"summary": "Sample Dataset URL", "value": "https://www.google.com"}
      type: "object"
      required:
        - "url"
      title: "CreateWeburlDataset"
    "CurrentPlanSchema":
      properties:
        "id":
          type: "string"
          title: "ID"
          description: "ID of the SMS"
          examples:
            - {"value": 2}
        "plan_id":
          type: "string"
          title: "Plan ID"
          description: "Plan ID of the SMS"
          examples:
            - {"value": "internal"}
      type: "object"
      required:
        - "id"
        - "plan_id"
      title: "CurrentPlanSchema"
    "CustomPromptParams":
      properties:
        "column_name":
          type: "string"
          title: "Column Name"
          description: "The name of the column to apply extraction on"
        "sequence_number":
          type: "integer"
          minimum: 1
          title: "Sequence Number"
          description: "The sequence order of the extraction rule"
        "prompt":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Prompt"
          description: "The user-defined prompt for AI-based extraction"
        "edit_regex":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/EditRegexSpec"}
          title: "EditRegex"
          description: "Optional edited regex pattern details for extraction"
      type: "object"
      required:
        - "column_name"
        - "sequence_number"
      title: "CustomPromptParams"
    "CustomerSchema":
      properties:
        "first_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Customer's first name"
          description: "First Name of the customer"
          examples:
            - {"summary": "First Name", "value": "John"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Customer's last name"
          description: "Last Name of the customer"
          examples:
            - {"summary": "Last Name", "value": "Adom"}
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          title: "Email"
          description: "Email of the customer"
          examples:
            - {"summary": "Email", "value": "example@some.com"}
        "company_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Company"
          description: "Company of the customer"
          examples:
            - {"summary": "Company", "value": "Bad"}
        "plan_id":
          type: "string"
          title: "Chargebee Plan ID"
          description: "Plan ID of the customer"
          examples:
            - {"summary": "Sample Plan ID", "value": "professional"}
        "customer_id":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Customer ID"
          description: "ID of the customer"
          examples:
            - {"summary": "Customer ID", "value": "cus_123456789"}
      type: "object"
      required:
        - "plan_id"
      title: "CustomerSchema"
      description: "Subscription creation details"
      examples:
        - {"first_name": "TestUser", "last_name": "TestUser", "email": "testuser@test.com", "company_name": "Test Company", "plan_id": "plan_1"}
        - {"customer_id": "mock_test_subs_id", "plan_id": "plan_1"}
    "DataRefresh":
      properties:
        "refresh_source_type":
          type: "string"
          enum:
            - "webhook"
            - "file"
            - "cloud"
          description: "Source Type"
          examples:
            - {"value": "webhook"}
        "source_id":
          oneOf:
            - type: "integer"
            - type: "string"
          description: "Source ID"
          examples:
            - {"value": 77}
      type: "object"
      required:
        - "refresh_source_type"
        - "source_id"
      title: "DataRefresh"
    "DatasetCreationSpec":
      properties:
        "ds_creation_type":
          type: "string"
          enum:
            - "clone"
            - "cloud"
            - "sketch"
            - "weburl"
          description: "Dataset Creation Type"
          examples:
            - {"summary": "Sample Dataset Creation Type", "value": "sketch"}
        "folder_resource_id":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Folder Resource ID"
          examples:
            - {"summary": "Folder resource id", "value": "folder_1"}
        "dataset_spec":
          oneOf:
            - {"$ref": "#/components/schemas/CreateThirdPartyDataset"}
            - {"$ref": "#/components/schemas/DuplicateDataset"}
            - {"$ref": "#/components/schemas/CreateSketchDataset"}
            - {"$ref": "#/components/schemas/CreateWeburlDataset"}
          description: "Dataset Specification"
      type: "object"
      required:
        - "dataset_spec"
        - "ds_creation_type"
      title: "DatasetCreationSpec"
      description: "A task specification"
      examples:
        - {"ds_creation_type": "weburl", "folder_resource_id": null, "dataset_spec": {"url": "https://www.google.com"}}
        - {"ds_creation_type": "cloud", "folder_resource_id": null, "dataset_spec": {"connector_key": "google_sheets", "connection_key": "g198j5cdhggj3rlcsm0rhj3bifzkylsby27b9r0w", "query_properties": {"ds_name": "test", "data_start_date": "2024-12-19T04:30:00", "table_name": null, "query": null, "profile": null, "file_url": "https://docs.google.com/spreadsheets/d/101RCwZEOjPUEUi_llbRrFQbPHBmMeXqxnxPs4E43CVg/edit?gid=0#gid=0", "sheet_name": "Sheet1", "column_types_as_text": false, "file_path": null, "data_pull_file": null, "folder_path": null, "name_pattern": null}, "schedule_properties": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "combine", "unique_sequence_column": null}, "recurrence_info": {"interval": 1, "frequency": null, "start_at": "2024-12-19T04:30:00", "until": null, "by_month_day": null, "by_week_day": null}}}
    "DatasetDetails":
      properties:
        "dataset": {"$ref": "#/components/schemas/DsInfo"}
      type: "object"
      required:
        - "dataset"
      title: "DatasetDetails"
      examples:
        - {"dataset": {"resource_path": "rJQBMohUYXOkcTpvhiJK", "id": 4, "name": null, "created_at": "2018-07-12T06:58:26.250108", "created_by": "JpmKslcfodqSxwoqFFGb", "updated_at": null, "status": "error", "status_info": {"error": "BEbbShKpFsnNHWCgczzZ"}, "get_url": "LqirYprfuToWLhjoMqYd", "data_schema": null, "stats": {"row_count": null, "column_count": 1, "batch_count": 3, "size": null}, "sources": [{"type": "file", "details": {"id": "https://camacho-bolton.biz/"}}], "display_info": {"format": {"lXhqHaizHzihuuXFJvrC": {"date_format": null, "time_zone": "aOoshBzmNxOshYhQsRfQ"}}, "sort": null}, "data_url": null, "dependencies": null, "batch_ids": null, "configurations": null}}
    "DatasetPatchOperation":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "add"
            - "remove"
            - "command"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "name"
            - "columns"
            - "column_type"
            - "column_name"
            - "batch_columns"
            - "data_refresh"
            - "connection"
            - "schema_settings"
          description: "Path"
          examples:
            - {"value": "name"}
        "value":
          oneOf:
            - type: "string"
            - items:
                type: "string"
              type: "array"
            - {"$ref": "#/components/schemas/AddRemoveBatchColumns"}
            - items: {"$ref": "#/components/schemas/AddColumns"}
              type: "array"
            - items: {"$ref": "#/components/schemas/ChangeColumnType"}
              type: "array"
            - items: {"$ref": "#/components/schemas/RenameColumns"}
              type: "array"
            - {"$ref": "#/components/schemas/DataRefresh"}
            - {"$ref": "#/components/schemas/SchemaSettings"}
          description: "Value to replace/add/remove the attribute"
          examples:
            - {"value": "New name"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "DatasetPatchOperation"
    "DatasetPatchRequest":
      properties:
        "patch": {"$ref": "#/components/schemas/DatasetPatchOperation"}
      type: "object"
      required:
        - "patch"
      title: "DatasetPatchRequest"
      description: "Details of the dataset to be updated"
      examples:
        - {"patch": {"op": "replace", "path": "name", "value": "test"}}
        - {"patch": {"op": "replace", "path": "batch_columns", "value": {"add": ["batch_table_col_id"], "remove": []}}}
        - {"patch": {"op": "add", "path": "columns", "value": [{"c_name": "new_col4", "c_type": "text"}, {"c_name": "new_col5", "c_type": "date"}]}}
        - {"patch": {"op": "remove", "path": "columns", "value": ["column_4"]}}
        - {"patch": {"op": "replace", "path": "column_type", "value": [{"c_id": "column_1", "c_type": "text"}]}}
        - {"patch": {"op": "replace", "path": "column_name", "value": [{"c_id": "column_1", "c_name": "new_column_name"}]}}
        - {"patch": {"op": "command", "path": "data_refresh", "value": {"refresh_source_type": "webhook", "source_id": 77}}}
        - {"patch": {"op": "command", "path": "data_refresh", "value": {"refresh_source_type": "cloud", "source_id": "0k9f69g6klnvpbwmgn1mamlwvrpilv2bwwdv8ur6"}}}
        - {"patch": {"op": "replace", "path": "connection", "value": "0k9f69g6klnvpbwmgn1mamlwvrpilv2bwwdv8ur6"}}
        - {"patch": {"op": "replace", "path": "schema_settings", "value": {"data_addition_mode": "combine", "strict_data_type_check": false, "strict_column_length_check": false, "convert_columns_to_text": true, "convert_incompatible_data_to_null": false, "match_existing_target_schema": false, "delete_after_append": true, "schema_mapping": {"Transaction ID": ["Transaction ID"], "Time": ["Time"], "Cashier": ["Cashier"], "Department": ["Department"], "Quantity": ["Quantity"], "Total": ["Total"]}}}}
    "DatasetsList":
      properties:
        "datasets":
          items: {"$ref": "#/components/schemas/DsInfo"}
          type: "array"
          examples:
            - [{"resource_path": null, "id": null, "name": "gnZRxqhvDqcoIJyOUxtD", "created_at": "2003-12-30T14:29:00.118520", "created_by": null, "updated_at": "2025-05-25T14:22:41.632416", "status": null, "status_info": null, "get_url": "fOZoEsTxpTCUrdvOcpLE", "data_schema": [{"c_id": null, "c_name": null, "c_type": "date"}], "stats": {"row_count": 3, "column_count": 3, "batch_count": 1, "size": null}, "sources": [{"type": "abstract", "details": {"id": null}}], "display_info": {"format": {"ALkCMCzSdkQxcyVjViXG": null}, "sort": null}, "data_url": "QQSrUuyjwuHdPRdOMvah", "dependencies": {"wall": "vEfyJldvOlrClErAtXaz", "but": "59829170400626870432101978702053740704340949715056599374844063837842.97", "property": "dxrBsaMpKgNnvhETvotS", "point": 1419, "network": "1986-04-10T23:37:42.406269", "believe": "-4636843060878531372916361776415892010225623657335671165315985247.6598530094905978144663962823871", "possible": "barnettanthony@example.net", "art": "2019-08-27T03:25:41.625779"}, "batch_ids": null, "configurations": {"place": "-81092753152047472319059224259466768610621613546558626051936482316474852123286660586621.204583821891590643158951028919168", "change": "https://thomas.net/blog/tags/searchterms.htm", "collection": "JZWePYSqUqSqOxwzbGFK", "property": "-248118455541816741587062985812627263584394484553795877151510909823941902477025334910187563068793.414765097804303853408428157878249425333742062762955409256213892066298", "former": 8560, "charge": "joshuahodge@example.org", "protect": "gANFfVFVTvSsSaSOiQoM", "into": "mjnTlXtgoIyZXTMQXIqx", "its": 49386220893.731, "despite": "https://www.mclaughlin.info/category/category/exploreprivacy.htm", "raise": "cAvrfiDSNYYFedvdSqcO", "quality": "55197627962623308791397595175076290821694257008158648324.71383349", "message": 3867}}]
        "offset":
          type: "integer"
          default: 0
          examples:
            - 3582
        "limit":
          type: "integer"
          default: 50
          examples:
            - 5366
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/workspaces/4/projects/1020/datasets?limit=50&offset=50"}
      type: "object"
      required:
        - "datasets"
        - "next"
      title: "DatasetsList"
      examples:
        - {"datasets": [{"resource_path": null, "id": null, "name": "vaFZkTcDzrrweOLereTH", "created_at": null, "created_by": null, "updated_at": "2011-03-15T09:42:53.371664", "status": "deleting", "status_info": null, "get_url": "ZDVqPWrckPnJmNlfZLtl", "data_schema": [{"c_id": "yQqjKTsgmPhEVJhClXcN", "c_name": null, "c_type": null}], "stats": {"row_count": null, "column_count": 4, "batch_count": 2, "size": "DbjsVAAJIwLJkRoyIjxF"}, "sources": [{"type": "file", "details": {"connector_key": null, "identity_key": null, "id": null, "batch_mode": null, "schedules": [{"id": null, "rrule": {"interval": 9105, "frequency": null, "start_at": null, "until": "2004-12-20T11:16:03.730165", "by_month_day": null, "by_week_day": ["ivILQQKhbuhjuCTMdTuD"]}, "job": "eITBsPwRuDQRdaUHxRMU", "status": null, "job_status": "warning", "refresh_schedule": "manual", "next_data_pull": "HYNjqNJjdhTFoYmysQCA", "last_datapull": null, "warning_reason": "jfrynjvgkwOycBHPiusS"}], "query_config": null, "batch_ids": null}}], "display_info": null, "data_url": "VDhLqHJBpgIHJMltEwok", "dependencies": {"late": 67439908131.3609, "sometimes": 56705713.133834, "three": "-193476205800388631177475576018237890425781612243986542252096045879400636916937506239.4669180132475901810960788", "woman": "kkRuKlQSEQrszsHcBDDF", "this": "UYSrPqBileRMYRwIhUIT", "price": "rhCnktvpVnQYKWPHLrLB", "option": "timothy77@example.org"}, "batch_ids": [4965], "configurations": {"fast": "3345216423378988386112451532385908985705869766108313743387539254080726696018500389546862.715", "relationship": "https://delgado.com/main/main/mainindex.htm", "sing": "WmKSnbaLaMacwSKeRbZy", "represent": "QuwsiXxkzlSsUvNlxLon", "stay": "-34691529580252409273283601927104320457355288129519939442380184818613200.8060003867662616092696713387831812556465222555420", "argue": -44.9402508231836, "go": -162061103519.655, "ten": "SOlwuVWJepHRQfeKKXuT", "claim": "2002-03-01T08:29:59.492148"}}], "offset": 6800, "limit": 4779, "next": "lhYfpZYOUKSkUEOTijWY"}
    "DatasetsPatchOperation":
      properties:
        "op":
          type: "string"
          const: "replace"
          maxLength: 50
          minLength: 1
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          const: "name"
          maxLength: 50
          minLength: 1
          description: "Path"
          examples:
            - {"value": "name"}
        "value":
          additionalProperties:
            type: "string"
          type: "object"
          description: "Rename datasets"
          examples:
            - {"value": {"34": "new_name", "35": "new_name"}}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "DatasetsPatchOperation"
    "DatasetsPatchRequest":
      properties:
        "patch": {"$ref": "#/components/schemas/DatasetsPatchOperation"}
      type: "object"
      required:
        - "patch"
      title: "DatasetsPatchRequest"
      description: "Details of the dataset to be updated"
      examples:
        - {"patch": {"op": "replace", "path": "name", "value": {"23": "test", "24": "test2"}}}
    "DataviewActiveUsers":
      properties:
        "active_users":
          items: {"$ref": "#/components/schemas/UserSchema"}
          type: "array"
          description: "List of Active Users"
      type: "object"
      required:
        - "active_users"
      title: "DataviewActiveUsers"
    "DataviewBulkDelete":
      properties:
        "deleted":
          items: {"$ref": "#/components/schemas/JobResponse"}
          type: "array"
          description: "List of Dataview IDs that were successfully deleted"
          examples:
            - {"value": [{"id": 59454, "status": "success", "response": {}, "last_updated_at": "2024-04-03T10:36:36.285279"}]}
        "failed":
          items: {"$ref": "#/components/schemas/ErrorObjectSchema"}
          type: "array"
          description: "List of Dataview ID error objects that failed to delete"
          examples:
            - {"value": [{"error_code": "4DTVW002", "name": "DATAVIEW_DOESNT_BELONG_TO_THIS_DATASET", "message": "Dataview 6148 doesn't belong to this dataset"}]}
      type: "object"
      required:
        - "deleted"
        - "failed"
      title: "DataviewBulkDelete"
    "DataviewData":
      properties:
        "sequence":
          type: "integer"
          description: "Sequence Number is the step in pipeline at which we want to fetch data"
          default: 0
          examples:
            - {"summary": "Sample sequence number", "value": 1}
        "offset":
          type: "integer"
          minimum: 1
          description: "Offset is the one-indexed starting position of rows to fetch data"
          default: 1
          examples:
            - {"summary": "Sample offset", "value": 1}
        "limit":
          type: "integer"
          minimum: 1
          description: "Limit is the number of rows we want to fetch"
          default: 400
          examples:
            - {"summary": "Sample limit", "value": 1}
        "columns":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Columns are a list of comma separated column names (within quotes) we want to fetch, enclosed in square brackets"
          examples:
            - {"summary": "Sample columns", "value": ["column_1", "column_2"]}
        "condition":
          oneOf:
            - type: "null"
            - type: "object"
          description: "Condition is a JSON representation of the condition we want to use while fetching the rows"
          examples:
            - {"summary": "Sample condition", "value": {"column_1": {"operator": "eq", "value": "value_1"}}}
        "sort":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Sort is a list tuples in string format. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"
          examples:
            - {"summary": "Sample sort in string format", "value": ["(column_1:asc),(column_2:desc)"]}
      type: "object"
      title: "DataviewData"
    "DataviewInfo":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Dataview ID"
          examples:
            - {"value": 4}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 300
          description: "Dataview Name"
        "ds_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Dataset ID"
          examples:
            - {"value": 4}
        "display_properties": {"$ref": "#/components/schemas/DisplayPropertiesResponse"}
        "user_display_properties":
          oneOf:
            - type: "null"
            - additionalProperties: {}
              type: "object"
          description: "User Display Properties"
        "data_url":
          oneOf:
            - type: "null"
            - type: "string"
          description: "URL for Dataview Data"
        "metadata":
          oneOf:
            - type: "null"
            - items:
                type: "object"
              type: "array"
          description: "Metadata Dictionary"
        "sys_cols":
          oneOf:
            - type: "null"
            - items:
                additionalProperties: {}
                type: "object"
              type: "array"
          description: "System Columns Metadata Dictionary"
        "status":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Status"
        "pipeline_status":
          type:
            - "string"
            - "null"
          enum:
            - "running"
            - "submitted"
            - "ready"
            - "error"
            - null
          description: "Pipeline Status"
        "is_pipeline_running":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Is Pipeline Running"
        "draft_mode":
          type:
            - "string"
            - "null"
          enum:
            - "clean"
            - "dirty"
            - "off"
            - null
          description: "Draft Mode Status"
        "row_count":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Number of rows in Dataview"
        "column_count":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Number of columns in Dataview"
        "pipeline_autorun_enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Is Pipeline Autorun Enabled"
        "is_dataview_data_in_sync":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Is Dataview Data in Sync"
        "taskwise_info":
          oneOf:
            - type: "null"
            - additionalProperties:
                additionalProperties: {}
                type: "object"
              type: "object"
          description: "Taskwise Information Dictionary"
        "original_data_updated":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Original Data Updated"
        "dependencies_info":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "object"
              type: "object"
          description: "Dependencies related to other dataviews"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
            - type: "string"
              format: "date-time"
          description: "Date and time when the Dataview was created in ISO 8601 format"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
            - type: "string"
              format: "date-time"
          description: "Date and time when the Dataview was updated in ISO 8601 format"
        "data_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
            - type: "string"
              format: "date-time"
          description: "Date and time when the Dataview data was last updated in ISO 8601 format"
      type: "object"
      required:
        - "display_properties"
      title: "DataviewInfo"
    "DataviewInfoList":
      properties:
        "dataviews":
          items: {"$ref": "#/components/schemas/DataviewInfo"}
          type: "array"
          description: "List of Dataviews"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/workspaces/4/projects/1020/datasets/1337/dataviews?limit=50&offset=50"}
      type: "object"
      required:
        - "dataviews"
        - "next"
      title: "DataviewInfoList"
      description: "List of Dataview Info"
    "DataviewPatch":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/DataviewPatchOp"}
          type: "array"
          maxItems: 1
          minItems: 1
          description: "List of patch operations"
          examples:
            - {"value": [{"value": {"op": "replace", "path": "name", "value": "Renamed Dataview"}}]}
            - {"value": [{"value": {"op": "command", "path": "", "value": "reset"}}]}
      type: "object"
      required:
        - "patch"
      title: "DataviewPatch"
      description: "Update dataview properties like rename a dataview, or reset a dataview"
      examples:
        - {"patch": [{"op": "replace", "path": "name", "value": "Renamed Dataview"}]}
        - {"patch": [{"op": "command", "path": "", "value": "reset"}]}
    "DataviewPatchOp":
      properties:
        "op":
          type: "string"
          description: "Operation"
          examples:
            - {"value": "replace"}
            - {"value": "command"}
        "path":
          type: "string"
          description: "Path"
          examples:
            - {"value": "name"}
            - {"value": ""}
        "value":
          description: "Patch value"
          examples:
            - {"value": "New Dataview name"}
            - {"value": "reset"}
      type: "object"
      required:
        - "op"
        - "path"
      title: "DataviewPatchOp"
    "DataviewRenameResponse":
      properties:
        "name":
          type: "string"
          maxLength: 300
          minLength: 1
          description: "New Dataview Name"
          examples:
            - {"value": "New Dataview name"}
      type: "object"
      required:
        - "name"
      title: "DataviewRenameResponse"
    "DateColumnFormat":
      properties:
        "date_format":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "vqYnbycLhVJGFHhtmZzD"
          description: "Date Format"
          examples:
            - "%Y-%m-%d"
        "time_zone":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "lbFfcswyWFVwaiVJEahP"
          description: "Time Zone"
          examples:
            - "UTC"
      type: "object"
      title: "DateColumnFormat"
      examples:
        - {"date_format": null, "time_zone": null}
    "DeAuthorizationPostResponse":
      properties:
        "message":
          type: "string"
          description: "Message"
          examples:
            - {"value": "Requested data has been deleted successfully."}
      type: "object"
      required:
        - "message"
      title: "DeAuthorizationPostResponse"
    "DisplayInfo":
      properties:
        "format":
          oneOf:
            - type: "null"
            - additionalProperties:
                oneOf:
                  - type: "null"
                  - {"$ref": "#/components/schemas/NumColumnFormat"}
                  - {"$ref": "#/components/schemas/DateColumnFormat"}
                  - {"$ref": "#/components/schemas/PostgresDateColumnFormat"}
                examples:
                  - {"numtype": null, "currency_symbol": "€", "is_percentage": true, "decimal_spec": 199, "scientific": true, "numeric_precision": null}
              type: "object"
              examples:
                - {}
          description: "Column Formats"
          examples:
            - {"column_1": {"numtype": "int", "currency_symbol": "$", "is_percentage": false, "decimal_spec": "0.00", "scientific": false, "numeric_precision": 2}}
        "sort":
          oneOf:
            - type: "null"
            - items:
                items:
                  oneOf:
                    - type: "string"
                      examples:
                        - "ErNnnMpnDLMqaVLBiBVZ"
                    - type: "string"
                      examples:
                        - "LFoLVKBkRAdDqzxnfblg"
                type: "array"
                examples:
                  - ["EdBJQctaXylszBXwpocD", "qgpTnlLoAiGihmVByddZ"]
              type: "array"
              examples:
                - [["EVEHEVtVDOOuNqzVjDcZ", "HSjKwmnNSpGChuQrpnMY"]]
          description: "Column Sort"
          examples:
            - {"column_1": "asc", "column_2": "desc"}
      type: "object"
      title: "DisplayInfo"
      examples:
        - {"format": {"YYgXChDplyzrAllRyFBC": {"date_format": null, "time_zone": "MmvzMXlkluSaIGRkIKQv"}}, "sort": null}
    "DisplayPropertiesResponse":
      properties:
        "SORT":
          type: "array"
          description: "Sort is a list of tuples. Tuples are of the form (column_name, sort_order) where sort_order can be 'asc' or 'desc', limited to three"
          examples:
            - {"summary": "Sample sort in list format", "value": [["column_1", "asc"]]}
        "FORMAT_INFO":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "object"
              type: "object"
          description: "Format Info"
          examples:
            - {"value": [{"column_1": {"date_format": "%A, %B %d, %Y %I:%M:%S %p"}}]}
        "COLUMN_WIDTHS":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "integer"
              type: "object"
          description: "Column Widths for each column"
          examples:
            - {"value": [{"column_1": 100}]}
        "HIDDEN_COLUMNS":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "List of Hidden Columns"
          examples:
            - {"value": [["column_1", "column_3"]]}
        "COLUMN_NAMES":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "string"
              type: "object"
          description: "Column Names to be displayed"
          examples:
            - {"value": [{"column_1": "Renamed Column 1"}]}
        "COLUMN_ORDER":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "string"
              type: "object"
          description: "Column Order"
          examples:
            - {"value": [{"0": "column_1", "1": "column_2", "2": "column_4", "3": "column_3"}]}
        "REVERT_COLUMN_NAMES":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Remove rename property from given column names"
          examples:
            - {"value": ["column_1", "column_2"]}
        "EXPLORE_PANEL":
          oneOf:
            - type: "null"
            - additionalProperties: {}
              type: "object"
          description: "Explore Panel"
          examples:
            - {"value": {"show": true}}
            - {"value": {"open": true, "items": [{"isCustomCard": false, "column": "column_1", "renderType": "chart", "selectedAggregation": {"aggregation": "COUNT", "format": {"scientific": true}}}]}}
      type: "object"
      required:
        - "SORT"
      title: "DisplayPropertiesResponse"
      description: "Display Properties"
    "DsConfigDetails":
      properties:
        "ds_config":
          oneOf:
            - {"$ref": "#/components/schemas/CloudDsConfigSchema"}
            - {"$ref": "#/components/schemas/CloudFileDsConfig"}
      type: "object"
      required:
        - "ds_config"
      title: "DsConfigDetails"
    "DsConfigForCloudTypeConnector":
      properties:
        "ds_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataset's Name"
          examples:
            - {"summary": "Sample dataset name", "value": "test"}
        "data_start_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Data Start Date"
          examples:
            - {"summary": "Sample data start date", "value": "2021-01-01"}
        "table_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Table Name"
          examples:
            - {"summary": "Sample table name", "value": "test"}
        "query":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Query for the dataset"
          examples:
            - {"summary": "Sample query", "value": "select * from table"}
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Schema/Profile for the selected identity"
          examples:
            - {"summary": "Sample profile", "value": "dbo"}
        "file_url":
          oneOf:
            - type: "null"
            - type: "string"
          description: "File URL"
          examples:
            - {"summary": "Sample file URL", "value": "https://drive.google.com/file/d/19ByEObwfwlHdzM3utK8u471jtPpYpaP1V/view?usp=drive_link"}
        "sheet_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Google Sheet Name"
          examples:
            - {"summary": "Sample google sheet name", "value": "Sheet1"}
        "column_types_as_text":
          type: "boolean"
          description: "Column Types as Text"
          default: false
          examples:
            - {"summary": "Column types as text", "value": true}
        "file_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "File Path"
          examples:
            - {"summary": "Sample file path", "value": "./New/sftp_custom_pull/patterns/10.Nov.2022-RFIG.csv"}
        "data_pull_file":
          type:
            - "string"
            - "null"
          enum:
            - "Pull same file"
            - "Pull next file based on name pattern"
            - null
          description: "Data Pull File"
          examples:
            - {"summary": "Sample data pull file", "value": "Pull same file"}
        "folder_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Folder Path"
          examples:
            - {"summary": "Sample folder path", "value": "./New/sftp_custom_pull/patterns"}
        "name_pattern":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Name Pattern"
          examples:
            - {"summary": "Sample name pattern", "value": "<dd>.<mon>.<yyyy>-RFIG.csv"}
      type: "object"
      title: "DsConfigForCloudTypeConnector"
      description: "Query Properties"
      examples:
        - {"summary": "Query Properties", "value": {"ds_name": "test", "table_name": "test", "query": "select * from table", "profile": "dbo", "data_start_date": "2021-01-01"}}
    "DsConfigPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "query"
            - "profile"
            - "on_refresh_action"
            - "unique_sequence_column"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "name"}
        "value": {"$ref": "#/components/schemas/UpdateQuerySpec"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "DsConfigPatchData"
    "DsConfigPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/DsConfigPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "DsConfigPatchRequest"
      description: "Update query for the dataset"
      examples:
        - {"patch": [{"op": "replace", "path": "query", "value": {"query": "SELECT * FROM \"ValidateCredentials\"", "ds_id": 67, "validate": true}}]}
    "DsInfo":
      properties:
        "resource_path":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "rXVLUYUUKqSzwqFflzhZ"
          description: "Resource Path"
          examples:
            - "/workspace:Mammoth Analytics:3/project:test_project:10/label:Datasets:1/datasource:test:14"
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 440
          description: "Dataset ID"
          examples:
            - 1
        "name":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "UISBrXikhHDTYgKCpyDA"
          description: "Name of the dataset"
          examples:
            - "ds1"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2010-12-15T22:00:31.564917"
          description: "Dataset creation time"
          examples:
            - "2024-02-04T14:44:41.132945Z"
        "created_by":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "nEqfnucEGdhMsITrjZrc"
          description: "Dataset created by"
          examples:
            - "John Doe"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2000-03-03T02:20:41.327733"
          description: "Dataset last update time"
          examples:
            - "2024-02-04T15:46:41.532945Z"
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "ready"
            - "processing"
            - "deleting"
            - "deleted"
            - "error"
            - "need_action"
            - null
          description: "Dataset status"
          examples:
            - "ready"
        "status_info":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "string"
                examples:
                  - "TnpEmqGekFbryxwFIKUj"
              type: "object"
              examples:
                - {"error": "YLShmjvQJyjIeseZgDzT"}
          description: "Additional Status of the dataset"
          examples:
            - {"processing": "Processing metadata"}
        "get_url":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "OGciPersuxGbcDPDrvza"
          description: "Dataset URL"
          examples:
            - "/workspaces/1/projects/4/datasets/1"
        "data_schema":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/api_ds_schema_ColumnSchema"}
              type: "array"
              examples:
                - [{"c_id": null, "c_name": "HZgSeFMyUiCynjQNEuhG", "c_type": "text"}]
          description: "Data Schema"
          examples:
            - [{"c_id": "col1", "c_name": "name", "c_type": "string"}]
        "stats":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/Stats"}
          description: "Dataset Stats"
          examples:
            - {"row_count": 100, "column_count": 10, "batch_count": 1, "size": 1000}
        "sources":
          oneOf:
            - type: "null"
            - items:
                oneOf:
                  - {"$ref": "#/components/schemas/TpSourceInfo"}
                  - {"$ref": "#/components/schemas/WebhookInfo"}
                  - {"$ref": "#/components/schemas/InternalDsInfo"}
                  - {"$ref": "#/components/schemas/SketchSource"}
                  - {"$ref": "#/components/schemas/WebUrlInfo"}
                  - {"$ref": "#/components/schemas/FileInfo"}
                  - {"$ref": "#/components/schemas/AbstractSource"}
                examples:
                  - {"type": "append", "details": {"id": null, "key": null, "url": "oxQQKzyPVrsMhVsJfbYn", "origins": "wXuhpzpHZogVmVdplCKj"}}
              type: "array"
              examples:
                - [{"type": "append", "details": {"id": 5349, "trigger_id": null}}]
          description: "Data Sources"
          examples:
            - {"type": "file", "details": {"file_name": "abc.csv", "size": "16 Bytes", "web_url": "https://s3.amazonaws.com/test/xyz.csv"}}
        "display_info":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/DisplayInfo"}
          description: "Display Info"
          examples:
            - {"format": {"XOUoFRyuIwkwgZSxoSji": {"date_format": null, "time_zone": null}}, "sort": [["MNyTDCghjobcAeFANsab", "HMWJkVWjVZSVKCPyOyjU"]]}
        "data_url":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "fhCwqJbNyAtfbovWECaK"
          description: "Data URL"
          examples:
            - "https://s3.amazonaws.com/mammoth/efg.csv"
        "dependencies":
          oneOf:
            - type: "null"
            - type: "object"
              examples:
                - {"give": "817720688162831853739934497731729374974.402492894921604048848780495194882274472113865227540388514058377581316590351193185", "new": "RsFbIAdqBNERqrGhabsL", "within": "ZNpieBDWuiiiTlHMzcyA", "ago": "bOZGGusWbqYWyWimfwLl", "science": "http://www.martinez.net/app/categoryhome.php", "century": "AqGLWocSLnMAgupGGgNR", "trip": -44.2696053873548, "join": "LblxriZDRhgCbZsvPkmg", "couple": -11.1085658961487}
          description: "Dataset dependencies"
          examples:
            - 1
        "batch_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
                examples:
                  - 9587
              type: "array"
              examples:
                - [7195]
          description: "Batch IDs"
          examples:
            - [1, 2, 3]
        "configurations":
          oneOf:
            - type: "null"
            - type: "object"
              examples:
                - {"than": "PIsqdAEhIZEArvKRvtTf", "the": 3724, "office": "PBCVyJxzsGjPnqFLmBGB", "course": "vXlkTgMPOPwJGaAwIegL", "without": "vVOUmOKsPNnFABlxdRil", "plant": "XEqueaNHqiwXhlxlPwoG", "hotel": "izkCaouhJbZQmCrxjmLg"}
          description: "Configurations"
          examples:
            - {"key": "value"}
      type: "object"
      title: "DsInfo"
      examples:
        - {"resource_path": "yPMQiNDkvytBUZBvrZJA", "id": 1, "name": null, "created_at": "2015-09-27T14:11:08.817921", "created_by": null, "updated_at": "1998-02-12T11:07:26.164462", "status": null, "status_info": {"error": "pfMLZuZJNvVLrgBJukBg"}, "get_url": "vfPBPvBIJuXmivoNBEHq", "data_schema": [{"c_id": "LyqRwSEMpRBWxUbAVLzh", "c_name": "NFKmXgvVIAnxyFFceTKw", "c_type": null}], "stats": {"row_count": null, "column_count": null, "batch_count": 0, "size": "cEFznQAFKbTzyFHaOtVH"}, "sources": [{"type": "sketch", "details": {"interview": "TRhPhkcAzVXLhrzzvESu", "reflect": "aOoLCdMhGlsgqVeXsVNl", "protect": "dYqNQFFrAKRGwJxazICv", "office": "tVRTKnFMypScxMkvQGcs", "happy": -4906.18429470991, "year": 8029.774440094, "opportunity": "2012-07-26T05:33:37.414587", "heart": "YYtHCCzaosQfWfwlkzUm", "campaign": "michellesanchez@example.net", "science": 2986, "affect": "2012-07-06T18:10:48.954619"}}], "display_info": {"format": null, "sort": null}, "data_url": null, "dependencies": {"wall": "http://marshall.com/search/tag/searchhomepage.asp", "so": "SzTGsLVlPythCIYDCCvf", "camera": "michael13@example.org", "of": "ashleytracy@example.com", "ok": "DUbhpuQZtMaQCnDnqYgY", "thought": 463469754.20912, "establish": "thkJuWZqYdODKdviHIXP", "pretty": "YBdDWiBsBqRmWmYWBnBV", "key": "kerrjoann@example.net", "church": "IFaXtqwbQQtMAIkDMESC", "people": "RMpiBRjBPeRWHxRzJLGn", "employee": "ovrdIcLsRmgTAOTbyoOA", "smile": "-0.804031438618469735255983075695116"}, "batch_ids": null, "configurations": {"image": "1999-09-27T23:55:17.990125", "guess": "1984-06-01T09:52:43.531087", "win": "LNPvNTyMUPOgLQtqdGhw", "relationship": "owEneDkjoqZzWEBOaTAP", "blue": -880786444028.531, "color": "samuel54@example.net", "represent": "hScVaerdBrCDzCvtMsAh", "ever": "QmksQUovUmjpWbHAnhcG"}}
    "DuplicateDataset":
      properties:
        "source_ds_id":
          type: "integer"
          description: "Source Dataset ID"
          examples:
            - {"summary": "Dataset id of the source dataset", "value": 45}
        "clone_dataview_ids":
          items:
            type: "integer"
          type: "array"
          description: "List of dataview ids to clone"
          default: []
          examples:
            - {"summary": "To clone dataviews particular dataview ids", "value": [1]}
        "exclude_data":
          type: "boolean"
          description: "Whether to exclude data or not"
          default: false
          examples:
            - {"summary": "This leads to zero data in duplicated ds, useful if only pipeline copy is needed", "value": true}
      type: "object"
      required:
        - "source_ds_id"
      title: "DuplicateDataset"
    "DuplicateOrCombineDsBatchSource":
      properties:
        "resource_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Resource Path"
          examples:
            - "/workspace:Mammoth Analytics:3/project:test_project:10/label:Datasets:1/datasource:test:14"
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
        "dataset_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Dataset ID"
          examples:
            - 1
        "dataset_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataset Name"
          examples:
            - "ds1"
      type: "object"
      title: "DuplicateOrCombineDsBatchSource"
    "EditRegexSpec":
      properties:
        "expression":
          type: "string"
          title: "Expression"
          description: "Regex pattern for extraction"
        "delimiter":
          type: "string"
          title: "Delimiter"
          description: "Delimiter used in regex pattern"
        "global_flag":
          type: "boolean"
          title: "Global"
          description: "Whether the regex should match globally"
        "capturing_groups":
          items:
            type: "integer"
          type: "array"
          title: "Capturing Groups"
          description: "List of capturing group indices"
      type: "object"
      required:
        - "capturing_groups"
        - "delimiter"
        - "expression"
        - "global_flag"
      title: "EditRegexSpec"
    "ErrorObjectSchema":
      properties:
        "error_code":
          type: "string"
        "name":
          type: "string"
        "message":
          type: "string"
        "details":
          oneOf:
            - type: "null"
            - type: "object"
        "link":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "error_code"
        - "message"
        - "name"
      title: "ErrorObjectSchema"
    "ExportPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/ItemExportPatch"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "ExportPatch"
      description: "List of patch operations"
      examples:
        - {"patches": [{"op": "command", "path": "suspend", "value": null}]}
    "ExternalKey":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "ID of the external key as saved in the DB"
          examples:
            - {"value": 10}
        "key_type":
          type:
            - "string"
            - "null"
          enum:
            - "open_ai"
            - null
          maxLength: 100
          minLength: 1
          description: "Type of the external key e.g. open_ai"
          examples:
            - {"value": "open_ai"}
        "key_name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 100
          minLength: 1
          description: "A name to be associated with the key"
          examples:
            - {"value": "Mammmoth Open AI"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 200
          minLength: 1
          description: "Describe the purpose of the key and any added information related to it"
        "secure_key":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 200
          minLength: 3
          description: "The key value which will be used in the intended service"
          examples:
            - {"value": "abcDefGhiJklMnoPqrStuVwxYz1234567890"}
        "is_in_use":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Is the key currently in use?"
        "created_by_user_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of the user that created this key"
        "last_used_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "When was the key last used at?"
        "last_used_by_used_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of the user who the key in the recent most usage?"
      type: "object"
      title: "ExternalKey"
    "ExternalKeyResp":
      properties:
        "external_key": {"$ref": "#/components/schemas/ExternalKey"}
        "validation_info":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/ExternalKeyValidationInfo"}
      type: "object"
      required:
        - "external_key"
      title: "ExternalKeyResp"
    "ExternalKeyValidationInfo":
      properties:
        "is_key_valid":
          type: "boolean"
        "error_code":
          oneOf:
            - type: "null"
            - type: "string"
        "error_message":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "is_key_valid"
      title: "ExternalKeyValidationInfo"
    "ExternalKeysPaginated":
      properties:
        "limit":
          type: "integer"
          title: "Page size"
          description: "Setting limit would limit the items received in the page"
          default: 10
          examples:
            - {"summary": "Limit page size to 10", "value": 10}
        "offset":
          type: "integer"
          title: "Page offset"
          description: "First position to return from the results"
          default: 0
          examples:
            - {"summary": "Sets the first position to return from the results to 0", "value": 0}
        "next":
          type: "string"
          title: "Next url"
          description: "Url of the next page"
          examples:
            - {"summary": "Next url will retrieve results with limit 10 and offset 5", "value": "<url>?limit=10&offset=5"}
        "external_keys":
          items: {"$ref": "#/components/schemas/ExternalKey"}
          type: "array"
      type: "object"
      required:
        - "external_keys"
        - "next"
      title: "ExternalKeysPaginated"
    "ExtractSheetsPatch":
      properties:
        "sheets":
          items:
            type: "string"
          type: "array"
          title: "Sheets to extract"
          description: "Sheets to extract"
          examples:
            - {"value": ["Sheet1", "Sheet2"]}
        "delete_file_after_extract":
          type: "boolean"
          title: "Delete file"
          description: "Whether to delete main file after sheet extraction or not"
          default: true
          examples:
            - {"value": true}
        "combine_after_extract":
          type: "boolean"
          title: "Combine Sheets"
          description: "Whether to combine sheets after sheet extraction or not"
          default: false
          examples:
            - {"value": false}
      type: "object"
      required:
        - "sheets"
      title: "ExtractSheetsPatch"
    "FeatureListResponseSchema":
      properties:
        "features":
          items: {"$ref": "#/components/schemas/subscriptions_schema_FeatureSchema"}
          type: "array"
      type: "object"
      required:
        - "features"
      title: "FeatureListResponseSchema"
    "FeatureProfileFeatureSchema":
      properties:
        "feature_id":
          type: "integer"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
              default: 0
          default: 0
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
              default: true
          default: true
        "value":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "feature_id"
      title: "FeatureProfileFeatureSchema"
    "FeatureProfileListResponseSchema":
      properties:
        "feature_profiles":
          items: {"$ref": "#/components/schemas/FeatureProfileSchema"}
          type: "array"
      type: "object"
      required:
        - "feature_profiles"
      title: "FeatureProfileListResponseSchema"
    "FeatureProfileResponseSchema":
      properties:
        "feature_profile": {"$ref": "#/components/schemas/FeatureProfileSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "feature_profile"
        - "message"
      title: "FeatureProfileResponseSchema"
    "FeatureProfileSchema":
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
        "features":
          items: {"$ref": "#/components/schemas/subscriptions_schema_FeatureSchema"}
          type: "array"
        "features_count":
          type: "integer"
        "used_in_plans":
          items:
            type: "string"
          type: "array"
        "plan_count":
          type: "integer"
      type: "object"
      required:
        - "features"
        - "features_count"
        - "id"
        - "name"
        - "plan_count"
        - "used_in_plans"
      title: "FeatureProfileSchema"
    "FeatureResponseSchema":
      properties:
        "feature": {"$ref": "#/components/schemas/subscriptions_schema_FeatureSchema"}
        "message":
          type: "string"
      type: "object"
      required:
        - "feature"
        - "message"
      title: "FeatureResponseSchema"
    "FileDetails":
      properties:
        "file": {"$ref": "#/components/schemas/FilesStandardSchema"}
      type: "object"
      required:
        - "file"
      title: "FileDetails"
    "FileDsBatchSource":
      properties:
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
        "file_name":
          oneOf:
            - type: "null"
            - type: "string"
              format: "uri"
          description: "File Name"
          examples:
            - "abc.csv"
        "url":
          oneOf:
            - type: "null"
            - type: "string"
              format: "url"
          description: "URL"
          examples:
            - "https://aws.com/test.csv"
      type: "object"
      title: "FileDsBatchSource"
    "FileInfo":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details": {"$ref": "#/components/schemas/FileSource"}
      type: "object"
      required:
        - "details"
      title: "FileInfo"
      examples:
        - {"type": "sketch", "details": {"id": 8314, "file_name": "/home/ubuntu/bom/live/venv/lib/python3.10/site-packages/polyfactory/value_generators/constrained_path.py", "size": "VGEMKsDrpRtpgUwLgcgh"}}
    "FilePatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "extract_sheets"
            - "password"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "password"}
        "value":
          oneOf:
            - type: "string"
            - {"$ref": "#/components/schemas/ExtractSheetsPatch"}
          title: "Value"
          description: "Value to update files configuration"
          examples:
            - {"value": "test"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "FilePatchData"
    "FilePatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/FilePatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "FilePatchRequest"
      description: "Update password/select sheets to extract of file"
      examples:
        - {"patch": [{"op": "replace", "path": "password", "value": "test"}]}
        - {"patch": [{"op": "replace", "path": "extract_sheets", "value": {"sheets": ["Sheet1", "Sheet2"], "delete_file_after_extract": true}}]}
    "FileSource":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 3825
          description: "File ID"
          examples:
            - 1
        "file_name":
          oneOf:
            - type: "null"
            - type: "string"
              format: "uri"
              examples:
                - "/home/ubuntu/bom/live/venv/lib/python3.10/site-packages/polyfactory/factories/base.py"
          description: "File Name"
          examples:
            - "def.csv"
        "size":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "SWnxgfuzUGzKUWEbwDLr"
          description: "File Size"
          examples:
            - "18 Bytes"
      type: "object"
      title: "FileSource"
      description: "Details of the file ds source"
      examples:
        - {"id": 1, "file_name": "abcd.csv", "size": "20 Bytes"}
    "FilesList":
      properties:
        "files":
          items: {"$ref": "#/components/schemas/FilesStandardSchema"}
          type: "array"
        "limit":
          type: "integer"
          default: 10
        "offset":
          type: "integer"
          default: 0
        "next":
          type: "string"
      type: "object"
      required:
        - "files"
        - "next"
      title: "FilesList"
    "FilesStandardSchema":
      properties:
        "id":
          type: "integer"
          title: "Id"
          description: "File Id"
          examples:
            - {"value": 163534}
        "name":
          type: "string"
          minLength: 1
          title: "Name"
          description: "File Name"
          examples:
            - {"value": "password_protected_file.xlsx"}
        "status":
          type: "string"
          minLength: 1
          title: "Status"
          description: "Status of the file"
          examples:
            - {"value": "action_needed"}
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"value": "2024-02-12T12:37:33.777678Z"}
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Updated At"
          description: "Updated At"
          examples:
            - {"value": "2024-02-12T12:37:33.777678Z"}
        "status_info": {"$ref": "#/components/schemas/StatusInfo"}
        "additional_info": {"$ref": "#/components/schemas/AdditionalInfo"}
      type: "object"
      required:
        - "additional_info"
        - "created_at"
        - "id"
        - "last_updated_at"
        - "name"
        - "status"
        - "status_info"
      title: "FilesStandardSchema"
    "FolderDetails":
      properties:
        "folder": {"$ref": "#/components/schemas/FolderSchema"}
      type: "object"
      required:
        - "folder"
      title: "FolderDetails"
    "FolderPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "name"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "name"}
        "value":
          type: "string"
          title: "Value"
          description: "Value to update folders configuration"
          examples:
            - {"value": "test"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "FolderPatchData"
    "FolderPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/FolderPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "FolderPatchRequest"
      description: "Update folder name"
      examples:
        - {"patch": [{"op": "replace", "path": "name", "value": "test"}]}
    "FolderSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          title: "Id"
          description: "Folder Id"
          examples:
            - {"value": 8024}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          minLength: 1
          title: "Name"
          description: "Folder Name"
          examples:
            - {"value": "Folder1"}
        "status":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Status"
          description: "Status"
          examples:
            - {"value": "active"}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"value": "2024-02-12T12:37:31.777678Z"}
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Updated At"
          description: "Updated At"
          examples:
            - {"value": "2024-02-12T12:38:33.777678Z"}
        "resource_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Resource id"
          description: "Resource id"
          examples:
            - {"value": 8}
        "created_by":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Created By"
          description: "Created By"
          examples:
            - {"value": "2024-02-12T12:38:33.777678Z"}
        "parent_id":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Parent Id"
          description: "Parent Id"
          examples:
            - {"value": "label_8024"}
        "resource_path":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Resource Path"
          examples:
            - "/workspace:Mammoth Analytics:3/project:test_project:10/label:Folder1:1"
      type: "object"
      title: "FolderSchema"
    "FoldersList":
      properties:
        "folders":
          items: {"$ref": "#/components/schemas/FolderSchema"}
          type: "array"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/workspaces/4/projects/5/folders?limit=50&offset=50"}
      type: "object"
      required:
        - "folders"
        - "next"
      title: "FoldersList"
    "FoldersPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "move"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "move"}
        "from":
          items:
            type: "integer"
          type: "array"
          title: "Resource Ids"
          description: "Resource Ids to be moved"
          examples:
            - {"value": [8024]}
        "path":
          oneOf:
            - type: "integer"
            - type: "string"
          title: "Destination Folder Id"
          description: "Destination Folder Id/'root' for moving resources to root folder"
          examples:
            - {"value": 8024}
      type: "object"
      required:
        - "from"
        - "op"
        - "path"
      title: "FoldersPatchData"
    "GenAIData":
      properties:
        "data":
          type: "array"
        "context_columns":
          items:
            type: "string"
          type: "array"
      type: "object"
      required:
        - "context_columns"
        - "data"
      title: "GenAIData"
    "GenAISpec":
      properties:
        "columns":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
        "no_of_rows":
          type: "integer"
          maximum: 100
          minimum: 1
          title: "Number of rows to be generated"
        "prompt":
          type: "string"
      type: "object"
      required:
        - "no_of_rows"
        - "prompt"
      title: "GenAISpec"
      description: "Parameters required to generate AI data"
      examples:
        - {"columns": ["column_1"], "no_of_rows": 10, "prompt": "Describe the nature of the data of each cell in the given columns"}
    "GenAIValidationSpec":
      properties:
        "limits":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/Limits"}
        "is_key_valid":
          type: "boolean"
        "error_code":
          oneOf:
            - type: "null"
            - type: "string"
        "error_message":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "is_key_valid"
      title: "GenAIValidationSpec"
    "GetConditionDetailsSchema":
      properties:
        "frequency":
          type:
            - "string"
            - "null"
          enum:
            - "minutely"
            - "hourly"
            - "daily"
            - "weekly"
            - "monthly"
            - "yearly"
            - null
          title: "Frequency"
          description: "Frequency"
          examples:
            - {"summary": "Sample frequency", "value": "monthly"}
        "interval":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Interval"
          description: "Interval"
          examples:
            - {"summary": "Sample interval", "value": 1}
        "start_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Start At"
          description: "Start At"
          examples:
            - {"summary": "Sample start date", "value": "2025-08-16 10:56:20Z"}
        "until":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Until"
          description: "Until"
          examples:
            - {"summary": "Sample until date", "value": "2025-09-22 10:56:20Z"}
        "by_month_day":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "By Month Day"
          description: "By Month Day"
          examples:
            - {"summary": "Sample month day", "value": [1, 2]}
        "by_week_day":
          oneOf:
            - type: "null"
            - items:
                type: "string"
                enum:
                  - "mo"
                  - "tu"
                  - "we"
                  - "th"
                  - "fr"
                  - "sa"
                  - "su"
              type: "array"
          title: "By Week Day"
          description: "By Week Day"
          examples:
            - {"summary": "Sample week day", "value": ["mo"]}
        "start_now":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Start now"
          description: "start now/later"
          examples:
            - {"summary": "whether to start now or later", "value": true}
        "file_contains":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name Contains"
          description: "Name Contains"
          examples:
            - {"summary": "Sample Name Pattern", "value": "abc"}
      type: "object"
      title: "GetConditionDetailsSchema"
      description: "Condition Details"
      examples:
        - {"summary": "Sample task details", "value": {"frequency": "monthly", "interval": 1, "start_at": "2025-08-16 10:56:20Z", "until": "2025-09-22 10:56:20Z", "by_week_day": ["mo"], "by_month_day": [1, 2], "start_now": true}}
    "GetConditionSchema":
      properties:
        "condition_type":
          type: "string"
          title: "Condition type"
          description: "Condition type"
          examples:
            - {"summary": "Sample Condition type", "value": "at_specific_time"}
        "details": {"$ref": "#/components/schemas/GetConditionDetailsSchema"}
        "condition_mode":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Condition Mode"
          description: "Condition Mode"
          examples:
            - {"summary": "Sample condition mode", "value": "and"}
      type: "object"
      required:
        - "condition_type"
        - "details"
      title: "GetConditionSchema"
    "GetConnectionSchema":
      properties:
        "connection_key":
          type: "string"
          minLength: 1
          title: "Connection Key"
          description: "Connection Key"
          examples:
            - {"summary": "Sample Connection Key", "value": "connection_key"}
        "connection_config":
          type: "object"
          title: "Connection Config"
          description: "Connection Config"
          examples:
            - {"summary": "Sample Connection Config", "value": {"key": "value"}}
      type: "object"
      required:
        - "connection_config"
        - "connection_key"
      title: "GetConnectionSchema"
    "GetPendingItemsResponse":
      properties:
        "pending_items": {"$ref": "#/components/schemas/PendingItemsResponse"}
      type: "object"
      required:
        - "pending_items"
      title: "GetPendingItemsResponse"
    "GetPlanSchema":
      properties:
        "plan":
          type: "string"
          minLength: 1
          title: "Plan"
          description: "The plan of the workspace"
      type: "object"
      required:
        - "plan"
      title: "GetPlanSchema"
    "GetTaskSchema":
      properties:
        "id":
          type: "integer"
          title: "Task ID"
          description: "Automation task ID"
          examples:
            - {"summary": "Sample ID", "value": 1}
        "ds_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Dataset ID"
          description: "Dataset ID"
          examples:
            - {"summary": "Sample Dataset ID", "value": 1}
        "recurrence_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Recurrence IDs"
          description: "Recurrence IDs"
          examples:
            - {"summary": "Sample Recurrence ID", "value": [1]}
        "destination_dataset_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Destination Dataset IDs"
          description: "Destination Dataset IDs"
          examples:
            - {"summary": "Sample Destination Dataset IDs", "value": [1]}
        "source_folder_resource_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Source Folder Resource ID"
          description: "Source Folder Resource ID"
          examples:
            - {"summary": "Sample Source Folder ID", "value": 1}
        "source_dataset_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Source Dataset ID"
          description: "Source Dataset ID"
          examples:
            - {"summary": "Sample Source Dataset ID", "value": 1}
        "status":
          type: "string"
          title: "Status"
          description: "Status"
          examples:
            - {"summary": "Sample Status", "value": "idle"}
        "last_run":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Run"
          description: "Last Run"
          examples:
            - {"summary": "Sample last run", "value": "2025-08-16 10:56:20Z"}
        "last_run_result":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Last Run Result"
          description: "Last Run Result"
          examples:
            - {"summary": "Sample last run result", "value": {"failure_reason": {"error_code": "4AUTO14", "error_message": "schema mismatch"}}}
      type: "object"
      required:
        - "id"
        - "status"
      title: "GetTaskSchema"
      description: "Task Details"
      examples:
        - {"summary": "Sample task details", "value": {"id": 444, "ds_id": 456, "status": "idle", "recurrence_ids": [123]}}
    "GlobalSchema":
      properties:
        "SELF_SERVE":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/SelfServeSchema"}
          description: "Self Serve"
          examples:
            - {"value": {"onboarding_state": "registered"}}
        "ONBOARDING":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/OnboardingSchema"}
          description: "Onboarding"
          examples:
            - {"value": {"DATAFLOW_SETTINGS": true}}
      type: "object"
      title: "GlobalSchema"
    "HostedPageSchema":
      properties:
        "object_type":
          type: "string"
          title: "Page Type"
          description: "Type of the hosted page"
          examples:
            - {"summary": "Sample Page Type", "value": "portal_session"}
        "plan_id":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Subscription plan ID"
          description: "ID of the plan"
          examples:
            - {"summary": "Sample Plan ID", "value": "internal"}
      type: "object"
      required:
        - "object_type"
      title: "HostedPageSchema"
      description: "Details of the hosted page"
      examples:
        - {"object_type": "change_plan", "plan_id": "test_plan_11"}
    "InstanceList":
      properties:
        "instance_types":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/InstanceSchema"}
              type: "array"
      type: "object"
      title: "InstanceList"
    "InstanceSchema":
      properties:
        "tag":
          type: "string"
          title: "Tag"
          description: "Tag of the instance"
          examples:
            - {"value": "c2_m2"}
        "id":
          type: "string"
          title: "ID"
          description: "ID of the instance"
          examples:
            - {"value": "t3a.small"}
      type: "object"
      required:
        - "id"
        - "tag"
      title: "InstanceSchema"
    "Intent":
      properties:
        "query":
          type: "string"
          description: "Intent"
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
          description: "profile"
      type: "object"
      required:
        - "query"
      title: "Intent"
      description: "Intent"
      examples:
        - {"query": "What is the total sales for the month of January?"}
    "InternalDsInfo":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details": {"$ref": "#/components/schemas/InternalDsSource"}
      type: "object"
      required:
        - "details"
      title: "InternalDsInfo"
      examples:
        - {"type": "append", "details": {"id": 6297, "trigger_id": 1477}}
    "InternalDsSource":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 250
          description: "Dataview ID"
          examples:
            - 1
        "trigger_id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 5985
          description: "Trigger ID"
          examples:
            - 1
      type: "object"
      title: "InternalDsSource"
      description: "Details of the internal ds source"
      examples:
        - {"id": 1, "trigger_id": 1}
    "InviteProjectRolePatch":
      properties:
        "invite_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Invite ID"
          examples:
            - {"value": 1}
        "role":
          type: "string"
          enum:
            - "project_admin"
            - "project_analyst"
          description: "Role"
          default: "project_analyst"
          examples:
            - {"value": "project_admin"}
      type: "object"
      title: "InviteProjectRolePatch"
    "InvoiceSchema":
      properties:
        "invoice":
          type: "object"
          title: "Invoice Details"
          description: "Invoice Details"
          examples:
            - {"summary": "Sample Invoice Details", "value": {"id": "123", "name": "Sample Invoice"}}
      type: "object"
      required:
        - "invoice"
      title: "InvoiceSchema"
    "InvoicesSchema":
      properties:
        "invoices":
          items:
            oneOf:
              - type: "null"
              - type: "object"
          type: "array"
          title: "Invoices"
          description: "Invoices of the subscription"
          examples:
            - {"summary": "Sample Invoices", "value": [{"id": "123", "name": "Sample Invoice"}]}
      type: "object"
      required:
        - "invoices"
      title: "InvoicesSchema"
    "ItemExport":
      properties:
        "item_type":
          type:
            - "string"
            - "null"
          enum:
            - "export"
            - null
          default: "export"
          examples:
            - "export"
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 1812
          examples:
            - 7259
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 1808
          examples:
            - 3943
        "sequence":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 5656
          examples:
            - 3625
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "deleted"
            - "executed"
            - "executing"
            - "edited"
            - "added"
            - "suspended"
            - "suspending"
            - null
          examples:
            - "executing"
        "reordered":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          examples:
            - true
        "has_refferror":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          examples:
            - false
        "handler_type":
          type:
            - "string"
            - "null"
          enum:
            - "postgres"
            - "csv_file"
            - "s3"
            - "mysql"
            - "mssql"
            - "ftp"
            - "sftp"
            - "email"
            - "elasticsearch"
            - "powerbi"
            - "redshift"
            - "bigquery"
            - "internal_dataset"
            - "publishdb"
            - null
          examples:
            - "email"
        "trigger_type":
          type:
            - "string"
            - "null"
          enum:
            - "none"
            - "pipeline"
            - "schedule"
            - null
          examples:
            - "pipeline"
        "runnable":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          examples:
            - true
        "data_pass_through":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          examples:
            - true
        "error_info":
          oneOf:
            - type: "null"
            - type: "object"
              examples:
                - {"movie": "kKMXOBkcDRHDVLITGWaN", "quite": 97421.547561479, "film": "vQbdfCyDBnuPBjPEGDUY", "card": 1764, "or": "-910070284328190282644547267584813816074.55991319988587073936953698386", "surface": "4800025277424669351175234391529891179652255751984644439262494960144799241562636075.1846677760342361698755704161493735", "far": "inaPqrofqyXqvuyGIquH", "something": 4672319442.45044}
          examples:
            - {"identify": "37151187300537509164.573511807349671226745295419286449153270789088254067264524010952450165969884", "ten": "TWBXMrFSMReNFiEKowao", "fact": "kfrye@example.net", "herself": 9574, "score": "silvateresa@example.com", "year": "LkGqDTTwFYfPNsHkCOAB", "build": "QjrEpXZfQsssTnULlaHE", "already": "mqEYwzKBBJCrTKnYOcIV", "try": "YhDWEyQyCQhlaHRFBLad", "idea": 15310.9267534167, "run": "KOafcWRNBXJcAulZyOen", "live": "bcIwCUXDRvTLpEdfWKui", "note": "1999-10-20T15:05:31.201053"}
        "execution_start_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2023-06-15T20:50:00.316934"
          examples:
            - "2001-03-02T20:48:24.707293"
        "execution_end_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2002-06-27T12:36:38.910287"
          examples:
            - "2013-11-02T17:00:13.140332"
      type: "object"
      title: "ItemExport"
      examples:
        - {"item_type": "export", "id": null, "dataview_id": 7600, "sequence": null, "status": "executing", "reordered": false, "has_refferror": true, "handler_type": "ftp", "trigger_type": "none", "runnable": true, "data_pass_through": true, "error_info": {"offer": "zblQvivuRkyVAAxjfLkW", "shoulder": "2014-11-09T02:09:06.905311", "dream": "WWBGsficFhRAluvFKhzJ", "training": "aFgDYltpvgqmedoLaRwO", "hold": "OkdzSMpPmhftNqDCefUB", "nor": 9366, "because": "sJtxOSFgHPPwBtayvnKl", "risk": "richardaaron@example.net", "sometimes": 9316, "case": "1149980178076915127020498020818003390200051756295604151.562029342615187559317779264986462451138323221756479779252907874649924880902406211433853869375306725"}, "execution_start_time": null, "execution_end_time": null}
    "ItemExportInfo":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "sequence":
          oneOf:
            - type: "null"
            - type: "integer"
        "sub_sequence":
          oneOf:
            - type: "null"
            - type: "integer"
        "handler_type":
          type:
            - "string"
            - "null"
          enum:
            - "postgres"
            - "csv_file"
            - "s3"
            - "mysql"
            - "mssql"
            - "ftp"
            - "sftp"
            - "email"
            - "elasticsearch"
            - "powerbi"
            - "redshift"
            - "bigquery"
            - "internal_dataset"
            - "publishdb"
            - null
        "trigger_type":
          type:
            - "string"
            - "null"
          enum:
            - "none"
            - "pipeline"
            - "schedule"
            - null
        "end_of_pipeline":
          oneOf:
            - type: "null"
            - type: "boolean"
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "deleted"
            - "executed"
            - "executing"
            - "edited"
            - "added"
            - "suspended"
            - "suspending"
            - null
        "target_properties":
          oneOf:
            - type: "null"
            - type: "object"
        "runnable":
          oneOf:
            - type: "null"
            - type: "boolean"
        "reordered":
          oneOf:
            - type: "null"
            - type: "boolean"
        "data_pass_through":
          oneOf:
            - type: "null"
            - type: "boolean"
        "additional_properties":
          oneOf:
            - type: "null"
            - type: "object"
        "condition":
          oneOf:
            - type: "null"
            - type: "object"
        "last_modified_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "execution_start_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "execution_end_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "last_run_result":
          oneOf:
            - type: "null"
            - type: "object"
        "error_info":
          oneOf:
            - type: "null"
            - type: "object"
      type: "object"
      title: "ItemExportInfo"
    "ItemExportPatch":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "command"
          description: "Operation e.g. replace, command etc"
          examples:
            - {"value": "command"}
        "path":
          type: "string"
          enum:
            - "run"
            - "suspend"
            - "restore"
            - "discard"
            - "params"
          description: "Path to part of the resource being modified"
          examples:
            - {"description": "Discard/remove the export from the pipeline", "value": "discard"}
        "value":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/AddExportSpec"}
          description: "Patch value, the path of the resource to modified with"
          examples:
            - {"description": "The patch requires no additional data"}
      type: "object"
      required:
        - "op"
        - "path"
      title: "ItemExportPatch"
    "ItemTask":
      properties:
        "item_type":
          type:
            - "string"
            - "null"
          enum:
            - "task"
            - null
          default: "task"
          examples:
            - "task"
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 2631
          examples:
            - 1564
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 8829
          examples:
            - 545
        "sequence":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 8570
          examples:
            - 9227
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "deleted"
            - "executed"
            - "executing"
            - "edited"
            - "added"
            - "suspended"
            - "suspending"
            - null
          examples:
            - "added"
        "reordered":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - true
          examples:
            - true
        "reference_errors":
          oneOf:
            - type: "null"
            - type: "object"
              examples:
                - {"player": "jessica76@example.org", "plan": "AzsSiGQKcQltbfKVrvLx", "shake": "eotMNKwBMKjSQLHCjdec", "follow": "RLRSNNqMJKVIADdSizHx", "over": 7253, "hit": "QJThgLscYOGeHficFzbd", "century": "johnreyes@example.org", "sport": "1993-05-31T10:54:25.605711", "low": "NXyUFsyYTwErSRrsXCdh", "become": 1.46060565257086}
          examples:
            - {"leave": 8317, "certain": "2001-02-04T00:21:03.278148", "voice": 8010, "start": "NCHivKMTQipvEcItPYeu", "long": 8967, "wrong": "jbtiVhKwWzHZtBxMmeOF"}
        "data_pass_through":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          examples:
            - false
        "data_size":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 2925
          examples:
            - 4880
        "row_count":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 5048
          examples:
            - 8030
        "execution_start_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2003-10-22T10:37:10.078151"
          examples:
            - "2020-12-20T01:58:01.449666"
        "execution_end_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2004-12-07T19:00:49.251377"
          examples:
            - "2020-06-25T17:58:58.475893"
      type: "object"
      title: "ItemTask"
      examples:
        - {"item_type": "task", "id": null, "dataview_id": null, "sequence": null, "status": "edited", "reordered": true, "reference_errors": null, "data_pass_through": false, "data_size": null, "row_count": 5271, "execution_start_time": "1997-11-14T22:13:51.378646", "execution_end_time": "2008-01-30T20:18:36.145106"}
    "ItemTaskInfo":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "sequence":
          oneOf:
            - type: "null"
            - type: "integer"
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "deleted"
            - "executed"
            - "executing"
            - "edited"
            - "added"
            - "suspended"
            - "suspending"
            - null
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "params":
          oneOf:
            - type: "null"
            - type: "object"
        "transform_status":
          type:
            - "string"
            - "null"
          enum:
            - "INIT"
            - "PROCESSING"
            - "LOCKED"
            - "DONE"
            - "ERROR"
            - "INACTIVE"
            - "REFERROR"
            - "QUEUED"
            - "IGNORED"
            - "EXCEPTION"
            - "SUSPENDED"
            - null
        "prev_metadata":
          oneOf:
            - type: "null"
            - items:
                type: "object"
              type: "array"
        "reordered":
          oneOf:
            - type: "null"
            - type: "boolean"
        "reference_errors":
          oneOf:
            - type: "null"
            - type: "object"
        "data_pass_through":
          oneOf:
            - type: "null"
            - type: "boolean"
        "data_size":
          oneOf:
            - type: "null"
            - type: "integer"
        "row_count":
          oneOf:
            - type: "null"
            - type: "integer"
        "execution_start_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "execution_end_time":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
      type: "object"
      title: "ItemTaskInfo"
    "ItemTaskPatch":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "command"
          description: "Operation e.g. replace, command etc"
          examples:
            - {"value": "command"}
        "path":
          type: "string"
          enum:
            - "suspend"
            - "restore"
            - "discard"
            - "params"
            - "display_info"
          description: "Path to part of the resource being modified"
          examples:
            - {"description": "Discard/remove the task from the pipeline", "value": "discard"}
        "value":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/AddTaskSpec"}
            - type: "object"
          description: "Patch value, the path of the resource to modified with"
          examples:
            - {"description": "The patch requires no additional data"}
      type: "object"
      required:
        - "op"
        - "path"
      title: "ItemTaskPatch"
    "JobResponse":
      properties:
        "job": {"$ref": "#/components/schemas/JobSchema"}
      type: "object"
      required:
        - "job"
      title: "JobResponse"
      examples:
        - {"job": {"id": 2, "status": "processing", "response": {"tonight": 2760, "me": "https://www.yang.com/list/list/apphomepage.php", "people": 31568.5018799828, "media": "CQcDdvDZVPEurUjWDORT", "because": "johnsonmichael@example.com", "road": 9849, "notice": "kendrawilson@example.com", "service": "bVAsuEshTKFLZjQQrDxk", "hit": 2499, "suddenly": "WjGDYPstccqXcjHsjXcF", "seven": 1273}, "last_updated_at": "2006-01-07T17:12:59.153572", "created_at": "2001-07-04T16:17:27.909999", "path": "ivNyOTjTEvAUueXgfLqp", "operation": "HUrVGFBaiJKfHyEulsYj"}}
    "JobSchema":
      properties:
        "id":
          type: "integer"
          title: "Job id"
          examples:
            - {"value": {"id": 10}}
        "status":
          type: "string"
          enum:
            - "success"
            - "failure"
            - "processing"
            - "error"
          title: "Job status"
          description: "Job status can be success, failure or processing"
          examples:
            - {"value": {"status": "success"}}
        "response":
          type: "object"
          description: "Result of async task is stored in response"
          examples:
            - {"value": {"response": {"object": "some object"}}}
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Job last updated at"
          description: "Job last updated at is the time when Job status was last updated"
          examples:
            - {"value": {"last_updated_at": "2021-08-10T10:00:00"}}
        "created_at":
          type: "string"
          format: "date-time"
          title: "Job created at"
          description: "Create at is time when async task was created"
          examples:
            - {"value": {"created_at": "2021-08-10T10:00:00"}}
        "path":
          type: "string"
          title: "Job path"
          description: "API request path of the Job operation"
          examples:
            - {"value": {"path": "/api/v2/dataviews/1"}}
        "operation":
          type: "string"
          title: "Job operation"
          description: "Operation is async task name which Job is tracking"
          examples:
            - {"value": {"operation": "post_modification_pipeline_execution"}}
      type: "object"
      required:
        - "created_at"
        - "id"
        - "last_updated_at"
        - "operation"
        - "path"
        - "response"
        - "status"
      title: "JobSchema"
      examples:
        - {"id": 2, "status": "success", "response": {"alone": "bzdXMsvhsvQnjpsxSmwt", "laugh": "http://www.ingram-allen.net/searchpost.asp", "meeting": "-354234653618046708671335867366504813314641740844433590678872.6300749181269592117235667342", "participant": "http://www.castillo.com/tag/mainabout.html", "administration": 3664, "design": "CcUmnviVzUMZozziJUhC", "maintain": 8825, "tax": 8026, "million": "DfYRTwdshFRPhSOVrnPx", "than": 8514, "fall": "1978-07-21T02:05:43.892179", "ready": "qbkVDGbgpSmpeFCZfQiy", "talk": 9750}, "last_updated_at": "2007-09-06T00:02:33.903517", "created_at": "2019-04-07T10:51:04.926594", "path": "ZjEwZJqYSNRLxMkFgOaw", "operation": "vtQkOPQsswkMypzVvHso"}
    "JobsGetResponse":
      properties:
        "jobs":
          items: {"$ref": "#/components/schemas/JobSchema"}
          type: "array"
          examples:
            - [{"id": 1, "status": "error", "response": {"nice": "LsGZikpQmmFEvCbabcOY", "agree": "KdIMjvciKExjuxXLIhne", "bad": "heBhfgKPQDHNwALGFHBl", "instead": -2.3791848075952, "talk": 8457, "almost": "woodssteven@example.com", "adult": "VhuiIKQjAycEiKZzsXNS", "read": 2445, "third": "joanna52@example.org", "law": "80389000047445764828916065220768551264737736487291348953001230352308548564371508490829.111576422688332638976318299821671307225633549420765505489064721661172168108849716167", "ground": "ubZGLKpIxlzypMVFbCGQ", "these": 408979887401.617, "why": "BRCPSdvNikiqAbhzObGs"}, "last_updated_at": "1996-03-05T09:18:15.956205", "created_at": "2003-05-02T20:39:57.142555", "path": "hJUfLWOpqwSrQwfILzws", "operation": "ijNpaLwNNiPsgmXUDeQc"}]
      type: "object"
      required:
        - "jobs"
      title: "JobsGetResponse"
      examples:
        - {"jobs": [{"id": 1, "status": "processing", "response": {"middle": "SjxUDJKwjLSsRgVkDScJ", "beautiful": "jLHCFVPJUTrSUEWjPmuA", "start": 9884, "six": "2010-06-24T14:18:49.343680", "where": "dLooKNBQsUHSQKWNxguF", "reason": "ihmxirINHUwMBcYbUBCq", "position": "https://bailey.com/main/blog/categorypost.htm", "safe": "bedwards@example.com", "before": "ohCiaNNsTiUJIcNiBCdp"}, "last_updated_at": "2023-03-30T15:58:11.516156", "created_at": "2018-06-05T01:10:17.491518", "path": "qYdHPSHMmOJDnIcAIrFc", "operation": "rzRBWtUEyjQPuqoreSwj"}]}
    "Limits":
      properties:
        "can_process_max_rows":
          type: "boolean"
        "max_rows_allowed":
          oneOf:
            - type: "null"
            - type: "integer"
      type: "object"
      required:
        - "can_process_max_rows"
      title: "Limits"
    "ListConnectionsSchema":
      properties:
        "connections":
          items: {"$ref": "#/components/schemas/GetConnectionSchema"}
          type: "array"
          title: "List of Connections"
          description: "List of Connections"
          examples:
            - {"value": [{"value": "connection_value", "connection_config": {"key": "value"}}]}
      type: "object"
      required:
        - "connections"
      title: "ListConnectionsSchema"
    "MessageResponseSchema":
      properties:
        "message":
          type: "string"
      type: "object"
      required:
        - "message"
      title: "MessageResponseSchema"
    "NewDsDetails":
      properties:
        "name":
          type: "string"
          description: "New dataset name"
          examples:
            - {"value": "new_dataset_name"}
      type: "object"
      required:
        - "name"
      title: "NewDsDetails"
    "NumColumnFormat":
      properties:
        "numtype":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "CluBxkQpshjRrzNWDrur"
          description: "Numeric column Type"
          examples:
            - "int"
        "currency_symbol":
          type:
            - "string"
            - "null"
          description: "Currency Symbol"
          examples:
            - "$"
        "is_percentage":
          type: "boolean"
          description: "Is Percentage"
          examples:
            - false
        "decimal_spec":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 5391
          description: "Decimal Spec"
          examples:
            - 3
        "scientific":
          type: "boolean"
          description: "Scientific"
          examples:
            - false
        "numeric_precision":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 3489
          description: "Numeric Precision"
          examples:
            - 2
      type: "object"
      required:
        - "is_percentage"
        - "scientific"
      title: "NumColumnFormat"
      examples:
        - {"numtype": "nCrpurJMHesffeZoPTkt", "currency_symbol": "₹", "is_percentage": true, "decimal_spec": 4854, "scientific": true, "numeric_precision": 2}
    "NumericFormat":
      properties:
        "comma_separated":
          type: "boolean"
          title: "Comma Separated"
          description: "Whether to format numbers with commas as thousand separators."
          default: false
        "currency_symbol":
          type: "string"
          title: "Currency Symbol"
          description: "Symbol to use for currency formatting (empty if not applicable)."
          default: ""
        "decimal_spec":
          type: "integer"
          title: "Decimal Specification"
          description: "Number of decimal places to display."
          default: 0
        "enabled":
          type: "boolean"
          title: "Enabled"
          description: "Whether numeric formatting is applied."
          default: true
        "is_percentage":
          type: "boolean"
          title: "Is Percentage"
          description: "Whether the number should be displayed as a percentage."
          default: false
        "numtype":
          type: "string"
          enum:
            - "float"
            - "int"
          title: "Number Type"
          description: "The data type of the number (e.g., int, float)."
          default: "float"
      type: "object"
      title: "NumericFormat"
    "ObjectJobSchema":
      properties:
        "status_code":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Status code"
          examples:
            - {"value": {"status_code": 200}}
        "job_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Job id"
          description: "Created job id"
        "failure_reason":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Failure reason"
          description: "Failure reason if status is failure"
          examples:
            - {"value": {"failure_reason": "Some reason"}}
      type: "object"
      title: "ObjectJobSchema"
    "OnboardingSchema":
      properties:
        "DATAFLOW_SETTINGS":
          type: "boolean"
          description: "Dataflow Settings"
          examples:
            - {"value": true}
      type: "object"
      required:
        - "DATAFLOW_SETTINGS"
      title: "OnboardingSchema"
    "PatchAutomationSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Name"
          examples:
            - {"summary": "Sample name", "value": "automation abc"}
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Description"
          description: "Description"
          examples:
            - {"summary": "Sample description", "value": "automation description"}
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "active"
            - "suspended"
            - "failed"
            - null
          title: "Status"
          description: "Status"
          examples:
            - {"summary": "Sample status", "value": "active"}
        "tasks":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/PatchAutomationTaskSchema"}
              type: "array"
          title: "Tasks"
          description: "Tasks"
          examples:
            - {"summary": "Sample tasks", "value": [{"task": "Run a data retrieval", "details": [{"ds_id": 456, "ds_name": "abc"}, {"ds_id": 555, "ds_name": "efg"}]}]}
        "conditions":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/AutomationConditionSchema"}
              type: "array"
          title: "Conditions"
          description: "Conditions"
          examples:
            - {"summary": "Sample conditions", "value": [{"condition": "at specific time", "details": {"frequency": "monthly", "interval": 1, "start": "2025-08-06 10:56:20Z", "until": "2025-09-12 10:56:20Z", "by_week_day": ["mo"], "by_month_day": [1, 2]}}]}
        "condition_mode":
          type:
            - "string"
            - "null"
          enum:
            - "and"
            - "or"
            - null
          title: "Condition Type"
          description: "Condition Type"
          examples:
            - {"summary": "Sample condition mode", "value": "and"}
      type: "object"
      title: "PatchAutomationSchema"
    "PatchAutomationTaskSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID"
          description: "Task ID"
          examples:
            - {"summary": "Sample ID", "value": 1}
        "task_type":
          type:
            - "string"
            - "null"
          enum:
            - "run_data_retrieval"
            - "append_data"
            - null
          title: "Task type"
          description: "Task type"
          examples:
            - {"summary": "Sample task type", "value": "run_data_retrieval"}
        "details":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/TaskDetailsSchema"}
          title: "Details"
          description: "Task Details"
          examples:
            - {"summary": "Sample task details", "value": [{"ds_ids": [5, 6]}]}
        "conditions":
          items:
            type: "object"
          type: "array"
          title: "Conditions"
          description: "Conditions"
          default: []
          examples:
            - {"summary": "Sample conditions", "value": [{"condition_type": "at_specific_time", "details": {"frequency": "monthly", "interval": 1, "start_at": "2027-08-06 10:56:20Z", "until": "2028-09-12 10:56:20Z", "by_week_day": ["mo"], "by_month_day": [1, 2], "start_now": true}}]}
      type: "object"
      title: "PatchAutomationTaskSchema"
    "PatchOperation":
      properties:
        "op":
          type: "string"
          const: "replace"
          maxLength: 50
          minLength: 1
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          maxLength: 50
          minLength: 1
          description: "Path"
          examples:
            - {"value": "name"}
        "value":
          oneOf:
            - type: "string"
            - items:
                type: "string"
              type: "array"
          description: "Value to replace the attribute with"
          examples:
            - {"value": "New name"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "PatchOperation"
    "PatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/PatchOperation"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "PatchRequest"
      description: "Details of the app to be created"
      examples:
        - {"patch": [{"op": "replace", "path": "app_name", "value": "test"}, {"op": "replace", "path": "description", "value": "test"}, {"op": "replace", "path": "api_secret", "value": ["abcd3234adfaf3w3f4a4", "encrypted_abcd3234adfaf3w3f4a4"]}]}
    "PatchValueBulkOps":
      properties:
        "task_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Task Ids"
          description: "List of task ids"
          examples:
            - {"value": [12, 89]}
        "export_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Export Ids"
          description: "List of exports ids"
          examples:
            - {"value": [3, 7]}
      type: "object"
      title: "PatchValueBulkOps"
    "PatchValueReorder":
      properties:
        "root":
          items: {"$ref": "#/components/schemas/PatchValueReorderItem"}
          type: "array"
      type: "object"
      required:
        - "root"
      title: "PatchValueReorder"
    "PatchValueReorderExportItem":
      properties:
        "export_id":
          type: "integer"
          title: "Export Id"
          examples:
            - {"value": 101}
        "reordered":
          type: "boolean"
          title: "Whether the export was reordered"
          examples:
            - {"value": true}
        "end_of_pipeline":
          type: "boolean"
          title: "Is the export pinned to end of the pipeline"
          examples:
            - {"value": true}
      type: "object"
      required:
        - "end_of_pipeline"
        - "export_id"
        - "reordered"
      title: "PatchValueReorderExportItem"
    "PatchValueReorderItem":
      properties:
        "task": {"$ref": "#/components/schemas/PatchValueReorderTaskItem"}
        "exports":
          items: {"$ref": "#/components/schemas/PatchValueReorderExportItem"}
          type: "array"
      type: "object"
      required:
        - "exports"
        - "task"
      title: "PatchValueReorderItem"
    "PatchValueReorderTaskItem":
      properties:
        "task_sequence":
          type: "integer"
          title: "Sequence of the task"
          examples:
            - {"value": 89}
        "reordered":
          type: "boolean"
          title: "Whether the task was reordered"
          examples:
            - {"value": true}
      type: "object"
      required:
        - "reordered"
        - "task_sequence"
      title: "PatchValueReorderTaskItem"
    "PaymentMethodsResponseSchema":
      properties:
        "payment_methods":
          items:
            type: "object"
          type: "array"
      type: "object"
      required:
        - "payment_methods"
      title: "PaymentMethodsResponseSchema"
    "PendingItem":
      properties:
        "op_id":
          type: "integer"
        "op_type":
          type: "string"
        "op_name":
          type: "string"
        "source_dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "additional_info":
          additionalProperties: {}
          type: "object"
        "data_pass_through":
          type: "boolean"
        "data_update_pending":
          type: "boolean"
        "resource":
          additionalProperties: {}
          type: "object"
      type: "object"
      required:
        - "additional_info"
        - "data_pass_through"
        - "data_update_pending"
        - "op_id"
        - "op_name"
        - "op_type"
        - "resource"
      title: "PendingItem"
    "PendingItemsResponse":
      properties:
        "non_sync_items":
          items: {"$ref": "#/components/schemas/PendingItem"}
          type: "array"
        "pending_data_update_items":
          items: {"$ref": "#/components/schemas/PendingItem"}
          type: "array"
        "pending_changes":
          additionalProperties: {"$ref": "#/components/schemas/PendingPipelineChange"}
          type: "object"
      type: "object"
      required:
        - "non_sync_items"
        - "pending_changes"
        - "pending_data_update_items"
      title: "PendingItemsResponse"
    "PendingPipelineChange":
      properties:
        "dataview_id":
          type: "integer"
        "dataview_name":
          type: "string"
        "is_pipeline_in_error":
          type: "boolean"
        "datasource_name":
          type: "string"
        "pending_steps_count":
          type: "integer"
        "tasks_in_error":
          additionalProperties: {}
          type: "object"
        "actions_in_error":
          additionalProperties: {}
          type: "object"
      type: "object"
      required:
        - "actions_in_error"
        - "datasource_name"
        - "dataview_id"
        - "dataview_name"
        - "is_pipeline_in_error"
        - "pending_steps_count"
        - "tasks_in_error"
      title: "PendingPipelineChange"
    "PipelineAutoRunResp":
      properties:
        "auto_run":
          type: "boolean"
          title: "New auto run value"
      type: "object"
      required:
        - "auto_run"
      title: "PipelineAutoRunResp"
    "PipelineExortsModificationResp":
      properties:
        "trigger_id":
          type: "integer"
          title: "Id of the export"
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "deleted"
            - "executed"
            - "executing"
            - "edited"
            - "added"
            - "suspended"
            - "suspending"
            - null
          title: "New status of the export"
        "future_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Id of the trackable job running in the background"
      type: "object"
      required:
        - "trigger_id"
      title: "PipelineExortsModificationResp"
    "PipelineExportsPaginated":
      properties:
        "limit":
          type: "integer"
          title: "Page size"
          description: "Setting limit would limit the items received in the page"
          default: 10
          examples:
            - {"summary": "Limit page size to 10", "value": 10}
        "offset":
          type: "integer"
          title: "Page offset"
          description: "First position to return from the results"
          default: 0
          examples:
            - {"summary": "Sets the first position to return from the results to 0", "value": 0}
        "next":
          type: "string"
          title: "Next url"
          description: "Url of the next page"
          examples:
            - {"summary": "Next url will retrieve results with limit 10 and offset 5", "value": "<url>?limit=10&offset=5"}
        "exports":
          items: {"$ref": "#/components/schemas/ItemExportInfo"}
          type: "array"
      type: "object"
      required:
        - "exports"
        - "next"
      title: "PipelineExportsPaginated"
    "PipelineInfo":
      properties:
        "state":
          type:
            - "string"
            - "null"
          enum:
            - "ready"
            - "runtime_error"
            - "modifying"
            - "modified"
            - "analysing"
            - "ref_error"
            - "waiting_for_lock"
            - "submitted"
            - "running"
            - "exports_running"
            - null
          description: "Pipeline State"
          examples:
            - {"summary": "Exports are running in the pipeline", "value": "exports_running"}
        "draft_mode":
          type:
            - "string"
            - "null"
          enum:
            - "off"
            - "clean"
            - "dirty"
            - null
          description: "Pipeline draft mode"
          examples:
            - {"summary": "Draft mode is currently OFF", "value": "off"}
        "auto_run":
          oneOf:
            - type: "null"
            - type: "boolean"
              examples:
                - false
          description: "Pipeline auto run decision"
          examples:
            - {"summary": "Auto run is ON", "value": "True"}
        "stats":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/PipelineStats"}
          description: "Statistics is a set of information about pipeline"
          examples:
            - {"last_run_by": "SfReEFkNOkXDTItBqAkw", "last_run_at": "BQEMINrnnYvpeiOhftnm", "last_modified_by": "TrnwALnXLrKmaMSSmkWj", "last_modified_at": "gnfXWQYeYYKuquwNEKZc", "state_changed_at": null, "exports_execution_timestamp": null}
      type: "object"
      title: "PipelineInfo"
      examples:
        - {"state": "modified", "draft_mode": null, "auto_run": true, "stats": {"last_run_by": "rARwDcwziudYhLnYSBme", "last_run_at": null, "last_modified_by": null, "last_modified_at": null, "state_changed_at": "wrlWGgyqPDaBynwngpZd", "exports_execution_timestamp": "DQSxLyDhQPnFkPgkyqwg"}}
    "PipelineItemsPaginated":
      properties:
        "limit":
          type: "integer"
          title: "Page size"
          description: "Setting limit would limit the items received in the page"
          default: 10
          examples:
            - {"summary": "Limit page size to 10", "value": 10}
        "offset":
          type: "integer"
          title: "Page offset"
          description: "First position to return from the results"
          default: 0
          examples:
            - {"summary": "Sets the first position to return from the results to 0", "value": 0}
        "next":
          type: "string"
          title: "Next url"
          description: "Url of the next page"
          examples:
            - {"summary": "Next url will retrieve results with limit 10 and offset 5", "value": "<url>?limit=10&offset=5"}
        "items":
          items:
            oneOf:
              - {"$ref": "#/components/schemas/ItemTask"}
              - {"$ref": "#/components/schemas/ItemExport"}
            examples:
              - {"item_type": null, "id": null, "dataview_id": null, "sequence": null, "status": "added", "reordered": true, "reference_errors": {"cost": "zunigaedward@example.com", "resource": "fXADzzWsTltKbmndnnFj", "cover": "XHLvqjPOEQmuXmBiCaea", "possible": "79750971777983425754087783182479781951497756639551109069842752703864159945001345940567464.05647192767593782960", "local": "inJUQnJCOqbdVvRYGcTg", "water": "RvOqytTHQZuFKMjfAzJl", "happen": 6577, "our": "bBqeKWiydyczkokUAyzU", "physical": "eFEEyuaVuHehBRJPViiC"}, "data_pass_through": false, "data_size": null, "row_count": 6477, "execution_start_time": "2018-06-21T05:16:04.701059", "execution_end_time": null}
          type: "array"
          examples:
            - [{"item_type": "export", "id": null, "dataview_id": 7889, "sequence": null, "status": null, "reordered": false, "has_refferror": null, "handler_type": "email", "trigger_type": null, "runnable": true, "data_pass_through": true, "error_info": {"ready": "BuEbJLDYtvNuBqcvFCyA", "accept": 9382, "central": 5296, "environment": "qeGfcPOsFwKdhtYANhVc", "eight": "pJSzxeyNhkVNmCPZGTNI", "hot": "qmccoy@example.com", "experience": "KXUGTwClGDDGMqwgvhbI", "similar": "-616735422401571746831376831899639198816377965512544069984535633.0456637390343711865995602062151231310790978", "choose": "-5761408804147551227119478300028192573567171312468989338634.81934006193803172074487446432196494117800386035088104928539442832255", "compare": "AVcRNRJCgcFpIkwwennN"}, "execution_start_time": null, "execution_end_time": "2018-06-24T02:18:38.480449"}]
      type: "object"
      required:
        - "items"
        - "next"
      title: "PipelineItemsPaginated"
      examples:
        - {"limit": 2, "offset": 6, "next": "CZRvnjGhvmtGvJktyMzz", "items": [{"item_type": null, "id": 9208, "dataview_id": 3793, "sequence": null, "status": null, "reordered": null, "has_refferror": null, "handler_type": "bigquery", "trigger_type": "pipeline", "runnable": null, "data_pass_through": false, "error_info": null, "execution_start_time": null, "execution_end_time": null}]}
    "PipelineModificationResp":
      properties:
        "type_of_modification":
          type: "string"
          enum:
            - "source_data_change"
            - "add_rule"
            - "add_action"
            - "edit_rule"
            - "edit_action"
            - "discard_rule"
            - "suspend_rule"
            - "reorder_pipeline"
            - "reset_dataview"
            - "reset_pipeline"
            - "discard_pipeline_changes"
            - "draft_pipeline_submission"
            - "edit_derivative"
            - "dependency_update"
            - "manual_run"
            - "run_pending_updates"
            - "trigger_pending_chained_updates"
          title: "Type of modification done in the pipeline"
        "status":
          type: "string"
          enum:
            - "processing"
            - "done"
            - "error"
          title: "Pipeline Modification status"
        "has_error":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Indicates whether the modification errored out"
        "error_code":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Error code"
        "error_info":
          oneOf:
            - type: "null"
            - type: "object"
          title: "error information"
        "future_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Id of the trackable job running in the background"
        "param":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Params specific to the operation being done"
      type: "object"
      required:
        - "status"
        - "type_of_modification"
      title: "PipelineModificationResp"
    "PipelinePatch":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "command"
          description: "Operation e.g. replace, command etc"
          examples:
            - {"value": "command"}
        "path":
          type: "string"
          enum:
            - "auto_run"
            - "run"
            - "submit-changes"
            - "reset"
            - "discard-changes"
            - "suspend"
            - "restore"
            - "discard"
            - "reorder"
          description: "Path to the resource being modified"
          examples:
            - {"description": "Discard draft changes of the pipeline", "value": "discard"}
        "value":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/PatchValueBulkOps"}
            - {"$ref": "#/components/schemas/PatchValueReorder"}
            - type: "boolean"
          description: "Patch value, the path of the resource to modified with"
          examples:
            - {"description": "The patch requires not additional data"}
      type: "object"
      required:
        - "op"
        - "path"
      title: "PipelinePatch"
    "PipelinePatches":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/PipelinePatch"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "PipelinePatches"
      description: "List of patch operations"
      examples:
        - {"patches": [{"op": "command", "path": "discard-changes", "value": null}]}
    "PipelineStats":
      properties:
        "last_run_by":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "CcEIqirzMlcpUaAfMsgZ"
          title: "pipeline previously run by"
          description: "e.g. user_12 means pipeline was last run by a user whose id is 12"
          examples:
            - {"summary": "last run by user with user_id 12", "value": "user_12"}
        "last_run_at":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "SosapWJWLHTGxqaSgYjX"
          title: "pipeline previously run at"
          description: "when was the pipeline last run"
          examples:
            - {"summary": "Pipeline was last run at `2024-08-28T13:10:56.826201Z`", "value": "2024-08-28T13:10:56.826201Z"}
        "last_modified_by":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "XQUoKehtrJmJXQlNkcet"
          title: "pipeline previously modified by"
          description: "e.g. user_20 means pipeline was last modified by a user whose id is 20"
          examples:
            - {"summary": "last modified by user with user_id 12", "value": "user_12"}
        "last_modified_at":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "IMIFWXevKDwzfafPDGSR"
          title: "pipeline previously modified at"
          description: "when was the pipeline last modified"
          examples:
            - {"summary": "Pipeline was last run at `2024-10-29T13:11:44.926101Z`", "value": "2024-10-29T13:11:44.926101Z"}
        "state_changed_at":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "VYHXqfLmRzONkcgXhshZ"
          title: "pipeline state previously changed at"
          description: "when did the pipeline state change"
          examples:
            - {"summary": "Pipeline state got last changed at `2024-02-10T13:09:56.826201Z`", "value": "2024-02-10T13:09:56.826201Z"}
        "exports_execution_timestamp":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "OPIYHAvkufcuJfAlldPK"
          title: "pipeline exports execution timestamp"
          description: "when did any of the exports in the pipeline start/ finish"
          examples:
            - {"summary": "Pipeline exports execution started/finished at `2025-01-10T12:08:16.326301Z`", "value": "2025-01-10T12:08:16.326301Z"}
      type: "object"
      title: "PipelineStats"
      examples:
        - {"last_run_by": null, "last_run_at": "uAbLVwclZqwCQXliRkbh", "last_modified_by": "FNWBWIcNhDuzDJsvYDlB", "last_modified_at": "cNXyUbNbEdKKXCHiltQi", "state_changed_at": "YcZmKydOmfiOiFecPeQN", "exports_execution_timestamp": null}
    "PipelineTasksPaginated":
      properties:
        "limit":
          type: "integer"
          title: "Page size"
          description: "Setting limit would limit the items received in the page"
          default: 10
          examples:
            - {"summary": "Limit page size to 10", "value": 10}
        "offset":
          type: "integer"
          title: "Page offset"
          description: "First position to return from the results"
          default: 0
          examples:
            - {"summary": "Sets the first position to return from the results to 0", "value": 0}
        "next":
          type: "string"
          title: "Next url"
          description: "Url of the next page"
          examples:
            - {"summary": "Next url will retrieve results with limit 10 and offset 5", "value": "<url>?limit=10&offset=5"}
        "tasks":
          items: {"$ref": "#/components/schemas/ItemTaskInfo"}
          type: "array"
      type: "object"
      required:
        - "next"
        - "tasks"
      title: "PipelineTasksPaginated"
    "PlanList":
      properties:
        "available_plans":
          items: {"$ref": "#/components/schemas/PlansSchema"}
          type: "array"
      type: "object"
      required:
        - "available_plans"
      title: "PlanList"
    "PlanListResponseSchema":
      properties:
        "plans":
          items: {"$ref": "#/components/schemas/PlanSchema"}
          type: "array"
      type: "object"
      required:
        - "plans"
      title: "PlanListResponseSchema"
    "PlanResponseSchema":
      properties:
        "plan": {"$ref": "#/components/schemas/PlanSchema"}
        "message":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "plan"
      title: "PlanResponseSchema"
    "PlanSchema":
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "currency":
          type: "string"
        "monthly_price":
          oneOf:
            - type: "null"
            - type: "number"
        "annual_only":
          type: "boolean"
          description: "Indicates if the plan is annual-only."
          default: false
        "annual_price":
          oneOf:
            - type: "null"
            - type: "number"
        "storage_amount":
          type: "integer"
        "storage_block_size":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Block size for storage increments."
        "trial_days":
          oneOf:
            - type: "null"
            - type: "integer"
        "is_self_serve":
          type: "boolean"
        "max_storage":
          oneOf:
            - type: "null"
            - type: "integer"
        "max_users":
          oneOf:
            - type: "null"
            - type: "integer"
        "no_of_users":
          oneOf:
            - type: "null"
            - type: "integer"
        "seat_price":
          oneOf:
            - type: "null"
            - type: "integer"
        "number_of_tiers":
          type: "integer"
        "tiers":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/schema_StorageTierSchema"}
              type: "array"
        "connector_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "feature_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "stripe_product_id":
          oneOf:
            - type: "null"
            - type: "string"
        "stripe_monthly_price_id":
          oneOf:
            - type: "null"
            - type: "string"
        "stripe_annual_price_id":
          oneOf:
            - type: "null"
            - type: "string"
        "status":
          type: "string"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
        "subscription_count":
          type: "integer"
        "connector_profile":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/ConnectorProfileSchema"}
        "feature_profile":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/FeatureProfileSchema"}
      type: "object"
      required:
        - "currency"
        - "id"
        - "is_self_serve"
        - "name"
        - "number_of_tiers"
        - "status"
        - "storage_amount"
        - "subscription_count"
      title: "PlanSchema"
    "PlansSchema":
      properties:
        "id":
          type: "string"
          title: "ID"
          description: "ID of the plan"
          examples:
            - {"value": "internal"}
        "name":
          type: "string"
          title: "Name"
          description: "Name of the plan"
          examples:
            - {"value": "internal"}
      type: "object"
      required:
        - "id"
        - "name"
      title: "PlansSchema"
    "PostgresDateColumnFormat":
      properties:
        "postgres_date_format":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "StIPctkekxLASqbIPOaW"
          description: "Postgres Date Format"
          examples:
            - "%Y-%m-%d"
      type: "object"
      title: "PostgresDateColumnFormat"
      examples:
        - {"postgres_date_format": "gRtusfOAGOiFvcmdWodm"}
    "PreferencesPatchOp":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          maxLength: 50
          minLength: 1
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "global"
            - "global.self_serve"
            - "global.onboarding"
          maxLength: 50
          minLength: 1
          description: "Path"
          examples:
            - {"value": "global.self_serve"}
        "value":
          type: "object"
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "PreferencesPatchOp"
    "PreferencesPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/PreferencesPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "PreferencesPatchRequest"
      description: "Preferences Patch Request"
      examples:
        - {"patch": [{"op": "replace", "path": "global.self_serve", "value": {"onboarding_state": "registered"}}]}
        - {"patch": [{"op": "replace", "path": "global.onboarding", "value": {"DATAFLOW_SETTINGS": false}}]}
        - {"patch": [{"op": "replace", "path": "global", "value": {"SELF_SERVE": {"onboarding_state": "registered"}, "ONBOARDING": {"DATAFLOW_SETTINGS": true}}}]}
    "PreferencesSchema":
      properties:
        "GLOBAL": {"$ref": "#/components/schemas/GlobalSchema"}
      type: "object"
      required:
        - "GLOBAL"
      title: "PreferencesSchema"
    "ProfileGenerationParams":
      properties:
        "action":
          type: "string"
          enum:
            - "get_profile"
            - "regenerate_profile"
          description: "Specifies the action to perform: 'get_profile' to fetch existing profile or 'regenerate_profile' to re-run profiling."
      type: "object"
      required:
        - "action"
      title: "ProfileGenerationParams"
      description: "Encapsulated profile generation parameters"
    "ProfileGenerationSpec":
      properties:
        "params": {"$ref": "#/components/schemas/ProfileGenerationParams"}
      type: "object"
      required:
        - "params"
      title: "ProfileGenerationSpec"
      description: "Parameters required for profile generation"
      examples:
        - {"params": {"action": "get_profile"}}
    "ProjectBranchInBatchSource":
      properties:
        "dataview_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Dataview ID"
          examples:
            - 1
        "dataview_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataview Name"
          examples:
            - "dv1"
        "dataset_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Dataset Name"
          examples:
            - "ds1"
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
        "project_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Project Name"
          examples:
            - "project1"
      type: "object"
      title: "ProjectBranchInBatchSource"
    "ProjectColorUpdateOp":
      properties:
        "color":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Color of project"
          examples:
            - {"value": {"color": "#E3E5E8"}}
      type: "object"
      title: "ProjectColorUpdateOp"
    "ProjectCreate":
      properties:
        "name":
          type: "string"
          maxLength: 63
          minLength: 1
          description: "Name of project to be created"
          examples:
            - {"value": {"name": "My Project"}}
        "properties": {"$ref": "#/components/schemas/ProjectProperties"}
      type: "object"
      required:
        - "name"
        - "properties"
      title: "ProjectCreate"
      description: "Name of project to be created"
      examples:
        - {"name": "My Project", "properties": {"color": "#E3E5E8"}}
    "ProjectInviteSchema":
      properties:
        "project_id":
          type: "integer"
          title: "Project id"
          description: "Project id"
          examples:
            - {"summary": "Project id 1", "value": 1}
        "role":
          type: "string"
          enum:
            - "project_admin"
            - "project_analyst"
          title: "Role"
          description: "Project Role name"
          default: "project_analyst"
          examples:
            - {"summary": "Project role name", "value": "project_admin"}
      type: "object"
      required:
        - "project_id"
      title: "ProjectInviteSchema"
    "ProjectList":
      properties:
        "projects":
          items: {"$ref": "#/components/schemas/ProjectSchema"}
          type: "array"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/workspaces/4/projects?limit=50&offset=50"}
      type: "object"
      required:
        - "next"
        - "projects"
      title: "ProjectList"
    "ProjectPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/ProjectPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "ProjectPatch"
      description: "Rename project to 'My Project'"
      examples:
        - {"patches": [{"op": "replace", "path": "name", "value": {"name": "My Project"}}]}
    "ProjectPatchOp":
      properties:
        "op":
          type: "string"
          maxLength: 50
          minLength: 1
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "name"
            - "properties"
          maxLength: 50
          minLength: 1
          description: "Path"
          examples:
            - {"value": "name"}
        "value":
          oneOf:
            - type: "string"
            - {"$ref": "#/components/schemas/ProjectColorUpdateOp"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "ProjectPatchOp"
    "ProjectProperties":
      properties:
        "color":
          type: "string"
          description: "Color of project"
          default: "#EB661E"
          examples:
            - {"value": "#6C757C"}
      type: "object"
      title: "ProjectProperties"
      description: "Properties of project"
      examples:
        - {"value": {"color": "#E3E5E8"}}
    "ProjectSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "unique identifier representing project"
          examples:
            - {"value": 1}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 63
          minLength: 1
          description: "Name of project"
          examples:
            - {"value": "My Project"}
        "owner_workspace_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Parent Workspace id"
          examples:
            - {"value": 4}
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Time when last update to project has happened"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Time when project was created"
        "status":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Status of project"
          examples:
            - {"value": "active"}
        "properties":
          oneOf:
            - type: "null"
            - type: "object"
          description: "Properties of project"
          examples:
            - {"value": {"color": "#E3E5E8"}}
      type: "object"
      title: "ProjectContainer"
    "ProjectUserPatch":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/ProjectUserPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "ProjectUserPatch"
      description: "Add user to a project"
      examples:
        - {"patch": [{"op": "replace", "path": "permissions", "value": "project_admin"}]}
        - {"patch": [{"op": "replace", "path": "permissions", "value": "project_analyst"}]}
    "ProjectUserPatchOp":
      properties:
        "op":
          type: "string"
          const: "replace"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          const: "permissions"
          description: "Path"
          examples:
            - {"value": "permissions"}
        "value":
          type: "string"
          enum:
            - "project_admin"
            - "project_analyst"
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "ProjectUserPatchOp"
    "ProjectsPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/ProjectsPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "ProjectsPatch"
      description: "Add users to a projects/Remove users from projects/Update user roles in projects"
      examples:
        - {"patches": [{"op": "add", "path": "role", "value": [{"project_id": 4, "user_roles": [{"user_id": 3, "role": "project_admin"}, {"user_id": 4, "role": "project_admin"}], "invite_roles": [{"invite_id": 3, "role": "project_admin"}]}]}]}
        - {"patches": [{"op": "replace", "path": "role", "value": [{"project_id": 4, "user_roles": [{"invite_id": 4, "role": "project_admin"}], "invite_roles": [{"invite_id": 3, "role": "project_admin"}]}]}]}
        - {"patches": [{"op": "remove", "path": "role", "value": [{"project_id": 4, "user_ids": [2, 4], "invite_ids": [3]}]}]}
    "ProjectsPatchOp":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "add"
            - "remove"
          maxLength: 50
          minLength: 1
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "role"
          maxLength: 50
          minLength: 1
          description: "Path"
          examples:
            - {"value": "role"}
        "value":
          items: {"$ref": "#/components/schemas/UsersToProjectsPatch"}
          type: "array"
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "ProjectsPatchOp"
    "QueryConfig":
      properties:
        "table":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "eLMlctPaUtIKRbeAxumk"
          description: "Table Name"
          examples:
            - "Test"
        "query":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "WoifvrLAMrnZgWSqJgyS"
          description: "Query"
          examples:
            - "SELECT id, name from Orders"
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "zvFwbFtrpMswOLdkrBiO"
          description: "Profile"
          examples:
            - "test_schema"
      type: "object"
      title: "QueryConfig"
      examples:
        - {"table": "UJRXwxjpgaspZfwNGKiR", "query": null, "profile": null}
    "QueryGenerationStatus":
      properties:
        "cache_exists":
          type: "boolean"
        "cache_being_created":
          type: "boolean"
      type: "object"
      required:
        - "cache_being_created"
        - "cache_exists"
      title: "QueryGenerationStatus"
    "RecurrenceInfo":
      properties:
        "interval":
          type: "integer"
          description: "Interval"
          examples:
            - {"summary": "Sample interval", "value": 1}
        "frequency":
          type:
            - "string"
            - "null"
          enum:
            - "minutely"
            - "hourly"
            - "daily"
            - "weekly"
            - "monthly"
            - "yearly"
            - null
          description: "Frequency"
          examples:
            - {"summary": "Sample frequency", "value": "daily"}
        "start_at":
          type: "string"
          format: "date-time"
          description: "Start At"
          examples:
            - {"summary": "Sample start date", "value": "2021-01-01"}
        "until":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          description: "Until"
          examples:
            - {"summary": "Sample until date", "value": "2021-01-01"}
        "by_month_day":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          description: "By Month Day"
          examples:
            - {"summary": "Sample month day", "value": [1]}
        "by_week_day":
          oneOf:
            - type: "null"
            - items:
                type: "string"
                enum:
                  - "mo"
                  - "tu"
                  - "we"
                  - "th"
                  - "fr"
                  - "sa"
                  - "su"
              type: "array"
          description: "By Week Day"
          examples:
            - {"summary": "Sample week day", "value": ["mo"]}
      type: "object"
      required:
        - "interval"
        - "start_at"
      title: "RecurrenceInfo"
    "RecurrenceScheduleFields":
      properties:
        "start":
          type: "string"
          format: "date-time"
          title: "start"
          description: "start time of the schedule"
          examples:
            - {"summary": "Sample start time", "value": "2020-08-06 10:56:20Z"}
        "frequency":
          oneOf:
            - type: "null"
            - type: "string"
          title: "frequency"
          description: "frequency"
          examples:
            - {"summary": "Sample frequency", "value": "yearly"}
        "interval":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "interval"
          description: "interval"
          examples:
            - {"summary": "Sample interval", "value": 1}
        "until":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "until"
          description: "until"
          examples:
            - {"summary": "Sample until time", "value": "2025-08-06 10:56:20Z"}
        "count":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "count"
          description: "count"
          examples:
            - {"summary": "Sample count", "value": 3}
        "by_week_day":
          oneOf:
            - type: "null"
            - type: "array"
          title: "By week day"
          description: "By week day"
          examples:
            - {"summary": "Sample week day", "value": ["MO"]}
        "by_month_day":
          oneOf:
            - type: "null"
            - type: "array"
          title: "By month day"
          description: "By month day"
          examples:
            - {"summary": "Sample month day", "value": [5]}
        "last_checked_occurrence":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last checked occurrence"
          description: "Last checked occurrence"
          examples:
            - {"summary": "Sample last_checked_occurrence", "value": "2020-08-07 11:46:46.094451Z"}
        "next_occurrence":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Next occurrence"
          description: "Next occurrence"
          examples:
            - {"summary": "Sample next_occurrence", "value": "2020-08-07 12:46:46.094451Z"}
      type: "object"
      required:
        - "start"
      title: "RecurrenceScheduleFields"
    "RegisterPatchValueSchema":
      properties:
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "verified":
          type: "boolean"
          title: "Verified"
          description: "Verified status of the user to be updated"
          examples:
            - {"summary": "Is registered user verified", "value": false}
        "is_registration":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Is registrations"
          description: "Is patch request from registration"
          examples:
            - {"value": false}
      type: "object"
      required:
        - "email"
        - "verified"
      title: "RegisterPatchValueSchema"
    "RegisterResponseSchema":
      properties:
        "user_id":
          type: "integer"
          title: "User ID"
          description: "ID of the user"
          examples:
            - {"summary": "Registered user id", "value": 2}
        "verified":
          type: "boolean"
          title: "Verified"
          description: "Verified status of the user"
          examples:
            - {"summary": "Is user verified", "value": false}
      type: "object"
      required:
        - "user_id"
        - "verified"
      title: "RegisterResponseSchema"
    "RegisterUserPatchSchema":
      properties:
        "op":
          type: "string"
          title: "Operation"
          description: "Operation to be performed on the user"
          examples:
            - {"summary": "Sample Operation", "value": "replace"}
        "path":
          type: "string"
          title: "Path"
          description: "Path of the user"
          examples:
            - {"summary": "Sample Path", "value": "verified"}
        "value":
          oneOf:
            - {"$ref": "#/components/schemas/RegisterPatchValueSchema"}
            - type: "string"
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "RegisterUserPatchSchema"
    "RegisterUserPatches":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/RegisterUserPatchSchema"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "RegisterUserPatches"
      description: "Details of the user to be updated"
      examples:
        - {"patch": [{"op": "replace", "path": "verified", "value": {"email": "johnsmith@exmaple.io", "verified": true}}]}
    "RegisterUserPostSchema":
      properties:
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "first_name":
          type: "string"
          title: "First Name"
          description: "First Name of the user to register"
          examples:
            - "Sample First Name"
        "last_name":
          type: "string"
          title: "Last Name"
          description: "Last Name of the user to register"
          examples:
            - "Sample Last Name"
        "verified":
          type: "boolean"
          title: "Verified"
          description: "Verified status of the user"
          examples:
            - false
        "is_registration":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Is registration"
          description: "Is post request from registration"
          examples:
            - {"value": false}
      type: "object"
      required:
        - "email"
        - "first_name"
        - "last_name"
        - "verified"
      title: "RegisterUserPostSchema"
      description: "Details of the user to be registered"
      examples:
        - {"first_name": "John", "last_name": "Smith", "email": "johnsmith@exmaple.io", "verified": false}
    "RenameColumns":
      properties:
        "c_id":
          type: "string"
          description: "Column id"
          examples:
            - {"value": "column_3"}
        "c_name":
          type: "string"
          description: "Column Type"
          examples:
            - {"value": "new_col_name"}
      type: "object"
      required:
        - "c_id"
        - "c_name"
      title: "RenameColumns"
    "ReportList":
      properties:
        "reports":
          items: {"$ref": "#/components/schemas/ReportSchema"}
          type: "array"
          description: "List of reports"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/reports?limit=50&offset=50"}
      type: "object"
      required:
        - "next"
        - "reports"
      title: "ReportList"
    "ReportSchema":
      properties:
        "resource_name":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Name of the resource"
          examples:
            - "Report of McDonalds-Menu.csv - View 1"
        "owner_workspace_id":
          type: "integer"
          description: "ID of the workspace that owns the report"
          examples:
            - 4
        "shared_lock_counter":
          type: "integer"
          description: "Counter for shared locks on the report"
          examples:
            - 0
        "exclusive_lock_flag":
          type: "boolean"
          description: "Flag indicating if the report is exclusively locked"
          examples:
            - false
        "resource_id":
          type: "integer"
          description: "Unique identifier for the report resource"
          examples:
            - 4
        "parent_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of the parent resource, if applicable"
          examples:
            - null
        "ordering":
          type: "integer"
          description: "Ordering index for the report"
          examples:
            - 0
        "resource_type":
          type: "string"
          description: "Type of the resource, e.g., 'report'"
          examples:
            - "report"
        "owner_group_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of the group that owns the report, if applicable"
          examples:
            - null
        "owner_user_id":
          type: "integer"
          description: "ID of the user who owns the report"
          examples:
            - 5
        "id":
          type: "integer"
          description: "Unique identifier for the report"
          examples:
            - 1
        "name":
          type: "string"
          description: "Name of the report"
          examples:
            - "Report of McDonalds-Menu.csv - View 1"
        "sync_type":
          type: "string"
          description: "Synchronization type of the report, e.g., 'MANUAL'"
          examples:
            - "MANUAL"
        "status":
          type: "string"
          description: "Current status of the report, e.g., 'ready'"
          examples:
            - "ready"
        "published_status":
          type: "boolean"
          description: "Indicates if the report is published"
          examples:
            - false
        "users_emails":
          items:
            type: "string"
          type: "array"
          description: "List of emails associated with users who can access this report"
          examples:
            - []
        "message":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Message to be sent when a report is shared with other users"
          examples:
            - "This is a sample report message."
        "last_updated_at":
          type: "string"
          description: "Timestamp of the last update to the report"
          examples:
            - "2025-06-23T06:53:09.756233Z"
        "created_at":
          type: "string"
          description: "Timestamp when the report was created"
          examples:
            - "2025-06-23T06:42:49.883578Z"
        "last_synced_at":
          type: "string"
          description: "Timestamp of the last synchronization of the report"
          examples:
            - "2025-06-23T06:53:09.756233Z"
        "owner_profile_link":
          oneOf:
            - type: "null"
            - type: "string"
              default: ""
          description: "Link to the profile of the user who created the report"
          default: ""
        "owner_name":
          type: "string"
          description: "Name of the user who created the report"
          default: ""
          examples:
            - "John Doe"
      type: "object"
      required:
        - "created_at"
        - "exclusive_lock_flag"
        - "id"
        - "last_synced_at"
        - "last_updated_at"
        - "name"
        - "ordering"
        - "owner_user_id"
        - "owner_workspace_id"
        - "published_status"
        - "resource_id"
        - "resource_type"
        - "shared_lock_counter"
        - "status"
        - "sync_type"
        - "users_emails"
      title: "ReportSchema"
    "ResourceStatusResponse":
      properties:
        "status":
          type: "object"
          description: "Status information for each resource"
          examples:
            - {"value": {"(1, 'dataview')": {"pipeline": {"status": "executing"}, "triggers": {"123": {"status": "waiting_for_lock"}}}, "(1, 'datasource')": {"status": "waiting_for_worker"}}}
      type: "object"
      required:
        - "status"
      title: "ResourceStatusResponse"
    "ResponseJobSchema":
      properties:
        "id":
          type: "integer"
        "status":
          type: "string"
          enum:
            - "success"
            - "failure"
            - "processing"
        "response":
          type: "object"
        "last_updated_at":
          type: "string"
          format: "date-time"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
        "path":
          oneOf:
            - type: "null"
            - type: "string"
        "operation":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      required:
        - "id"
        - "last_updated_at"
        - "response"
        - "status"
      title: "ResponseJobSchema"
    "RruleInfo":
      properties:
        "interval":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 488
          description: "Interval"
          examples:
            - 1
        "frequency":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "pZuLgtARQOKbMlYUxGSo"
          description: "Frequency"
          examples:
            - "daily"
        "start_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2014-02-12T17:47:07.206999"
          description: "Start At"
          examples:
            - "2024-02-07T14:46:41.532945Z"
        "until":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
              examples:
                - "2009-06-23T14:20:25.828360"
          description: "Until"
          examples:
            - "2023-02-04T14:46:41.532945Z"
        "by_month_day":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
                examples:
                  - 9616
              type: "array"
              examples:
                - [7906]
          description: "By Month Day"
          examples:
            - 1
        "by_week_day":
          oneOf:
            - type: "null"
            - items:
                type: "string"
                examples:
                  - "ZnrsKKehjkHSZqNaqMLY"
              type: "array"
              examples:
                - ["YOSmGXMYlzwuLqkWimfy"]
          description: "By Week Day"
          examples:
            - "mo"
      type: "object"
      title: "RruleInfo"
      examples:
        - {"interval": 9599, "frequency": "nlHWxjNCpSkyJGsvORKJ", "start_at": null, "until": "1995-09-17T04:37:09.497821", "by_month_day": null, "by_week_day": ["pHHOpiLIJUMvXXxXXsRJ"]}
    "RruleSchema":
      properties:
        "interval":
          type: "integer"
          title: "interval"
          description: "interval"
          examples:
            - {"summary": "Sample rrule interval", "value": 5}
        "frequency":
          type: "string"
          enum:
            - "minutely"
            - "hourly"
            - "daily"
            - "weekly"
            - "monthly"
            - "yearly"
          title: "frequency"
          description: "frequency"
          examples:
            - {"summary": "Sample rrule frequency", "value": "minutely"}
        "start":
          type: "string"
          format: "date-time"
          title: "start"
          description: "start"
          examples:
            - {"summary": "Sample rrule start time", "value": "2024-05-30 06:27:52"}
        "by_week_day":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          title: "by_week_day"
          description: "by_week_day"
          examples:
            - {"summary": "Sample by_week_day", "value": ["MO"]}
        "by_month_day":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "by_month_day"
          description: "by_month_day"
          examples:
            - {"summary": "Sample by_month_day", "value": [4]}
      type: "object"
      required:
        - "frequency"
        - "interval"
        - "start"
      title: "RruleSchema"
    "SQLGenerationParams":
      properties:
        "sequence_number":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Sequence Number"
          description: "The sequence order in the pipeline"
        "intent":
          type: "string"
          title: "Intent"
          description: "The user's intent for SQL generation"
      type: "object"
      required:
        - "intent"
      title: "SQLGenerationParams"
      description: "Encapsulated SQL generation parameters"
    "SQLGenerationSpec":
      properties:
        "params": {"$ref": "#/components/schemas/SQLGenerationParams"}
      type: "object"
      required:
        - "params"
      title: "SQLGenerationSpec"
      description: "Parameters required for intent-based SQL generation"
      examples:
        - {"params": {"sequence_number": 1, "intent": "Get all customers who made purchases in the last month"}}
    "ScheduleDetails":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 4737
          description: "Schedule ID"
          examples:
            - 1
        "rrule":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/RruleInfo"}
          description: "Rrule"
          examples:
            - {"interval": 4351, "frequency": "nNzLcpnZARNBhMvCMLlW", "start_at": null, "until": "2018-02-11T22:50:24.504614", "by_month_day": null, "by_week_day": null}
        "job":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "ngATYxBqBRemkodGzBBm"
          description: "Job"
          examples:
            - "datapull"
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "idle"
            - "queued"
            - "running"
            - "failed"
            - "paused"
            - "unknown"
            - null
          description: "Status"
          examples:
            - "paused"
        "job_status":
          type:
            - "string"
            - "null"
          enum:
            - "success"
            - "warning"
            - "error"
            - null
          description: "Job Status"
          examples:
            - "success"
        "refresh_schedule":
          type:
            - "string"
            - "null"
          enum:
            - "manual"
            - "auto"
            - null
          description: "Refresh Schedule"
          examples:
            - "daily"
        "next_data_pull":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "RtKejredrkvlSscKHSZX"
          description: "Next Data Pull"
          examples:
            - "2024-03-04T14:46:41.532945Z"
        "last_datapull":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "vcXcsVLXNmJvHpFkFxEk"
          description: "Last Datapull"
          examples:
            - "2024-02-04T16:46:41.532945Z"
        "warning_reason":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "akLFWPCLfKjyvESLvzap"
          description: "Warning Reason"
          examples:
            - "No new data received in the last pull"
      type: "object"
      title: "ScheduleDetails"
      examples:
        - {"id": 5804, "rrule": {"interval": 8968, "frequency": "MWuXNEZGZyiMfrsAUcGt", "start_at": "2025-03-05T08:42:38.675812", "until": null, "by_month_day": [8628], "by_week_day": null}, "job": null, "status": null, "job_status": "success", "refresh_schedule": null, "next_data_pull": "GUyVKUOYbUprQdxuEBUF", "last_datapull": null, "warning_reason": "YCCnEjmaiSNVMFvVytsl"}
    "SchedulePatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "add"
            - "remove"
          title: "op"
          description: "op"
          examples:
            - {"summary": "Sample op", "value": "replace"}
        "path":
          type: "string"
          enum:
            - "rrule"
            - "task"
            - "args"
            - "status"
          title: "path"
          description: "path"
          examples:
            - {"summary": "Sample path", "value": "schedule"}
        "value":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/SchedulePatchSchema"}
            - type: "string"
              enum:
                - "pause"
                - "resume"
      type: "object"
      required:
        - "op"
        - "path"
      title: "SchedulePatchData"
    "SchedulePatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/SchedulePatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "SchedulePatchRequest"
      description: "Details of a schedule to be updated"
      examples:
        - {"patch": [{"op": "replace", "path": "rrule", "value": {"rrule": {"interval": 1, "frequency": "daily", "start": "2025-08-28T18:02:40.193952", "by_month_day": [], "by_week_day": []}, "work_items": [{"name": "pull_cloud_data", "execution_params": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "replace"}}]}}, {"op": "add", "path": "task", "value": {"work_items": [{"name": "pull_cloud_data", "execution_params": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "replace"}}]}}, {"op": "replace", "path": "status", "value": "IDLE"}]}
    "SchedulePatchSchema":
      properties:
        "rrule":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/RruleSchema"}
        "work_items":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/WorkItemSchema"}
              type: "array"
      type: "object"
      title: "SchedulePatchSchema"
    "SchedulePostRequestSchema":
      properties:
        "rrule": {"$ref": "#/components/schemas/RruleSchema"}
        "work_items":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/WorkItemSchema"}
              type: "array"
      type: "object"
      required:
        - "rrule"
      title: "SchedulePostRequestSchema"
      description: "Details of a schedule to be created"
      examples:
        - {"rrule": {"interval": 5, "frequency": "minutely", "start": "2025-08-28T23:32:40.194132", "by_month_day": [], "by_week_day": []}, "work_items": [{"name": "pull_cloud_data", "execution_params": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "replace"}, "args": [2586]}]}
        - {"rrule": {"interval": 5, "frequency": "minutely", "start": "2025-08-28T23:32:40.194139", "by_month_day": [], "by_week_day": []}}
        - {"rrule": {"interval": 5, "frequency": "minutely", "start": "2025-08-28T23:32:40.194142", "by_month_day": [], "by_week_day": []}, "work_items": [{"name": "pull_cloud_data"}, {"task_name": "rerun_dataviwes"}]}
        - {"rrule": {"interval": 5, "frequency": "minutely", "start": "2024-05-30 06:27:52", "by_month_day": [], "by_week_day": []}, "work_items": [{"name": "pull_cloud_data", "execution_params": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "replace"}, "args": [123, 2586]}, {"task_name": "rerun_dataviwe", "execution_params": {"first_rerun_at": "now", "skip_actions": true}, "args": [123, 2586]}]}
    "ScheduleProperties":
      properties:
        "schedule_type":
          type: "string"
          enum:
            - "moment"
            - "period"
          description: "Schedule Type"
          examples:
            - {"summary": "Sample schedule type", "value": "daily"}
        "first_pull_at":
          type: "string"
          enum:
            - "now"
            - "later"
          description: "First Pull At"
          examples:
            - {"summary": "Sample first pull date", "value": "2021-01-01"}
        "on_refresh_action":
          type: "string"
          enum:
            - "replace"
            - "combine"
          description: "On Refresh Action"
          examples:
            - {"summary": "Sample refresh action", "value": "replace"}
        "unique_sequence_column":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/UniqueSequenceColumn"}
          description: "Unique Sequence Column Name"
          examples:
            - {"summary": "Sample column name", "value": "RecordID"}
      type: "object"
      required:
        - "first_pull_at"
        - "on_refresh_action"
        - "schedule_type"
      title: "ScheduleProperties"
    "ScheduleSchemaFields":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "id"
          description: "id"
          examples:
            - {"summary": "1", "value": 1}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "created_at"
          description: "created_at"
          examples:
            - {"summary": "Sample created_at", "value": "2020-11-07 10:46:46.094451Z"}
        "last_run":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "last_run"
          description: "last_run"
          examples:
            - {"summary": "Sample last_run", "value": "2020-08-07 10:46:46.094451Z"}
        "status":
          oneOf:
            - type: "null"
            - type: "string"
          title: "status"
          description: "status"
          examples:
            - {"summary": "Sample status", "value": "idle"}
        "task_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "task_name"
          description: "task_name"
          examples:
            - {"summary": "Sample task_name", "value": "pull_cloud_data"}
        "attached_resources":
          oneOf:
            - type: "null"
            - type: "array"
          title: "attached_resources"
          description: "attached_resources"
          examples:
            - {"summary": "Sample attached_resources", "value": [{"id": 2, "type": "dataset"}]}
        "rrule":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/RecurrenceScheduleFields"}
      type: "object"
      title: "ScheduleSchemaFields"
    "SchemaSettings":
      properties:
        "data_addition_mode":
          type: "string"
          enum:
            - "replace"
            - "combine"
          title: "Data Addition Mode"
          description: "Data Addition Mode"
          default: "replace"
          examples:
            - {"summary": "Sample Data Addition Mode", "value": "replace"}
        "strict_data_type_check":
          type: "boolean"
          title: "Strict Data Type Check"
          description: "Strict Data Type Check"
          default: false
          examples:
            - {"summary": "Sample Strict Data Type Check", "value": true}
        "strict_column_length_check":
          type: "boolean"
          title: "Strict Column Check"
          description: "Maintain strict number of columns"
          default: false
          examples:
            - {"summary": "Sample Strict Column Length Check", "value": true}
        "convert_columns_to_text":
          type: "boolean"
          title: "Convert Columns to Text"
          description: "Convert Columns to Text"
          default: false
          examples:
            - {"summary": "Sample Convert Columns to Text", "value": true}
        "convert_incompatible_data_to_null":
          type: "boolean"
          title: "Convert Incompatible Data to Null"
          description: "Convert Incompatible Data to Null"
          default: false
          examples:
            - {"summary": "Sample Convert Incompatible Data to Null", "value": true}
        "delete_after_append":
          type: "boolean"
          title: "Delete After Append"
          description: "Delete After Append"
          default: true
          examples:
            - {"summary": "Sample Delete After Append", "value": true}
        "match_existing_target_schema":
          type: "boolean"
          title: "Match existing target schema"
          description: "Match existing target schema"
          default: true
          examples:
            - {"summary": "Sample Match existing target schema", "value": true}
        "schema_mapping":
          additionalProperties:
            items:
              type: "string"
            type: "array"
          type: "object"
          title: "Schema Mapping"
          description: "Schema Mapping"
          examples:
            - {"summary": "Sample Schema Mapping", "value": {"col A": ["col B", "col C"], "col2": ["col4"], "col5": ["col7"]}}
      type: "object"
      required:
        - "schema_mapping"
      title: "SchemaSettings"
    "SegmentPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "add"
            - "remove"
          title: "Operation"
          description: "Operation to be performed on the segment"
          examples:
            - {"summary": "Sample Operation", "value": "add"}
        "path":
          type: "string"
          const: "segments"
          title: "Path"
          description: "Path of the patch request"
          examples:
            - {"summary": "Sample Path", "value": "segments"}
        "value":
          type: "string"
          title: "Value"
          description: "Value of the patch request"
          examples:
            - {"summary": "Sample Segment Name", "value": "segment_name"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "SegmentPatchData"
    "SegmentsPatch":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/SegmentPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "SegmentsPatch"
      description: "Update segments with workspace Id"
      examples:
        - {"patch": [{"op": "add", "path": "segments", "value": "Beta"}]}
    "SegmentsResponseSchema":
      properties:
        "segments":
          additionalProperties: {"$ref": "#/components/schemas/split_segments_schema_FeatureSchema"}
          type: "object"
          title: "Segments"
          description: "A dictionary where keys are segment names and values are lists of feature names."
          examples:
            - {"summary": "Sample Segments Response", "value": {"Alpha": {"features": [{"name": "aiConditionBuilder", "description": "Use AI to create a condition on condition builder"}], "status": true}, "Beta": {"features": [{"name": "aiConditionBuilder", "description": "Use AI to create a condition on condition builder"}], "status": false}}}
      type: "object"
      required:
        - "segments"
      title: "SegmentsResponseSchema"
    "SelfFieldSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - 1
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          title: "Email"
          description: "Email of the user"
          examples:
            - "johncon@comer.org"
        "first_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "First Name"
          description: "First name of the user"
          examples:
            - "John"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At"
          description: "Last updated at"
          examples:
            - "2021-06-01T00:00:00Z"
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Conner"
          examples:
            - "Conner"
        "last_login_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last login date"
          description: "Last login date"
          examples:
            - "2021-03-01T00:00:00Z"
        "last_app_activity_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last app activity at"
          description: "Last app activity at"
          examples:
            - "2021-01-01T00:00:00Z"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created at"
          description: "Created at"
          examples:
            - "2021-01-01T00:00:00Z"
        "last_login_from_ip":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Last login from IP"
          description: "Last login from IP"
          examples:
            - "34.234.434.23"
        "profile_link":
          oneOf:
            - type: "null"
            - type: "string"
              format: "url"
          title: "Profile link"
          description: "Profile link"
          examples:
            - "https://example.com/profile"
        "user_roles":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "object"
              type: "object"
          title: "User roles on workspaces and projects"
          description: "User roles on workspaces and projects"
          examples:
            - {"summary": {"projects": {"2": "project_admin", "4": "project_admin"}, "workspaces": {"3": "workspace_member", "4": "workspace_owner"}}, "value": "{}"}
        "mfa_enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
          title: "Is MFA enabled"
          description: "Is MFA enabled"
          examples:
            - {"summary": true, "value": true}
        "workspaces":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Workspaces"
          description: "Workspaces"
          examples:
            - {"summary": "Sample Workspaces", "value": "[]"}
        "projects":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Projects"
          description: "Projects"
          examples:
            - {"summary": "Sample Projects", "value": "[]"}
      type: "object"
      title: "SelfFieldSchema"
    "SelfPatch":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/SelfPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "SelfPatch"
      description: "Update/change user roles in the workspace"
      examples:
        - {"patch": [{"op": "replace", "path": "first_name", "value": "John"}, {"op": "replace", "path": "last_name", "value": "Cena"}, {"op": "replace", "path": "password", "value": {"old_password": "<old-password>", "new_password": "<new-password>", "totp": "<otp-if-2fa-enabled>"}}, {"op": "add", "path": "mfa", "value": ""}, {"op": "remove", "path": "mfa", "value": ""}]}
    "SelfPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "add"
            - "remove"
          title: "Operation"
          description: "Operation to be performed on the user"
          examples:
            - {"summary": "Sample Operation", "value": "replace"}
        "path":
          type: "string"
          enum:
            - "first_name"
            - "last_name"
            - "password"
            - "mfa"
          title: "Path"
          description: "Path of the patch request"
          examples:
            - {"summary": "Sample Path", "value": "name"}
        "value":
          oneOf:
            - type: "null"
            - type: "string"
            - type: "object"
          title: "Value"
          description: "Value of the patch request"
          examples:
            - {"summary": "Sample str value", "value": "Adom"}
            - {"summary": "Sample dict value", "value": {"old_password": "<old-password>", "new_password": "<new-password>", "totp": "<otp-if-mfa-enabled>"}}
      type: "object"
      required:
        - "op"
        - "path"
      title: "SelfPatchData"
    "SelfServeSchema":
      properties:
        "onboarding_state":
          type: "string"
          minLength: 1
          description: "Onboarding State"
          examples:
            - {"value": "registered"}
      type: "object"
      required:
        - "onboarding_state"
      title: "SelfServeSchema"
    "SheetInfo":
      properties:
        "sheet_name":
          type: "string"
          minLength: 1
          title: "Sheet Name"
          description: "Sheet Name"
          examples:
            - {"value": "Sheet1"}
        "num_rows":
          type: "integer"
          title: "Sheet rows"
          description: "Number of rows in a sheet"
          examples:
            - {"value": 5}
        "num_cols":
          type: "integer"
          title: "Sheet columns"
          description: "Number of columns in a sheet"
          examples:
            - {"value": 2}
      type: "object"
      required:
        - "num_cols"
        - "num_rows"
        - "sheet_name"
      title: "SheetInfo"
    "ShopifyCustomer":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "ID of the customer"
          examples:
            - {"value": 191267}
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "phone":
          oneOf:
            - type: "null"
            - type: "string"
          minLength: 7
          description: "Phone number of the customer"
          examples:
            - {"value": "555-625-1189"}
      type: "object"
      required:
        - "email"
      title: "ShopifyCustomer"
    "ShopifyCustomerRedactRequest":
      properties:
        "shop_id":
          type: "integer"
          description: "Shop Id"
          examples:
            - {"value": 113}
        "shop_domain":
          type: "string"
          description: "Shop Domain"
          examples:
            - {"value": "shop3.myshopify.com"}
        "customer": {"$ref": "#/components/schemas/ShopifyCustomer"}
        "orders_to_redact":
          items:
            type: "integer"
          type: "array"
          description: "List of orders to redact"
          examples:
            - {"value": [299938, 280263]}
      type: "object"
      required:
        - "customer"
        - "orders_to_redact"
        - "shop_domain"
        - "shop_id"
      title: "ShopifyCustomerRedactRequest"
      description: "Shopify customer redact details"
      examples:
        - {"shop_id": 954589, "shop_domain": "shop.myshopify.com", "customer": {"id": 191167, "email": "keven@example.com", "phone": "555-625-1199"}, "orders_to_redact": [299938, 225458]}
    "ShopifyCustomerRedactResponse":
      properties:
        "message":
          type: "string"
          description: "Message"
          examples:
            - {"value": "Requested data has been deleted successfully."}
      type: "object"
      required:
        - "message"
      title: "ShopifyCustomerRedactResponse"
    "ShopifyDataRequest":
      properties:
        "shop_id":
          type: "integer"
          description: "Shop Id"
          examples:
            - {"value": 113}
        "shop_domain":
          type: "string"
          description: "Shop Domain"
          examples:
            - {"value": "shop3.myshopify.com"}
        "orders_requested":
          items:
            type: "integer"
          type: "array"
          description: "List of orders requested"
          examples:
            - {"value": [311]}
        "customer": {"$ref": "#/components/schemas/ShopifyCustomer"}
        "data_request": {"$ref": "#/components/schemas/ShopifyDataRequestSchema"}
      type: "object"
      required:
        - "customer"
        - "data_request"
        - "orders_requested"
        - "shop_domain"
        - "shop_id"
      title: "ShopifyDataRequest"
      description: "Shopify data request details"
      examples:
        - {"shop_id": 954888, "shop_domain": "testshop.myshopify.com", "orders_requested": [280263, 220458], "customer": {"id": 191167, "email": "john@example.com", "phone": "555-625-1199"}, "data_request": {"id": 9999}}
    "ShopifyDataRequestResponse":
      properties:
        "requested_data":
          type: "object"
      type: "object"
      required:
        - "requested_data"
      title: "ShopifyDataRequestResponse"
    "ShopifyDataRequestSchema":
      properties:
        "id":
          type: "integer"
          description: "ID of the data request"
          examples:
            - {"value": 9999}
      type: "object"
      required:
        - "id"
      title: "ShopifyDataRequestSchema"
    "ShopifyShopRedactRequest":
      properties:
        "shop_id":
          type: "integer"
          description: "Shop Id"
          examples:
            - {"value": 113}
        "shop_domain":
          type: "string"
          description: "Shop Domain"
          examples:
            - {"value": "shop3.myshopify.com"}
      type: "object"
      required:
        - "shop_domain"
        - "shop_id"
      title: "ShopifyShopRedactRequest"
      description: "Shopify shop redact details"
      examples:
        - {"shop_id": 959889, "shop_domain": "test.myshopify.com"}
    "ShopifyShopRedactResponse":
      properties:
        "message":
          type: "string"
          description: "Message"
          examples:
            - {"value": "Requested data"}
      type: "object"
      required:
        - "message"
      title: "ShopifyShopRedactResponse"
    "SketchSource":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details":
          type: "object"
          description: "Details of the sketch ds source"
          examples:
            - {}
      type: "object"
      required:
        - "details"
      title: "SketchSource"
      examples:
        - {"type": "append", "details": {"whether": "kyMQllIPyLyImnGdFpnz", "feel": "csUiXpEDCSMEDSZUHSBY", "high": "95637.180374815603185312840383467616848339145984834773104922027767074336632313508395", "speech": "1988-09-04T18:01:31.660782", "guy": -3.98680724690898, "important": -393623.40387103, "will": "605856127894672327291045644414012249182867192529874947943696005981075555059671790.26519750306662925028544964032054854", "at": "zKmeZcdzGNBmTVYaWZfR", "indicate": "https://www.smith-edwards.net/blog/listterms.html", "unit": "gfdovbcHFdaNiGJXojfs", "prevent": "hnxLJMTUdQoeLlHymsOe"}}
    "SpecSchema":
      properties:
        "auth_url":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Auth URL"
          description: "URL for authentication"
          examples:
            - {"summary": "Sample Auth URL", "value": "https://accounts.google.com/o/oauth2?response_type=code&client_id=1234567890&redirect_uri=https://omail.com&scope=omail"}
        "scope":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Scope"
          description: "List of scopes as string"
          examples:
            - {"summary": "Sample Scopes", "value": ["AllSites.Manage offline_access"]}
      type: "object"
      title: "SpecSchema"
    "Stats":
      properties:
        "row_count":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 1045
          description: "Row Count"
          examples:
            - 100
        "column_count":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 6367
          description: "Column Count"
          examples:
            - 10
        "batch_count":
          type: "integer"
          description: "Batch Count"
          examples:
            - 1
        "size":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "LwBgveqgImUibwOKCajt"
            - type: "integer"
              examples:
                - 1535
          description: "Size"
          examples:
            - 1000
      type: "object"
      required:
        - "batch_count"
      title: "Stats"
      examples:
        - {"row_count": null, "column_count": 3, "batch_count": 1, "size": null}
    "StatusInfo":
      properties:
        "extracting":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Extracting info"
          description: "Status extracting info"
          examples:
            - {"value": "requires_password"}
        "extracted":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Extracted info"
          description: "Status extracted info"
          examples:
            - {"value": "requires_password"}
        "action_needed":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Action Needed info"
          description: "Status action needed info"
          examples:
            - {"value": "requires_password"}
        "processing":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Processing info"
          description: "Status processing info"
          examples:
            - {"value": "requires_password"}
        "processed":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Processed info"
          description: "Status processed info"
          examples:
            - {"value": "requires_password"}
        "error":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Error info"
          description: "Status error info"
          examples:
            - {"value": "requires_password"}
        "is_hidden":
          type: "boolean"
          title: "Is Hidden"
          description: "Is Hidden"
          default: false
          examples:
            - {"value": false}
        "is_empty":
          type: "boolean"
          title: "Is Empty"
          description: "Is Empty"
          default: false
          examples:
            - {"value": false}
      type: "object"
      title: "StatusInfo"
      description: "Status Info of the file"
      examples:
        - {"value": {"action_needed": "requires_password", "is_hidden": false, "is_empty": false}}
    "StripeSubscriptionSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "string"
        "object":
          oneOf:
            - type: "null"
            - type: "string"
        "status":
          oneOf:
            - type: "null"
            - type: "string"
        "created":
          oneOf:
            - type: "null"
            - type: "integer"
        "current_period_start":
          oneOf:
            - type: "null"
            - type: "integer"
        "current_period_end":
          oneOf:
            - type: "null"
            - type: "integer"
        "cancel_at_period_end":
          oneOf:
            - type: "null"
            - type: "boolean"
              default: false
          default: false
        "trial_start":
          oneOf:
            - type: "null"
            - type: "integer"
        "trial_end":
          oneOf:
            - type: "null"
            - type: "integer"
        "ended_at":
          oneOf:
            - type: "null"
            - type: "integer"
        "canceled_at":
          oneOf:
            - type: "null"
            - type: "integer"
        "customer":
          oneOf:
            - type: "null"
            - type: "object"
        "customer_id":
          oneOf:
            - type: "null"
            - type: "string"
        "items":
          oneOf:
            - type: "null"
            - type: "object"
        "metadata":
          oneOf:
            - type: "null"
            - type: "object"
        "addons":
          oneOf:
            - type: "null"
            - type: "array"
        "plan_id":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      title: "StripeSubscriptionSchema"
    "StripeWebhookResponseSchema":
      properties:
        "status":
          type: "string"
        "message":
          type: "string"
        "data":
          oneOf:
            - type: "null"
            - type: "object"
      type: "object"
      required:
        - "message"
        - "status"
      title: "StripeWebhookResponseSchema"
    "SubscriptionFieldSchema":
      properties:
        "sms_details":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Subscription details"
          description: "Subscription details"
          examples:
            - {"summary": "Sample Current Plan", "value": "{}"}
        "url":
          oneOf:
            - type: "null"
            - type: "string"
          title: "URL"
          description: "URL of the subscription"
          examples:
            - {"summary": "Sample URL", "value": "test.chargebee.com/admin-console/customers/123456789"}
        "current_plan":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Current Plan"
          description: "Current Plan of the subscription"
          examples:
            - {"summary": "Sample Current Plan", "value": "{}"}
        "available_plans":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Available Plans"
          description: "Available Plans of the subscription"
          examples:
            - {"summary": "Sample Available Plans", "value": "{}"}
        "available_addons":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Available Addons"
          description: "Available Addons of the subscription"
          examples:
            - {"summary": "Sample Available Addons", "value": "{}"}
      type: "object"
      title: "SubscriptionFieldSchema"
    "SubscriptionPatchItem":
      properties:
        "op":
          type: "string"
          enum:
            - "add"
            - "remove"
            - "replace"
          description: "Operation to be performed on the subscription"
          examples:
            - {"summary": "Add", "value": "add"}
        "path":
          type: "string"
          const: "addons"
          description: "Path of the subscription"
          examples:
            - {"summary": "Subscription", "value": "addons"}
        "value": {"$ref": "#/components/schemas/SubscriptionPatchValue"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "SubscriptionPatchItem"
    "SubscriptionPatchOp":
      properties:
        "op":
          type: "string"
          const: "replace"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          const: "subscription_id"
          description: "Path"
          examples:
            - {"value": "subscription_id"}
        "value":
          type: "string"
          description: "Value to replace the attribute with"
          examples:
            - {"value": "SubscriptionId"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "SubscriptionPatchOp"
    "SubscriptionPatchValue":
      properties:
        "type":
          type: "string"
          enum:
            - "storage"
            - "connector"
            - "user"
          description: "Unit of the subscription"
          examples:
            - {"summary": "Storage", "value": "storage"}
        "count":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Quantity of the subscription"
          examples:
            - {"summary": "1", "value": 1}
        "add":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Add connectors to the subscription"
          examples:
            - {"summary": "Google Ads", "value": "['hubspot']"}
        "remove":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Remove connectors from the subscription"
          examples:
            - {"summary": "Facebook Ads", "value": "['facebook_ads']"}
      type: "object"
      required:
        - "type"
      title: "SubscriptionPatchValue"
    "SubscriptionResponseSchema":
      properties:
        "subscription":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/StripeSubscriptionSchema"}
      type: "object"
      title: "SubscriptionResponseSchema"
    "SubscriptionSchema":
      properties:
        "sms_details":
          type: "object"
          title: "Subscription details"
          description: "Subscription details"
          examples:
            - {"summary": "Sample Sms details", "value": "{}"}
        "url":
          type: "string"
          title: "URL"
          description: "URL of the subscription"
          examples:
            - {"summary": "Sample URL", "value": "test.chargebee.com/admin-console/customers/123456789"}
        "current_plan": {"$ref": "#/components/schemas/CurrentPlanSchema"}
        "available_plans":
          items: {"$ref": "#/components/schemas/CurrentPlanSchema"}
          type: "array"
        "available_addons":
          items: {"$ref": "#/components/schemas/CurrentPlanSchema"}
          type: "array"
      type: "object"
      required:
        - "available_addons"
        - "available_plans"
        - "current_plan"
        - "sms_details"
        - "url"
      title: "SubscriptionSchema"
    "SubscriptionsFieldSchema":
      properties:
        "subscription":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Current subscription"
          description: "Current subscription details"
          examples:
            - {"value": {"id": "abc123", "name": "Sample Subscription"}}
        "current_plan":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Current Plan"
          examples:
            - {"summary": "Sample Current Plan", "value": {"id": "internal", "name": "Sample Plan"}}
        "available_plans":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Available Plans"
          description: "Available Plans of the subscription"
          examples:
            - {"summary": "Sample Available Plans", "value": [{"id": "internal", "name": "Sample Plan"}]}
        "available_addons":
          oneOf:
            - type: "null"
            - type: "array"
          title: "Available Addons"
          description: "Available Addons of the subscription"
          examples:
            - {"summary": "Sample Available Addons", "value": [{"id": "additional-user", "name": "Sample Addon"}]}
      type: "object"
      title: "SubscriptionsFieldSchema"
    "TaskDetailsSchema":
      properties:
        "ds_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Datasource ID"
          description: "Datasource ID"
          examples:
            - {"summary": "Sample Datasource ID", "value": [1]}
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Destination Dataset ID"
          description: "Destination Dataset ID"
          examples:
            - {"summary": "Sample Destination Dataset ID", "value": 1}
        "destination_dataset_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Destination dataset ids"
          description: "Destination dataset ids"
          examples:
            - {"summary": "Sample Destination dataset ids", "value": [1]}
        "source_folder_resource_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Source Folder Resource ID"
          description: "Source Folder Resource ID"
          examples:
            - {"summary": "Sample Source Folder ID", "value": 1}
        "source_dataset_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Source Dataset ID"
          description: "Source Dataset ID"
          examples:
            - {"summary": "Sample Source Dataset ID", "value": 1}
      type: "object"
      title: "TaskDetailsSchema"
    "TaskPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/ItemTaskPatch"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "TaskPatch"
      description: "List of patch operations"
      examples:
        - {"patches": [{"op": "command", "path": "suspend", "value": null}]}
    "TaskSchema":
      properties:
        "task_type":
          type: "string"
          title: "Task type"
          description: "Task type"
          examples:
            - {"summary": "Sample task type", "value": "run_data_retrieval"}
        "details": {"$ref": "#/components/schemas/GetTaskSchema"}
      type: "object"
      required:
        - "details"
        - "task_type"
      title: "TaskSchema"
    "ThirdPartySource":
      properties:
        "connector_key":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "RNRmgCpfktgOkqgXYTgk"
          description: "Connector Key"
          examples:
            - "connector_key"
        "identity_key":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "ZNikIlRZUkuxoYqPhkys"
          description: "Identity Key"
          examples:
            - "identity_key"
        "id":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "NpMLwDvpKzAXWBXlrjgC"
            - type: "integer"
              examples:
                - 1215
          description: "Datasource Config Key"
          examples:
            - 1
        "batch_mode":
          type:
            - "string"
            - "null"
          enum:
            - "replace"
            - "combine"
            - null
          description: "Batch Mode"
          examples:
            - "replace"
        "schedules":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/ScheduleDetails"}
              type: "array"
              examples:
                - [{"id": 8910, "rrule": {"interval": null, "frequency": "tCOjewqHrzbBzXgAcuKj", "start_at": "2007-11-30T09:22:21.744531", "until": null, "by_month_day": [3433], "by_week_day": ["gBBvCYlOFPbbTQlxOJvD"]}, "job": null, "status": "running", "job_status": null, "refresh_schedule": "auto", "next_data_pull": null, "last_datapull": "rLUxEbAoEHXZBwXVzilO", "warning_reason": null}]
          description: "Schedules"
          examples:
            - {"id": 1, "rrule": {"interval": 1, "frequency": "daily", "start_at": "2024-02-04T14:48:41.532945Z", "until": "2024-02-04T14:45:41.532945Z", "by_month_day": [1], "by_week_day": ["mo"]}, "job": "job", "status": "status", "job_status": "job_status", "refresh_schedule": "refresh_schedule", "next_data_pull": "2024-02-04T14:46:41.532945Z", "last_datapull": "2024-02-04T14:47:41.532945Z", "warning_reason": "warning_reason"}
        "query_config":
          oneOf:
            - type: "null"
            - {"$ref": "#/components/schemas/QueryConfig"}
          description: "Query Config"
          examples:
            - {"table": "test", "query": "select * from test", "profile": "default"}
        "batch_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
                examples:
                  - 9751
              type: "array"
              examples:
                - [7835]
          description: "Batch IDs"
          examples:
            - 1
      type: "object"
      title: "ThirdPartySource"
      description: "Details of the cloud ds source"
      examples:
        - {"connector_key": "connector_key", "identity_key": "identity_key", "id": 1, "batch_mode": "batch_mode", "schedules": [{"id": 1, "rrule": {"interval": 1, "frequency": "daily", "start_at": "2024-02-04T14:42:41.532945Z", "until": "2024-04-04T14:46:41.532945Z", "by_month_day": [1], "by_week_day": ["mo"]}, "job": "job", "status": "status", "job_status": "job_status", "refresh_schedule": "refresh_schedule", "next_data_pull": "2024-02-05T14:46:41.532945Z", "last_datapull": "2024-02-06T14:46:41.532945Z", "warning_reason": "warning_reason"}], "query_config": {"table": "table", "query": "query", "profile": "profile"}, "batch_ids": [1]}
    "TpSourceInfo":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details": {"$ref": "#/components/schemas/ThirdPartySource"}
      type: "object"
      required:
        - "details"
      title: "TpSourceInfo"
      examples:
        - {"type": "cloud", "details": {"connector_key": null, "identity_key": null, "id": "WsfFRoJjAfBQfDTpnkVR", "batch_mode": null, "schedules": null, "query_config": null, "batch_ids": [8545]}}
    "TransferOwnership":
      properties:
        "workspace_id":
          type: "integer"
          title: "Workspace id"
          description: "Workspace id"
          examples:
            - {"summary": "Workspace id 1", "value": 1}
        "user_id":
          type: "integer"
          title: "User id"
          description: "User id"
          examples:
            - {"summary": "User id 1", "value": 1}
        "new_role":
          type: "string"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
          title: "Role"
          description: "New role name"
          default: "workspace_owner"
          examples:
            - {"summary": "Role name", "value": "workspace_owner"}
        "remove_role":
          type:
            - "string"
            - "null"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
            - null
          title: "Remove role"
          description: "Remove role name"
          examples:
            - {"summary": "Role name", "value": "workspace_member"}
      type: "object"
      required:
        - "user_id"
        - "workspace_id"
      title: "TransferOwnership"
      description: "Transfer ownership details"
      examples:
        - {"summary": "Transfer ownership details", "value": {"workspace_id": 1, "user_id": 29, "new_role": "workspace_owner", "remove_role": "workspace_member"}}
    "UnifiedPromptSpec":
      properties:
        "suggestion_type":
          type: "string"
          enum:
            - "extract_text"
            - "add_condition"
          title: "Suggestion Type"
          description: "Type of operation (extraction or conditional filtering)"
        "params":
          oneOf:
            - {"$ref": "#/components/schemas/CustomPromptParams"}
            - {"$ref": "#/components/schemas/AddConditionParams"}
          title: "Params"
          description: "Encapsulated parameters for the operation"
      type: "object"
      required:
        - "params"
        - "suggestion_type"
      title: "UnifiedPromptSpec"
      description: "Parameters required for intent-based extraction or filtering"
      examples:
        - {"suggestion_type": "extract_text", "params": {"column_name": "comments", "sequence_number": 1, "prompt": "Extract all mentions of product issues", "edit_regex": null}}
        - {"suggestion_type": "add_condition", "params": {"sequence_number": 2, "prompt": "Show records where Department contains 'cake'"}}
    "UniqueSequenceColumn":
      properties:
        "c_name":
          type: "string"
          description: "Unique Sequence Column Name"
          examples:
            - {"summary": "Sample column name", "value": "RecordID"}
        "c_type":
          type: "string"
          enum:
            - "numeric"
            - "date"
          description: "Data Type of the Unique Sequence Column"
          examples:
            - {"summary": "Sample data type", "value": "numeric"}
      type: "object"
      required:
        - "c_name"
        - "c_type"
      title: "UniqueSequenceColumn"
    "UpcomingInvoiceResponseSchema":
      properties:
        "upcoming_invoice":
          oneOf:
            - type: "null"
            - type: "object"
        "message":
          oneOf:
            - type: "null"
            - type: "string"
      type: "object"
      title: "UpcomingInvoiceResponseSchema"
    "UpdateConnectorProfileRequestSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "connectors":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/ConnectorProfileConnectorSchema"}
              type: "array"
      type: "object"
      title: "UpdateConnectorProfileRequestSchema"
    "UpdateConnectorRequestSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 128
          minLength: 2
          description: "Connector name"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Connector description"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
          description: "Monthly price in USD"
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Whether connector is enabled"
      type: "object"
      title: "UpdateConnectorRequestSchema"
    "UpdateFeatureProfileRequestSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "features":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/FeatureProfileFeatureSchema"}
              type: "array"
      type: "object"
      title: "UpdateFeatureProfileRequestSchema"
    "UpdateFeatureRequestSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 128
          minLength: 2
          description: "Feature name"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Feature description"
        "price_per_month":
          oneOf:
            - type: "null"
            - type: "number"
          description: "Monthly price in USD"
        "enabled":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Whether feature is enabled"
        "values":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
          description: "Allowed values for the feature"
      type: "object"
      title: "UpdateFeatureRequestSchema"
    "UpdatePlanRequestSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 128
          minLength: 2
          description: "Plan name"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
          maxLength: 500
          description: "Plan description"
        "monthly_price":
          oneOf:
            - type: "null"
            - type: "number"
          minimum: 0.01
          description: "Monthly price in USD"
        "annual_price":
          oneOf:
            - type: "null"
            - type: "number"
          minimum: 0.01
          description: "Annual price in USD"
        "annual_only":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Whether plan is annual only"
        "is_self_serve":
          oneOf:
            - type: "null"
            - type: "boolean"
          description: "Whether users can self-subscribe"
        "trial_days":
          oneOf:
            - type: "null"
            - type: "integer"
          maximum: 365
          description: "Trial period in days"
        "storage_amount":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Included storage in GB"
        "max_storage":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Maximum storage in GB"
        "max_users":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Maximum number of users"
        "no_of_users":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Number of included users"
        "seat_price":
          oneOf:
            - type: "null"
            - type: "number"
          description: "Price per additional user seat"
        "number_of_tiers":
          oneOf:
            - type: "null"
            - type: "integer"
          maximum: 10
          minimum: 1
          description: "Number of storage tiers"
        "storage_block_size":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Storage block size in GB"
        "tiers":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/subscription_schemas_StorageTierSchema"}
              type: "array"
          description: "Storage pricing tiers"
        "connector_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Connector profile ID"
        "feature_profile_id":
          oneOf:
            - type: "null"
            - type: "integer"
          minimum: 1
          description: "Feature profile ID"
      type: "object"
      title: "UpdatePlanRequestSchema"
    "UpdateQuerySpec":
      properties:
        "query":
          type: "string"
          minLength: 8
          title: "Query"
          description: "Query to update"
          examples:
            - {"value": "SELECT * FROM \"base_templates\" limit 1"}
        "ds_id":
          type: "integer"
          title: "Dataset ID"
          description: "Dataset ID"
          examples:
            - {"value": 2605}
        "validate":
          type: "boolean"
          title: "Validate"
          description: "Validate flag"
          default: true
          examples:
            - {"value": true}
      type: "object"
      required:
        - "ds_id"
        - "query"
      title: "UpdateQuerySpec"
      description: "Value to update query for a dataset"
      examples:
        - {"value": {"query": "SELECT * FROM \"templates\" limit 1", "ds_id": 2605, "validate": true}}
    "UpdateStorageTiersRequestSchema":
      properties:
        "storage_tiers":
          items: {"$ref": "#/components/schemas/schema_StorageTierSchema"}
          type: "array"
      type: "object"
      required:
        - "storage_tiers"
      title: "UpdateStorageTiersRequestSchema"
    "UpdateUserRoles":
      properties:
        "invite_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Invite id"
          description: "Invite id"
          examples:
            - {"summary": "Invite id 1", "value": 1}
        "new_role":
          type:
            - "string"
            - "null"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
            - null
          title: "Role"
          description: "Role name"
          examples:
            - {"summary": "New role name", "value": "workspace_owner"}
        "user_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "User id"
          description: "User id"
          examples:
            - {"summary": "User id 1", "value": 1}
        "remove_role":
          type:
            - "string"
            - "null"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
            - null
          title: "Remove role"
          description: "Remove role name"
          examples:
            - {"summary": "Role name", "value": "workspace_member"}
      type: "object"
      title: "UpdateUserRoles"
    "UsageLimitsCheckResponseSchema":
      properties:
        "within_limits":
          type: "boolean"
        "message":
          type: "string"
        "usage":
          oneOf:
            - type: "null"
            - type: "object"
      type: "object"
      required:
        - "message"
        - "within_limits"
      title: "UsageLimitsCheckResponseSchema"
    "UsageResponseSchema":
      properties:
        "usage":
          type: "object"
      type: "object"
      required:
        - "usage"
      title: "UsageResponseSchema"
    "UserFieldSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - {"value": 2}
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          title: "Email"
          description: "Email of the user"
          examples:
            - {"value": "test@asfd.com"}
        "user_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Name of the user"
          examples:
            - {"value": "Sample User Name"}
        "first_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"value": "Sample First Name"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Sample Last Name"
          examples:
            - {"value": "Sample Last Name"}
        "last_login_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Login of the user"
          description: "Last Login of the user"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "last_app_activity_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Active of the user"
          description: "Last Active of the user"
          examples:
            - {"summary": "Sample Last Active Date", "value": "2023-12-20T03:37:40"}
        "user_roles":
          oneOf:
            - type: "null"
            - type: "object"
          title: "User Roles of the user"
          description: "User Roles of the user"
          examples:
            - {"summary": "Sample User Roles", "value": "{}"}
        "last_login_from_ip":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Last Login From IP of the user"
          description: "Last Login From IP of the user"
          examples:
            - {"summary": "Sample Login From IP", "value": "127.0.0.1"}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "last_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At of the resource"
          description: "Last Updated At of the user"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
      type: "object"
      title: "UserFieldSchema"
    "UserFullSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - {"value": 2}
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "first_name":
          type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"value": "Sample First Name"}
        "last_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At of the resource"
          description: "Last Updated At of the user"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "user_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Name of the user"
          examples:
            - {"value": "Sample User Name"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Sample Last Name"
          examples:
            - {"value": "Sample Last Name"}
        "user_roles":
          type: "object"
          title: "User Roles of the user"
          description: "User Roles of the user"
          examples:
            - {"summary": "Sample User Roles", "value": "{}"}
        "last_login_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Login of the user"
          description: "Last Login of the user"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "last_app_activity_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Active of the user"
          description: "Last Active of the user"
          examples:
            - {"summary": "Sample Last Active Date", "value": "2023-12-20T03:37:40"}
        "last_login_from_ip":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Last Login From IP of the user"
          description: "Last Login From IP of the user"
          examples:
            - {"summary": "Sample Login From IP", "value": "127.0.0.1"}
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
      type: "object"
      required:
        - "created_at"
        - "email"
        - "first_name"
        - "id"
        - "user_roles"
      title: "UserFullSchema"
    "UserInvitePost":
      properties:
        "invite": {"$ref": "#/components/schemas/UserInviteSchema"}
      type: "object"
      required:
        - "invite"
      title: "UserInvitePost"
      description: "Invite user to workspace"
      examples:
        - {"invite": {"email_ids": ["apitests2@mammoth.io"], "projects": [{"project_id": 1, "role": "project_analyst"}]}}
    "UserInviteSchema":
      properties:
        "email_ids":
          items:
            type: "string"
            format: "email"
            title: "Email of the user"
            description: "Email of the customer"
            examples:
              - {"value": "kia@example.com"}
          type: "array"
        "projects":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/ProjectInviteSchema"}
              type: "array"
          title: "Projects and project role"
          description: "Project and project roles"
          examples:
            - {"summary": "Project id and project role", "value": {"projects": [{"project_id": 1, "role": "project_analyst"}]}}
      type: "object"
      required:
        - "email_ids"
      title: "UserInviteSchema"
    "UserList":
      properties:
        "users":
          items:
            oneOf:
              - {"$ref": "#/components/schemas/UserFieldSchema"}
              - {"$ref": "#/components/schemas/UserMinSchema"}
              - {"$ref": "#/components/schemas/UserStdSchema"}
              - {"$ref": "#/components/schemas/UserFullSchema"}
          type: "array"
        "offset":
          type: "integer"
          default: 0
        "limit":
          type: "integer"
          default: 50
        "next":
          type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/support/users?limit=50&offset=50"}
      type: "object"
      required:
        - "next"
        - "users"
      title: "UserList"
    "UserMinSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - {"value": 2}
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "first_name":
          type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"value": "Sample First Name"}
        "last_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At of the resource"
          description: "Last Updated At of the user"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
      type: "object"
      required:
        - "email"
        - "first_name"
        - "id"
      title: "UserMinSchema"
    "UserPostSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - {"value": 2}
      type: "object"
      required:
        - "id"
      title: "UserPostSchema"
    "UserRolesPatch":
      properties:
        "user_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "User ID"
          examples:
            - {"value": 1}
        "role":
          type: "string"
          enum:
            - "project_admin"
            - "project_analyst"
          description: "Role"
          default: "project_analyst"
          examples:
            - {"value": "project_admin"}
      type: "object"
      title: "UserRolesPatch"
    "UserSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID of the user"
          description: "ID of the user"
          examples:
            - {"value": 2}
        "email":
          oneOf:
            - type: "null"
            - type: "string"
              format: "email"
              title: "Email of the user"
              description: "Email of the customer"
              examples:
                - {"value": "kia@example.com"}
          title: "Email of the user"
          description: "Email of the user"
          examples:
            - {"value": "john.wick@mammoth.io"}
        "first_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"value": "John"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Last name of the user"
          examples:
            - {"value": "Wick"}
        "last_login_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Login of the user"
          description: "Last Login of the user"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "last_active_date":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Active of the user"
          description: "Last Active of the user"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "user_roles":
          oneOf:
            - type: "null"
            - type: "object"
          title: "User Roles of the user"
          description: "User Roles of the user"
          examples:
            - {"summary": "User Roles of the user", "value": "{}"}
        "last_login_from_ip":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Last Login From IP of the user"
          description: "Last Login From IP of the user"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Time when user was created"
          description: "Time when user was created"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Time when users properties were updated"
          description: "Time when users properties were updated"
          examples:
            - {"summary": "2023-12-20T03:37:40", "value": "2023-12-20T03:37:40"}
        "profile_link":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Profile Link of the user"
          description: "Profile Link of the user"
        "status":
          oneOf:
            - type: "null"
            - type: "integer"
      type: "object"
      title: "UserSchema"
    "UserStdSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the user"
          examples:
            - {"value": 2}
        "email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "first_name":
          type: "string"
          title: "First name of the user"
          description: "First name of the user"
          examples:
            - {"value": "Sample First Name"}
        "last_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At of the resource"
          description: "Last Updated At of the user"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "user_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Name of the user"
          examples:
            - {"value": "Sample User Name"}
        "last_name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Last name of the user"
          description: "Sample Last Name"
          examples:
            - {"value": "Sample Last Name"}
        "user_roles":
          type: "object"
          title: "User Roles of the user"
          description: "User Roles of the user"
          examples:
            - {"summary": "Sample User Roles", "value": "{}"}
      type: "object"
      required:
        - "email"
        - "first_name"
        - "id"
        - "user_roles"
      title: "UserStdSchema"
    "UsersToProjectsPatch":
      properties:
        "project_id":
          oneOf:
            - type: "null"
            - type: "integer"
          description: "Project ID"
          examples:
            - {"value": 1}
        "user_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "User ids"
          description: "List of user IDs to add/remove to/from project"
          examples:
            - {"value": [1, 2]}
        "invite_ids":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "Invite ids"
          description: "List of invite IDs to add/remove to/from project"
          examples:
            - {"value": [1, 2]}
        "user_roles":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/UserRolesPatch"}
              type: "array"
          title: "User roles"
          description: "List of user to role mapping to assign to the project"
          examples:
            - {"value": [{"user_id": 3, "role": "project_admin"}]}
        "invite_roles":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/InviteProjectRolePatch"}
              type: "array"
          title: "Invite roles"
          description: "List of invite to role mapping to assign to the project"
          examples:
            - {"value": [{"invite_id": 3, "role": "project_admin"}]}
      type: "object"
      title: "UsersToProjectsPatch"
    "ValidateAndSampleDataSpec":
      properties:
        "profile":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Profile"
          description: "Profile of the selected connection"
          examples:
            - {"value": "public"}
        "query":
          oneOf:
            - type: "null"
            - type: "string"
          title: "query"
          description: "Query to fetch data from cloud"
          examples:
            - {"value": "SELECT * FROM \"base_templates\" limit 2"}
        "table":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Table name"
          description: "Name of the Table"
          examples:
            - {"value": "base_templates"}
        "validate":
          type: "boolean"
          title: "Validate"
          description: "Validate"
          default: true
          examples:
            - {"value": true}
        "data_sample":
          type: "boolean"
          title: "Data sample"
          description: "Sample data flag"
          default: false
          examples:
            - {"value": true}
        "file_source":
          oneOf:
            - type: "null"
            - type: "string"
          title: "File source"
          description: "Source path of the file"
          examples:
            - {"value": "./sftp_test/08.12.21-RFIG.csv"}
      type: "object"
      title: "ValidateAndSampleDataSpec"
      description: "Details of the dataset to be created"
      examples:
        - {"profile": "public", "query": "SELECT * FROM \"append_transforms\"", "table": "append_transforms", "validate": true, "data_sample": true}
        - {"profile": "public", "query": "SELECT * FROM \"append_transforms\"", "table": "append_transforms", "validate": true}
        - {"file_source": "./sftp_test/08.12.21-RFIG.csv", "validate": true}
        - {"file_source": "https://drive.google.com/file/d/19ByEObwfwlHdzM3xK8u471jtPpYpaP1V/view?usp=drive_link", "validate": true}
    "WebUrlInfo":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details": {"$ref": "#/components/schemas/WebUrlSource"}
      type: "object"
      required:
        - "details"
      title: "WebUrlInfo"
      examples:
        - {"type": "cloud", "details": {"id": "http://www.richmond.com/"}}
    "WebUrlSource":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "string"
              format: "url"
          description: "Web URL"
          examples:
            - "https://aws.com/abc.csv"
      type: "object"
      title: "WebUrlSource"
      description: "Details of the web url ds source"
      examples:
        - {"id": "https://aws.com/efg.csv"}
    "WebhookDetails":
      properties:
        "webhook": {"$ref": "#/components/schemas/WebhookStandardSchema"}
      type: "object"
      required:
        - "webhook"
      title: "WebhookDetails"
    "WebhookDsBatchSource":
      properties:
        "type":
          oneOf:
            - type: "null"
            - type: "string"
          description: "Type of the source"
          examples:
            - "file"
      type: "object"
      title: "WebhookDsBatchSource"
    "WebhookInfo":
      properties:
        "type":
          type: "string"
          enum:
            - "file"
            - "sketch"
            - "cloud"
            - "abstract"
            - "append"
          description: "Type of the source"
          default: "sketch"
          examples:
            - "sketch"
        "details": {"$ref": "#/components/schemas/WebhookSource"}
      type: "object"
      required:
        - "details"
      title: "WebhookInfo"
      examples:
        - {"type": "append", "details": {"id": null, "key": null, "url": null, "origins": "WqXcrvKFnujalpSouROZ"}}
    "WebhookPatchData":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          title: "Operation"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "mode"
            - "origins"
            - "is_secure"
          title: "Path"
          description: "Path"
          examples:
            - {"value": "is_secure"}
        "value":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "replace"
                - "combine"
            - type: "string"
          title: "Value"
          description: "Value to update webhook configuration"
          examples:
            - {"value": false}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "WebhookPatchData"
    "WebhookPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/WebhookPatchData"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "WebhookPatchRequest"
      description: "Update mode/origins/is_secure of webhook"
      examples:
        - {"patch": [{"op": "replace", "path": "mode", "value": "replace"}]}
        - {"patch": [{"op": "replace", "path": "is_secure", "value": false}]}
        - {"patch": [{"op": "replace", "path": "origins", "value": "*"}]}
    "WebhookSource":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
              examples:
                - 8635
          description: "Webhook ID"
          examples:
            - 1
        "key":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "cdVvAxLyACTYSpJUIkvg"
          description: "Webhook Key"
          examples:
            - "VLDUsMXrSFOq7X7TjLQ7lPeY"
        "url":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "ilgZDftTlhTfIzmYSouz"
          description: "Webhook URL"
          examples:
            - "/webhook/data/VLDUsMXrSFOq7X7TjLQ7lPeY"
        "origins":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "OWXsYHyAIGqocJoPIFVb"
          description: "Webhook Origins"
          examples:
            - "*"
      type: "object"
      title: "WebhookSource"
      description: "Details of the webhook ds source"
      examples:
        - {"id": 1, "key": "VLDUsMXrSFOq7X7TjLQ7lPeY", "url": "/webhook/data/VLDUsMXrSFOq7X7TjLQ7lPeY", "origins": "*"}
    "WebhookSpec":
      properties:
        "folder_resource_id":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Folder resource id"
          description: "Folder resource id"
          examples:
            - {"value": "label_1363"}
        "name":
          type: "string"
          title: "Name"
          description: "Name of the webhook"
          default: "Generic Webhook"
          examples:
            - {"value": "test"}
        "mode":
          type: "string"
          enum:
            - "replace"
            - "combine"
          title: "Mode"
          description: "Mode of the webhook"
          default: "replace"
          examples:
            - {"value": "combine"}
        "origins":
          type: "string"
          title: "Origins"
          description: "Origins"
          default: "*"
          examples:
            - {"value": "*"}
        "is_secure":
          type: "boolean"
          title: "Is secure"
          description: "Is secure"
          default: false
          examples:
            - {"value": true}
      type: "object"
      title: "WebhookSpec"
      description: "create webhook"
      examples:
        - {"folder_resource_id": "label_1363", "name": "test", "mode": "combine"}
    "WebhookStandardSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the webhook"
          examples:
            - {"value": 8}
        "name":
          type: "string"
          minLength: 1
          title: "Name"
          description: "Name of the webhook"
          examples:
            - {"value": "test"}
        "mode":
          type: "string"
          enum:
            - "replace"
            - "combine"
          title: "Mode"
          description: "Mode of the webhook"
          examples:
            - {"value": "replace"}
        "uri":
          type: "string"
          minLength: 1
          title: "URL"
          description: "URL of the webhook"
          examples:
            - {"value": "/webhook/data/nHC1zIl97JzgDMopgcfpOgLV"}
        "ds_id":
          type: "integer"
          title: "DS ID"
          description: "DS ID of the source"
          examples:
            - {"value": 535}
        "origins":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Origins"
          description: "Origins"
          examples:
            - {"value": "*"}
        "secret":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Secret"
          description: "Secret"
          examples:
            - {"value": "V36QXDxGiwSa"}
      type: "object"
      required:
        - "ds_id"
        - "id"
        - "mode"
        - "name"
        - "uri"
      title: "WebhookStandardSchema"
    "WebhooksList":
      properties:
        "webhooks":
          items: {"$ref": "#/components/schemas/WebhookStandardSchema"}
          type: "array"
        "limit":
          type: "integer"
          default: 10
        "offset":
          type: "integer"
          default: 0
        "next":
          type: "string"
      type: "object"
      required:
        - "next"
        - "webhooks"
      title: "WebhooksList"
    "WorkItemSchema":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "name"
          description: "name"
          examples:
            - {"summary": "Sample name", "value": "pull_cloud_data"}
        "execution_params":
          oneOf:
            - type: "null"
            - type: "object"
          title: "execution_params"
          description: "execution_params"
          examples:
            - {"summary": "Sample execution_params", "value": {"schedule_type": "moment", "first_pull_at": "now", "on_refresh_action": "replace"}}
        "args":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "args"
          description: "args"
          examples:
            - {"summary": "Sample args", "value": [123, 2586]}
      type: "object"
      title: "WorkItemSchema"
    "WorkspaceAddonResponse":
      properties:
        "workspace":
          type: "object"
          title: "Workspace"
          description: "Updated workspace information"
          examples:
            - {"value": {"id": 123, "name": "My Workspace", "plan_id": 1, "billing_cycle": "monthly"}}
        "message":
          type: "string"
          title: "Message"
          description: "Success message"
          examples:
            - {"value": "Storage addon (100GB) added successfully to workspace 123"}
      type: "object"
      required:
        - "message"
        - "workspace"
      title: "WorkspaceAddonResponse"
    "WorkspaceCreate":
      properties:
        "name":
          type: "string"
          title: "Name of the workspace"
          description: "Name of the workspace to be created"
          examples:
            - {"summary": "Sample Workspace Name", "value": "Sample Workspace Name"}
        "user_email":
          type: "string"
          format: "email"
          title: "Email of the user"
          description: "Email of the customer"
          examples:
            - {"value": "kia@example.com"}
        "plan_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Plan ID"
          description: "Plan ID"
          examples:
            - {"summary": "Sample Plan ID", "value": "internal"}
        "payment_frequency":
          type: "string"
          title: "Payment frequency of the workspace"
          description: "Payment frequency of the workspace"
          examples:
            - {"summary": "Sample Payment Frequency", "value": "monthly"}
        "is_verified":
          type: "boolean"
          title: "Is verified"
          description: "Is verified"
          default: true
          examples:
            - {"summary": "Sample Is verified", "value": true}
        "is_registration":
          type: "boolean"
          title: "Is registration"
          description: "Is registration"
          default: false
          examples:
            - {"summary": "Sample Is registration", "value": false}
      type: "object"
      required:
        - "name"
        - "payment_frequency"
        - "user_email"
      title: "WorkspaceCreate"
      description: "Create workspace schema details"
      examples:
        - {"name": "Docs", "plan_id": "new_pro", "user_email": "test@test.com", "payment_frequency": "monthly", "is_verified": true}
        - {"name": "Docs 2", "plan_id": "lite", "user_email": "test@test.com", "payment_frequency": "yearly"}
    "WorkspaceFieldSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "ID"
          description: "ID of the workspace"
          examples:
            - {"value": 2}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Name"
          description: "Name of the workspace to be created"
          examples:
            - {"value": "Sample Workspace Name"}
        "status":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Status"
          description: "Status of the workspace"
          examples:
            - {"value": "ACTIVE"}
        "last_updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Last Updated At of the resource"
          description: "Last Updated At of the resource"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "total_users":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Total Users in the workspace"
          description: "Total Users in the workspace"
          examples:
            - {"value": 2}
        "backend_domain_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Backend Domain of the workspace"
          description: "Backend Domain of the workspace"
          examples:
            - {"value": "12"}
        "storage_used_in_bytes":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Storage Used In Bytes of the workspace"
          description: "Storage Used In Bytes of the workspace"
          examples:
            - {"value": 1024}
        "data_domain_host":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Data Domain Host of the workspace"
          description: "Data Domain Host of the workspace"
          examples:
            - {"value": "127.0.0.1"}
        "reports_domain_host":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Reports Domain Host of the workspace"
          description: "Reports Domain Host of the workspace"
          examples:
            - {"value": "127.0.0.1"}
      type: "object"
      title: "WorkspaceFieldSchema"
    "WorkspaceFullSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the workspace"
          examples:
            - {"value": 2}
        "name":
          type: "string"
          title: "Name"
          description: "Name of the workspace to be created"
          examples:
            - {"value": "Sample Workspace Name"}
        "status":
          type: "string"
          title: "Status"
          description: "Status of the workspace"
          examples:
            - {"value": "ACTIVE"}
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At of the workspace"
          description: "Last Updated At of the workspace"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "total_users":
          type: "integer"
          title: "Total Users in the workspace"
          description: "Total Users in the workspace"
          examples:
            - {"value": 2}
        "backend_domain_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Backend Domain of the workspace"
          description: "Backend Domain of the workspace"
          examples:
            - {"value": "12"}
        "storage_used_in_bytes":
          type: "integer"
          title: "Storage Used In Bytes of the workspace"
          description: "Storage Used In Bytes of the workspace"
          examples:
            - {"value": 1024}
        "data_domain_host":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Data Domain Host of the workspace"
          description: "Data Domain Host of the workspace"
          examples:
            - {"value": "127.0.0.1"}
        "reports_domain_host":
          oneOf:
            - type: "null"
            - type: "string"
              format: "ipv4"
              description: "IPv4 address"
            - type: "string"
              format: "ipv6"
              description: "IPv6 address"
          title: "Reports Domain Host of the workspace"
          description: "Reports Domain Host of the workspace"
          examples:
            - {"value": "127.0.0.1"}
      type: "object"
      required:
        - "created_at"
        - "id"
        - "last_updated_at"
        - "name"
        - "status"
        - "storage_used_in_bytes"
        - "total_users"
      title: "WorkspaceFullSchema"
    "WorkspaceList":
      properties:
        "workspaces":
          oneOf:
            - type: "null"
            - items: {"$ref": "#/components/schemas/WorkspaceMinSchema"}
              type: "array"
            - items: {"$ref": "#/components/schemas/WorkspaceStdSchema"}
              type: "array"
            - items: {"$ref": "#/components/schemas/WorkspaceFullSchema"}
              type: "array"
            - items: {"$ref": "#/components/schemas/WorkspaceFieldSchema"}
              type: "array"
        "offset":
          oneOf:
            - type: "null"
            - type: "integer"
              default: 0
          default: 0
        "limit":
          oneOf:
            - type: "null"
            - type: "integer"
              default: 50
          default: 50
        "next":
          oneOf:
            - type: "null"
            - type: "string"
          description: "URI for next page of data"
          examples:
            - {"value": "https://server.mammoth.io/api/v2/support/workspaces?instance_type=true&limit=50&offset=50"}
      type: "object"
      title: "WorkspaceList"
    "WorkspaceMinSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the workspace"
          examples:
            - {"value": 2}
        "name":
          type: "string"
          title: "Name"
          description: "Name of the workspace to be created"
          examples:
            - {"value": "Sample Workspace Name"}
        "status":
          type: "string"
          title: "Status"
          description: "Status of the workspace"
          examples:
            - {"value": "ACTIVE"}
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At of the workspace"
          description: "Last Updated At of the workspace"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
      type: "object"
      required:
        - "id"
        - "last_updated_at"
        - "name"
        - "status"
      title: "WorkspaceMinSchema"
    "WorkspacePatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/WorkspacePatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "WorkspacePatch"
      description: "Update workspace details"
      examples:
        - {"patches": [{"op": "replace", "path": "name", "value": "My cool workspace"}]}
        - {"patches": [{"op": "replace", "path": "metadata", "value": {"key1": "value1"}}]}
        - {"patches": [{"op": "replace", "path": "plan_id", "value": 2}]}
        - {"patches": [{"op": "replace", "path": "billing_cycle", "value": "yearly"}]}
    "WorkspacePatchOp":
      properties:
        "op":
          type: "string"
          const: "replace"
          description: "Operation"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "name"
            - "metadata"
            - "plan_id"
            - "billing_cycle"
          description: "Path"
          examples:
            - {"value": "name"}
            - {"value": "metadata"}
            - {"value": "plan_id"}
            - {"value": "billing_cycle"}
        "value":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "integer"
          maxLength: 50
          minLength: 1
          description: "New Workspace name, metadata, plan_id, or billing_cycle"
          examples:
            - {"value": "My cool workspace"}
            - {"value": {"key1": "value1", "key2": "value2"}}
            - {"description": "Plan ID", "value": 1}
            - {"description": "Billing cycle (monthly/yearly)", "value": "monthly"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "WorkspacePatchOp"
    "WorkspaceSchema":
      properties:
        "id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Workspace id"
          examples:
            - {"value": {"id": 4}}
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace name"
          description: "Name of the workspace"
          examples:
            - {"value": {"name": "Workspace 1"}}
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Workspace created at"
          description: "Time when workspace was created"
          examples:
            - {"value": {"created_at": "2021-08-10T10:00:00"}}
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Workspace updated at"
          description: "Time when workspace was last updated"
          examples:
            - {"value": {"updated_at": "2021-08-10T10:00:00"}}
        "status":
          type:
            - "string"
            - "null"
          enum:
            - "DELETED"
            - "ACTIVE"
            - "SUSPENDED"
            - "INITED"
            - null
          title: "Workspace status"
          description: "Status of the workspace"
          examples:
            - {"value": {"status": "active"}}
        "acc_image":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace image"
          description: "Workspace image URL"
          examples:
            - {"value": {"image": "https://mammoth.io/image.png"}}
        "date_format":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace date region"
          description: "Workspace date region"
          examples:
            - {"value": {"date_region": "US"}}
        "total_users":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Workspace total users"
          description: "Total number of users in the workspace"
          examples:
            - {"value": {"total_users": 10}}
        "path":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace path"
          description: "Workspace path"
          examples:
            - {"value": {"path": "/workspace/1"}}
        "url":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace url"
          description: "Workspace url"
          examples:
            - {"value": {"url": "/workspace/1"}}
        "last_accessed":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Workspace last accessed"
          description: "Time when workspace was last accessed"
          examples:
            - {"value": {"last_accessed": "2021-08-10T10:00:00"}}
      type: "object"
      title: "WorkspaceSchema"
    "WorkspaceStdSchema":
      properties:
        "id":
          type: "integer"
          title: "ID"
          description: "ID of the workspace"
          examples:
            - {"value": 2}
        "name":
          type: "string"
          title: "Name"
          description: "Name of the workspace to be created"
          examples:
            - {"value": "Sample Workspace Name"}
        "status":
          type: "string"
          title: "Status"
          description: "Status of the workspace"
          examples:
            - {"value": "ACTIVE"}
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At of the workspace"
          description: "Last Updated At of the workspace"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
          description: "Created At"
          examples:
            - {"summary": "Sample Date", "value": "2023-12-20T03:37:40"}
        "total_users":
          type: "integer"
          title: "Total Users in the workspace"
          description: "Total Users in the workspace"
          examples:
            - {"value": 2}
        "backend_domain_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Backend Domain of the workspace"
          description: "Backend Domain of the workspace"
          examples:
            - {"value": "12"}
      type: "object"
      required:
        - "created_at"
        - "id"
        - "last_updated_at"
        - "name"
        - "status"
        - "total_users"
      title: "WorkspaceStdSchema"
    "WorkspaceSubscriptionStatusDataSchema":
      properties:
        "workspace_id":
          type: "integer"
        "subscription_status":
          oneOf:
            - type: "null"
            - type: "string"
        "has_active_subscription":
          type: "boolean"
        "stripe_subscription_id":
          oneOf:
            - type: "null"
            - type: "string"
        "stripe_customer_id":
          oneOf:
            - type: "null"
            - type: "string"
        "plan_id":
          oneOf:
            - type: "null"
            - type: "integer"
        "billing_cycle":
          oneOf:
            - type: "null"
            - type: "string"
        "checkout_info":
          oneOf:
            - type: "null"
            - type: "object"
        "needs_checkout":
          type: "boolean"
        "checkout_in_progress":
          type: "boolean"
      type: "object"
      required:
        - "checkout_in_progress"
        - "has_active_subscription"
        - "needs_checkout"
        - "workspace_id"
      title: "WorkspaceSubscriptionStatusDataSchema"
    "WorkspaceUserGetResponse":
      properties:
        "users":
          items: {"$ref": "#/components/schemas/UserSchema"}
          type: "array"
        "invites":
          oneOf:
            - type: "null"
            - items:
                type: "object"
              type: "array"
        "limit":
          type: "integer"
          maximum: 100
          minimum: 1
          title: "Limit"
          description: "Max number of users to return"
          default: 10
          examples:
            - {"summary": "Limit returned user count to 10", "value": 10}
        "offset":
          type: "integer"
          title: "Offset"
          description: "Offset from the beginning of the users list"
          default: 0
          examples:
            - {"summary": "Start from 2nd user", "value": 1}
        "next":
          type: "string"
      type: "object"
      required:
        - "next"
        - "users"
      title: "WorkspaceUserGetResponse"
    "WorkspaceUserInviteResponse":
      properties:
        "invited":
          items:
            type: "string"
            format: "email"
            title: "Email of the user"
            description: "Email of the customer"
            examples:
              - {"value": "kia@example.com"}
          type: "array"
      type: "object"
      required:
        - "invited"
      title: "WorkspaceUserInviteResponse"
    "WorkspaceUserPatch":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/AdminWorkspaceUserPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "WorkspaceUserPatch"
      description: "Update/change user roles in the workspace"
      examples:
        - {"patch": [{"op": "replace", "path": "role", "value": {"user_id": 29, "role": "workspace_admin", "remove_role": "workspace_owner"}}, {"op": "replace", "path": "role", "value": {"user_id": 5, "role": "workspace_owner", "remove_role": "workspace_admin"}}]}
    "WorkspaceUserPatchOp":
      properties:
        "op":
          type: "string"
          const: "replace"
          description: "Operation to be performed"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          const: "role"
          description: "Operation path"
          examples:
            - {"summary": "Change user role on workspace", "value": "role"}
        "value":
          type: "string"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
          description: "New role name"
          examples:
            - {"summary": "Invite ids", "value": "workspace_member"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "WorkspaceUserPatchOp"
    "WorkspaceUserPatchResponse":
      properties:
        "new_role":
          type: "string"
          enum:
            - "workspace_member"
            - "workspace_admin"
            - "workspace_owner"
            - "workspace_guest"
      type: "object"
      required:
        - "new_role"
      title: "WorkspaceUserPatchResponse"
    "WorkspaceUsersPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/WorkspaceUsersPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "WorkspaceUsersPatch"
      description: "Update user role, resend or remove invite from workspace"
      examples:
        - {"patches": [{"op": "command", "path": "invite_resend", "value": "1"}]}
        - {"patches": [{"op": "remove", "path": "invite_role", "value": "1"}]}
        - {"patches": [{"op": "replace", "path": "role", "value": "1,workspace_member"}]}
        - {"patches": [{"op": "replace", "path": "role", "value": {"user_id": 29, "new_role": "workspace_owner", "remove_role": "workspace_member"}}]}
    "WorkspaceUsersPatchOp":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
            - "command"
            - "remove"
          description: "Operation to be performed"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "invite_resend"
            - "invite"
            - "invite_role"
            - "role"
          description: "Operation path"
          examples:
            - {"summary": "Resend invites", "value": "invite_resend"}
        "value":
          oneOf:
            - type: "string"
            - {"$ref": "#/components/schemas/UpdateUserRoles"}
          description: "Patch value, depends on operation. Possible values are invite ids or invite id and role name."
          examples:
            - {"summary": "Invite ids", "value": "1,2,3"}
            - {"summary": "Invite id and role", "value": {"invite_id": 1, "role": "workspace_member"}}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "WorkspaceUsersPatchOp"
    "WorkspaceUsersSettingsPatch":
      properties:
        "patches":
          items: {"$ref": "#/components/schemas/WorkspaceUsersSettingsPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patches"
      title: "WorkspaceUsersSettingsPatch"
      description: "Transfer ownership of workspaces"
      examples:
        - {"patches": [{"op": "replace", "path": "role", "value": {"workspace_id": 1, "user_id": 29, "new_role": "workspace_owner", "remove_role": "workspace_member"}}]}
    "WorkspaceUsersSettingsPatchOp":
      properties:
        "op":
          type: "string"
          enum:
            - "replace"
          description: "Operation to be performed"
          examples:
            - {"value": "replace"}
        "path":
          type: "string"
          enum:
            - "role"
          description: "Operation path"
          examples:
            - {"summary": "Resend invites", "value": "role"}
        "value": {"$ref": "#/components/schemas/TransferOwnership"}
      type: "object"
      required:
        - "op"
        - "path"
        - "value"
      title: "WorkspaceUsersSettingsPatchOp"
    "WorkspacesSchema":
      properties:
        "workspaces":
          items: {"$ref": "#/components/schemas/WorkspaceSchema"}
          type: "array"
        "limit":
          type: "integer"
          default: 10
        "offset":
          type: "integer"
          default: 0
        "next":
          type: "string"
      type: "object"
      required:
        - "next"
        - "workspaces"
      title: "WorkspacesSchema"
    "ZoomDeAuthorizationRequest":
      properties:
        "event":
          type: "string"
          minLength: 1
          description: "Name of the event"
          examples:
            - {"value": "app_deauthorized"}
        "payload": {"$ref": "#/components/schemas/ZoomPayload"}
      type: "object"
      required:
        - "event"
        - "payload"
      title: "ZoomDeAuthorizationRequest"
      description: "Details of the event"
      examples:
        - {"event": "app_deauthorized", "payload": {"account_id": "EabCDEFlhiLHMA", "user_id": "z9jkdsfsdfjhdkfjQ", "signature": "827ed83452044f0bc86bdd5684afb7d1e6becfa1a767f24df1b287853cf73000", "deauthorization_time": "2019-06-17T13:52:28.632Z", "client_id": "ADZ9kgbTWmGUoUbECUKU_a"}}
    "ZoomPayload":
      properties:
        "account_id":
          type: "string"
          minLength: 1
          description: "Account ID of the user"
          examples:
            - {"value": "EabCDEFghiLHMA"}
        "client_id":
          type: "string"
          minLength: 1
          description: "Client ID of the user"
          examples:
            - {"value": "ADZ9k9bTWmGUoUbECUKU_a"}
        "deauthorization_time":
          type: "string"
          format: "date-time"
          description: "Time of deauthorization"
          examples:
            - {"value": "2019-06-17T13:52:28.632Z"}
        "signature":
          type: "string"
          minLength: 1
          description: "Signature of the request"
          examples:
            - {"value": "827edc3452044f0bc86bdd5684afb7d1e6becfa1a767f24df1b287853cf73000"}
        "user_id":
          type: "string"
          minLength: 1
          description: "User ID of the user"
          examples:
            - {"value": "z9jkdsfsdfjhdkfjQ"}
      type: "object"
      required:
        - "account_id"
        - "client_id"
        - "deauthorization_time"
        - "signature"
        - "user_id"
      title: "ZoomPayload"
    "api_ds_schema_ColumnSchema":
      properties:
        "c_id":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "gshBuVNGZAyQcpnrgQvp"
          description: "Column ID"
          examples:
            - "column_1"
        "c_name":
          oneOf:
            - type: "null"
            - type: "string"
              examples:
                - "EPMASYJucMNOQyHJkLeX"
          description: "Column Name"
          examples:
            - "name"
        "c_type":
          type:
            - "string"
            - "null"
          enum:
            - "text"
            - "numeric"
            - "date"
            - null
          description: "Column Type"
          examples:
            - "text"
      type: "object"
      title: "ColumnSchema"
      examples:
        - {"c_id": null, "c_name": null, "c_type": "text"}
    "apiv2_conditional_formatting_schema_ColumnSchema":
      properties:
        "CONDITION": {"$ref": "#/components/schemas/conditional_formatting_schema_ConditionSchema"}
        "FORMAT":
          oneOf:
            - type: "null"
            - additionalProperties:
                type: "string"
              type: "object"
      type: "object"
      required:
        - "CONDITION"
      title: "ColumnSchema"
    "automations_schema_ConditionSchema":
      properties:
        "interval":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Interval"
          description: "Interval"
          examples:
            - {"summary": "Sample interval", "value": 1}
        "frequency":
          type:
            - "string"
            - "null"
          enum:
            - "minutely"
            - "hourly"
            - "daily"
            - "weekly"
            - "monthly"
            - "yearly"
            - null
          title: "Frequency"
          description: "Frequency"
          examples:
            - {"summary": "Sample frequency", "value": "daily"}
        "start_at":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Start At"
          description: "Start At"
          examples:
            - {"summary": "Sample start date", "value": "2021-01-01"}
        "until":
          oneOf:
            - type: "null"
            - type: "string"
              format: "date-time"
          title: "Until"
          description: "Until"
          examples:
            - {"summary": "Sample until date", "value": "2021-01-01"}
        "by_month_day":
          oneOf:
            - type: "null"
            - items:
                type: "integer"
              type: "array"
          title: "By Month Day"
          description: "By Month Day"
          examples:
            - {"summary": "Sample month day", "value": [1]}
        "by_week_day":
          oneOf:
            - type: "null"
            - items:
                type: "string"
                enum:
                  - "mo"
                  - "tu"
                  - "we"
                  - "th"
                  - "fr"
                  - "sa"
                  - "su"
              type: "array"
          title: "By Week Day"
          description: "By Week Day"
          examples:
            - {"summary": "Sample week day", "value": ["mo"]}
        "start_now":
          type: "boolean"
          title: "Start now"
          description: "start now/later"
          default: true
          examples:
            - {"summary": "whether to start now or later", "value": true}
        "file_contains":
          type: "string"
          title: "Name Contains"
          description: "Name Contains"
          examples:
            - {"summary": "Sample Name Pattern", "value": "abc"}
      type: "object"
      required:
        - "file_contains"
      title: "ConditionSchema"
      description: "Condition Details"
      examples:
        - {"summary": "Sample condition details", "value": {"interval": 1, "frequency": "monthly", "start_at": "2021-01-01", "until": "2021-01-01", "by_month_day": [], "by_week_day": [], "start_now": true}}
    "conditional_formatting_schema_ConditionSchema":
      properties:
        "OR":
          oneOf:
            - type: "null"
            - items:
                additionalProperties:
                  type: "object"
                type: "object"
              type: "array"
        "AND":
          oneOf:
            - type: "null"
            - items:
                additionalProperties:
                  type: "object"
                type: "object"
              type: "array"
      type: "object"
      title: "ConditionSchema"
    "schema_StorageTierSchema":
      properties:
        "gb":
          type: "integer"
        "price_per_gb":
          type: "number"
      type: "object"
      required:
        - "gb"
        - "price_per_gb"
      title: "StorageTierSchema"
    "split_segments_schema_FeatureSchema":
      properties:
        "features":
          items:
            type: "object"
          type: "array"
          title: "Features"
          description: "List of features in the segment"
        "status":
          type: "boolean"
          title: "Status"
          description: "Status of the workspace saying if enabled for the segment"
      type: "object"
      required:
        - "features"
        - "status"
      title: "FeatureSchema"
    "subscription_schemas_StorageTierSchema":
      properties:
        "gb":
          type: "integer"
          maximum: 10000
          minimum: 1
          exclusiveMinimum: 0
          description: "Storage amount in GB"
        "price_per_gb":
          type: "number"
          maximum: 100
          minimum: 0.001
          exclusiveMinimum: 0
          description: "Price per GB in USD"
      type: "object"
      required:
        - "gb"
        - "price_per_gb"
      title: "StorageTierSchema"
    "subscriptions_schema_FeatureSchema":
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          oneOf:
            - type: "null"
            - type: "string"
        "price_per_month":
          type: "number"
        "enabled":
          type: "boolean"
        "created_at":
          oneOf:
            - type: "null"
            - type: "string"
        "updated_at":
          oneOf:
            - type: "null"
            - type: "string"
        "used_in_profiles":
          items:
            type: "string"
          type: "array"
        "values":
          oneOf:
            - type: "null"
            - items:
                type: "string"
              type: "array"
        "value":
          oneOf:
            - type: "null"
            - type: "string"
        "profile_count":
          type: "integer"
      type: "object"
      required:
        - "enabled"
        - "id"
        - "name"
        - "price_per_month"
        - "profile_count"
        - "used_in_profiles"
      title: "FeatureSchema"
    "subscriptions_schema_SubscriptionPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/SubscriptionPatchItem"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "SubscriptionPatchRequest"
      description: "Details of the app to be created"
      examples:
        - {"patch": [{"op": "add", "path": "addons", "value": {"type": "storage", "count": 1}}, {"op": "replace", "path": "addons", "value": {"type": "connector", "remove": ["facebook_ads"], "add": ["ga_lib"]}}, {"op": "add", "path": "addons", "value": {"type": "user", "count": 1}}]}
    "support_schema_SubscriptionPatchRequest":
      properties:
        "patch":
          items: {"$ref": "#/components/schemas/SubscriptionPatchOp"}
          type: "array"
      type: "object"
      required:
        - "patch"
      title: "SubscriptionPatchRequest"
      description: "Subscription detail which needs to be updated"
      examples:
        - {"patch": [{"op": "replace", "path": "subscription_id", "value": "AleMockSubsIda32ax"}]}
    "support_schema_WorkspaceUpdate":
      properties:
        "name":
          type: "string"
          title: "Name of the workspace"
          description: "Name of the workspace to be created"
          examples:
            - {"summary": "Sample Workspace Name", "value": "Sample Workspace Name"}
        "plan_id":
          type: "integer"
          title: "Plan ID"
          description: "Plan ID"
          examples:
            - {"summary": "Sample Plan ID", "value": "internal"}
        "payment_frequency":
          type: "string"
          title: "Payment frequency of the workspace"
          description: "Payment frequency of the workspace"
          examples:
            - {"summary": "Sample Payment Frequency", "value": "monthly"}
      type: "object"
      required:
        - "name"
        - "payment_frequency"
        - "plan_id"
      title: "WorkspaceUpdate"
      description: "Update workspace schema details"
      examples:
        - {"name": "Docs", "plan_id": "new_pro", "payment_frequency": "monthly"}
        - {"name": "Docs 2", "plan_id": "lite", "payment_frequency": "yearly"}
    "workspaces_workspace_schema_WorkspaceUpdate":
      properties:
        "name":
          oneOf:
            - type: "null"
            - type: "string"
          title: "New workspace name"
          description: "Name of the workspace"
          examples:
            - {"value": "Workspace1"}
        "metadata":
          oneOf:
            - type: "null"
            - type: "object"
          title: "Workspace metadata"
          description: "Metadata for the workspace"
          examples:
            - {"value": {"key1": "value1", "key2": "value2"}}
        "plan_id":
          oneOf:
            - type: "null"
            - type: "integer"
          title: "Workspace plan ID"
          description: "ID of the plan assigned to the workspace"
          examples:
            - {"value": 1}
        "billing_cycle":
          oneOf:
            - type: "null"
            - type: "string"
          title: "Workspace billing cycle"
          description: "Billing cycle for the workspace (monthly/yearly)"
          examples:
            - {"value": "monthly"}
      type: "object"
      title: "WorkspaceUpdate"
  securitySchemes:
    "apiKey":
      type: "apiKey"
      name: "X-API-KEY"
      in: "header"
    "apiSecret":
      type: "apiKey"
      name: "X-API-SECRET"
      in: "header"
security:
  - apiKey: []
    apiSecret: []
